{
	"info": {
		"_postman_id": "0829764b-f13f-4173-a73e-db5a18abd709",
		"name": "AWS Partner Central API for Selling",
		"description": "The AWS Partner Central API for Selling enables [AWS Partners ](https://aws.amazon.com/partners/programs/) to integrate their Customer Relationship Management (CRM) systems with AWS Partner Central. This API allows partners to streamline and scale their co-selling process by automating the creation and management of [APN Customer Engagements (ACE)](https://aws.amazon.com/partners/programs/ace/) opportunities within their own CRM. This API is accessible to all AWS Partners.\n\nThe API provides standard AWS API functionality. Access it by either using API [Actions](https://docs.aws.amazon.com/partner-central/latest/selling-api/API_Operations.html) or by using an AWS SDK that's tailored to your programming language or platform. For more information, see [Getting Started with AWS](https://aws.amazon.com/getting-started) and [tools to Build on AWS](https://aws.amazon.com/developer/tools/)\n\nAWS offers two catalogs, `AWS` and `Sandbox` for partners to operate in. `AWS` catalog points to the live production data and `Sandbox` catalog provides a testing catalog. All actions in this collection are corresponding to the `Sandbox`. Read more about [Testing in a Sandbox](https://docs.aws.amazon.com/partner-central/latest/APIReference/testing-sandbox.html).\n\nIn this collection, we offer a range of typical use-cases and sample payloads organized in the following folders:\n\n1. [All API Actions](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_Operations.html): Contains all actions offered with some sample request payloads. Most useful for testing each action.\n    \n2. [Working with Partner-originated opportunities](https://docs.aws.amazon.com/partner-central/latest/APIReference/working-with-your-opportunities.html)\n    \n    1. Submitting an Partner-originated ACE opportunity\n        \n    2. Simulating a Action Required and taking corrective action (Available only in `Sandbox` catalog)\n        \n    3. Simulating the Approval of a Partner-originated referral (Available only in `Sandbox` catalog)\n        \n3. [Working with AWS-originated opportunities](https://docs.aws.amazon.com/partner-central/latest/APIReference/working-with-opportunities-from-aws.html)\n    \n    1. Simulating an AWS Referral creation (Available only in `Sandbox` catalog)\n        \n    2. Rejecting an AWS-originated ACE opportunity\n        \n    3. Accepting an AWS-originated ACE opportunity\n        \n4. [Other common opportunity actions](https://docs.aws.amazon.com/partner-central/latest/APIReference/associating-disassociating-assigning-opportunities.html)\n    \n    1. Assigning an opportunity to an ACE User\n        \n    2. Updating Stage, Next Steps and Target Close date on an ACE Opportunity\n        \n    3. Associating an AWS Marketplace offer to an opportunity\n        \n    4. Launching an opportunity\n        \n\nYou can use custom header `X-Amzn-User-Agent`to help audit and measure API usage by setting the collection variable companyName and crm in the collection's Variables area.\n\n`X-Amzn-User-Agent` = {{CompanyName}}|PostmanCollection|{{CRM}}|v1\n\nSee **ListOpportunities** API call inside \"All API Actions\" folder for example.\n\nFor complete documentation, visit [AWS Partner Central API reference guide](https://docs.aws.amazon.com/partner-central/latest/APIReference/aws-partner-central-api-reference-guide.html).\n\nYou can also use our [Custom CRM Integration with AWS Partner Central via Partner Central API Using Postman Collections workshop](https://catalog.us-east-1.prod.workshops.aws/workshops/33c10afc-9b3e-4ce2-9398-a1772795dc87/en-US) for step-by-step instructions on how to use this collection.\n\n<img src=\"https://content.pstmn.io/969ed950-bffa-4ebf-8c3a-0a168acbb956/U2NyZWVuc2hvdCAyMDI1LTAxLTA4IGF0IDQuNDQuMzDigK9QTS5wbmc=\" width=\"1159\" height=\"707\">",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "All API Actions",
			"item": [
				{
					"name": "AcceptEngagementInvitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd6cbe72-742b-420f-84ae-3c8119e3e61e",
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5564db73-0497-4c3f-ad34-8e6fc0fca28b",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "fb78de79-471a-4107-9d1e-f672820a413f",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"eng-loy2dvfk0s0tq7\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/AcceptEngagementInvitation",
						"description": "Use the [AcceptEngagementInvitation](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_AcceptEngagementInvitation.html) action to accept an engagement invitation shared by AWS. Accepting the invitation indicates your willingness to participate in the engagement, granting you access to all engagement-related data."
					},
					"response": [
						{
							"id": "b0f7d769-18c2-4fe3-a4fb-66817d4baeea",
							"name": "AcceptEngagementInvitation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"engi-ir15msg9mjzwa\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/AcceptEngagementInvitation"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 18:51:15 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "0",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "f77b80ce-7ddd-467c-83d9-6192e66e071b",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "AssignOpportunity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd6cbe72-742b-420f-84ae-3c8119e3e61e",
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5564db73-0497-4c3f-ad34-8e6fc0fca28b",
								"exec": [
									"// Parse the request payload",
									"const requestPayload = JSON.parse(pm.request.body.raw);",
									"",
									"// Extract relevant attributes",
									"const opportunityId = requestPayload.Identifier;",
									"const assigneeEmail = requestPayload.Assignee.Email;",
									"",
									"// Log the assignment details",
									"console.log(`[Pre-req ${pm.info.requestName}] Assigning ${opportunityId} to ${assigneeEmail}`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7f0fb269-cf09-42f7-b02c-e0f373bf98e2",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"O1111111\",\n    \"Assignee\": {\n        \"BusinessTitle\": \"PartnerAccountManager\",\n        \"Email\": \"test@test.com\",\n        \"FirstName\": \"John\",\n        \"LastName\": \"Doe\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/AssignOpportunity",
						"description": "[AssignOpportunity](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_AssignOpportunity.html)\n\nEnables you to reassign an existing `Opportunity` to another user within your Partner Central account. The specified user receives the opportunity, and it appears on their Partner Central dashboard, allowing them to take necessary actions or proceed with the opportunity.\n\nThis is useful for distributing opportunities to the appropriate team members or departments within your organization, ensuring that each opportunity is handled by the right person. By default, the opportunity owner is the one who creates it. Currently, there's no API to enumerate the list of available users."
					},
					"response": [
						{
							"id": "6a7e1524-f678-4c6b-abfd-23f018206a1f",
							"name": "AssignOpportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"Sandbox\",\n\t \"Identifier\": \"O4237356\",\n   \"Assignee\": { \n   \t  \"BusinessTitle\": \"OpportunityOwner\",\n      \"Email\": \"tp8889testal@testsandbox00dva000000xjrrmau.com\",\n      \"FirstName\": \"John\",\n      \"LastName\": \"Doe\"\n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://partnercentral-selling.us-east-1.api.aws/AssignOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 14 Nov 2024 23:40:49 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "0",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "0eae128e-7e3e-44d3-9e58-0d13a221eb65",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "AssociateOpportunity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6d396ffd-f90b-48c9-b673-fda1227eef4e",
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "65982e4f-77f7-4c0a-a1ec-12927a45d63c",
								"exec": [
									"// Parse the request payload",
									"const requestPayload = JSON.parse(pm.request.body.raw);",
									"",
									"// Extract relevant attributes",
									"const opportunityId = requestPayload.OpportunityIdentifier;",
									"const relatedEntityType = requestPayload.RelatedEntityType;",
									"const relatedEntityIdentifier = requestPayload.RelatedEntityIdentifier;",
									"",
									"// Log the association details",
									"console.log(`[Pre-req ${pm.info.requestName}] Associating the ${relatedEntityType}, ${relatedEntityIdentifier} to opportunity ${opportunityId}`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a9658f74-9f61-46ba-ad7c-a7bf7adacb52",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"OpportunityIdentifier\": \"O1111111\",\n    \"RelatedEntityIdentifier\": \"S-0000000\",\n    \"RelatedEntityType\": \"Solutions\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/AssociateOpportunity",
						"description": "[AssociateOpportunity](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_AssociateOpportunity.html)\n\nEnables you to create a formal association between an `Opportunity` and various related entities, enriching the context and details of the opportunity for better collaboration and decision-making. You can associate an opportunity with the following types of entities:\n\n- Partner Solution: A software product or consulting practice created and delivered by AWS Partners. Partner Solutions help customers address specific business challenges or achieve particular goals using AWS services.\n    \n- AWS Product: AWS offers a wide range of products and services designed to provide scalable, reliable, and cost-effective infrastructure solutions. For the latest list of AWS products, see[AWS products](https://github.com/aws-samples/partner-crm-integration-samples/blob/main/resources/aws_products.json).\n    \n- AWS Marketplace private offer: Allows AWS Marketplace sellers to extend custom pricing and terms to individual AWS customers. Sellers can negotiate custom prices, payment schedules, and end user license terms through private offers, enabling AWS customers to acquire software solutions tailored to their specific needs. For more information, see [Private offers in AWS Marketplace](https://docs.aws.amazon.com/marketplace/latest/buyerguide/buyer-private-offers.html)."
					},
					"response": [
						{
							"id": "97687b39-6f42-467d-963e-27ca408dd9c9",
							"name": "AssociateOpportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"Sandbox\",\n   \"OpportunityIdentifier\": \"O4237356\",\n   \"RelatedEntityIdentifier\": \"S-0059631\",\n   \"RelatedEntityType\": \"Solutions\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://partnercentral-selling.us-east-1.api.aws/AssociateOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 14 Nov 2024 21:52:53 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "0",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "972ef726-38cf-407f-a2cb-a0187fbd3799",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "CreateEngagement",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c1e283f-a239-4d0c-b293-eee8f88e5bd0",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8811bb5-c353-42bd-862f-a4e9b227d1b6",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "71a04adc-8c17-4cd8-bd64-a14bf2e206b9",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": " {\n   \"Catalog\":\"{{catalog}}\",\n   \"ClientToken\": \"{{$guid}}\",\n   \"Title\":\"Test Engagement16\",\n   \"Description\":\"This is my test\",\n   \"Contexts\":[\n      {\n         \"Type\":\"CustomerProject\",\n         \"Payload\":{\n            \"CustomerProject\":{\n               \"Customer\":{\n                  \"CompanyName\":\"{{$randomCompanyName}}\",\n                  \"WebsiteUrl\":\"{{$randomDomainName}}\",\n                  \"Industry\":\"Retail\",\n                  \"CountryCode\":\"US\"\n               },\n               \"Project\":{\n                  \"Title\":\"Project16\",\n                  \"BusinessProblem\":\"Historically taken a regional approach to Access Management\",\n                  \"TargetCompletionDate\":\"2025-05-12\"\n               }\n            }\n         }\n      }\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/CreateEngagement",
						"description": "The [CreateEngagement](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_CreateEngagement.html) action allows you to create an `Engagement`, which serves as a collaborative space between different parties such as AWS Partners and AWS Sellers. This action automatically adds the caller's AWS account as an active member of the newly created `Engagement`."
					},
					"response": [
						{
							"id": "c096377a-140b-4942-9759-5853cfa6281d",
							"name": "CreateEngagement",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": " {\n   \"Catalog\":\"{{catalog}}\",\n   \"ClientToken\": \"{{$guid}}\",\n   \"Title\":\"Test Engagement16\",\n   \"Description\":\"This is my test\",\n   \"Contexts\":[\n      {\n         \"Type\":\"CustomerProject\",\n         \"Payload\":{\n            \"CustomerProject\":{\n               \"Customer\":{\n                  \"CompanyName\":\"{{$randomCompanyName}}\",\n                  \"WebsiteUrl\":\"{{$randomDomainName}}\",\n                  \"Industry\":\"Retail\",\n                  \"CountryCode\":\"US\"\n               },\n               \"Project\":{\n                  \"Title\":\"Project16\",\n                  \"BusinessProblem\":\"Historically taken a regional approach to Access Management\",\n                  \"TargetCompletionDate\":\"2025-05-12\"\n               }\n            }\n         }\n      }\n   ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/CreateEngagement"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 16:34:26 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "111",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "983f9f8e-cd37-4cd9-bb2a-38af43bc9017",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement/eng-ktsuz9kfow9cv5\",\n    \"Id\": \"eng-ktsuz9kfow9cv5\"\n}"
						}
					]
				},
				{
					"name": "CreateEngagementInvitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c1e283f-a239-4d0c-b293-eee8f88e5bd0",
								"exec": [
									"try {",
									"   let acceptingEngagementInvitationID =  pm.response.json().Id;",
									"",
									"    // Save the opportunityId to a collection variable",
									"    pm.collectionVariables.set(\"acceptingEngagementInvitationID\", acceptingEngagementInvitationID);",
									"",
									"    // Log the opportunity creation",
									"    console.log(`Created engagementInvitation with ID ${acceptingEngagementInvitationID}`);",
									"",
									"    // Add a test to validate the opportunityId extraction",
									"    pm.test(`[Post-res ${pm.info.requestName}] Validate engagementInvitation ID extraction`, function () {",
									"        pm.response.to.have.status(200); // Ensure the response status is 200",
									"        pm.expect(acceptingEngagementInvitationID).to.exist; // Ensure engagementInvitationId exists",
									"        pm.expect(acceptingEngagementInvitationID).to.not.be.empty; // Ensure engagementInvitationId is not empty",
									"        console.log(`[Post-res ${pm.info.requestName}] Engagement Invitation ID ${acceptingEngagementInvitationID} successfully extracted and stored.`);",
									"    });",
									"",
									"} catch (error) {",
									"    // Handle any additional errors",
									"    console.error(`[${pm.info.requestName}] Failed to extract response data:`, error);",
									"",
									"    // Add a test to capture the error",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
									"        throw error; // Fail the test if an error occurs",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8811bb5-c353-42bd-862f-a4e9b227d1b6",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2e4a5cdf-04a5-4ce4-b423-ed81c705cc49",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ClientToken\": \"{{$guid}}\",\n    \"Catalog\": \"{{catalog}}\",\n    \"EngagementIdentifier\": \"eng-njq84cen9tkigi\",\n    \"Invitation\": { \n        \"Message\": \"My Test Message\",\n        \"Receiver\": {\n            \"Account\": {\n                \"Alias\": \"Test20\",\n                \"AwsAccountId\": \"222222222222\"\n            }\n        },\n        \"Payload\": {\n            \"OpportunityInvitation\": {\n                \"SenderContacts\": [{\n                    \"Email\": \"test20@mytest.com\",\n                    \"FirstName\": \"Test\",\n                    \"LastName\": \"Testlast1\",\n                    \"BusinessTitle\": \"Regional Manager\",\n                    \"Phone\": \"+14151231234\"\n                }],\n                \"ReceiverResponsibilities\": [\"Distributor\"],\n                \"Customer\": {\n                    \"Industry\": \"Agriculture\",\n                    \"CompanyName\": \"Company20\",\n                    \"WebsiteUrl\": \"{{$randomDomainName}}\",\n                    \"CountryCode\": \"US\"\n                },\n                \"Project\": {\n                    \"Title\": \"Project32\",\n                    \"BusinessProblem\": \"This is a very important problem\",\n                    \"TargetCompletionDate\": \"2025-10-04\",\n                    \"ExpectedCustomerSpend\": [{\n                        \"Amount\": \"10000.00\",\n\t\t\t\t\t\t\"TargetCompany\": \"AWS\",\n                        \"CurrencyCode\": \"USD\",\n\t\t\t\t\t    \"Frequency\": \"Monthly\",\n                        \"EstimationUrl\": \"www.amazon.com\"\n                    }]\n                }\n            }\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/CreateEngagementInvitation",
						"description": "[CreateEngagementInvitation](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_CreateEngagementInvitation.html) creates an invitation from a sender to a single receiver to join an engagement."
					},
					"response": [
						{
							"id": "9e8746b5-e3a2-46cc-acbb-8bc3c422bf2a",
							"name": "CreateEngagementInvitation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ClientToken\": \"{{$guid}}\",\n    \"Catalog\": \"{{catalog}}\",\n    \"EngagementIdentifier\": \"eng-njq84cen9tkigi\",\n    \"Invitation\": { \n        \"Message\": \"My Test Message\",\n        \"Receiver\": {\n            \"Account\": {\n                \"Alias\": \"Test20\",\n                \"AwsAccountId\": \"277707133693\"\n            }\n        },\n        \"Payload\": {\n            \"OpportunityInvitation\": {\n                \"SenderContacts\": [{\n                    \"Email\": \"test20@mytest.com\",\n                    \"FirstName\": \"Test\",\n                    \"LastName\": \"Testlast1\",\n                    \"BusinessTitle\": \"Regional Manager\",\n                    \"Phone\": \"+14151231234\"\n                }],\n                \"ReceiverResponsibilities\": [\"Distributor\"],\n                \"Customer\": {\n                    \"Industry\": \"Agriculture\",\n                    \"CompanyName\": \"Company20\",\n                    \"WebsiteUrl\": \"{{$randomDomainName}}\",\n                    \"CountryCode\": \"US\"\n                },\n                \"Project\": {\n                    \"Title\": \"Project32\",\n                    \"BusinessProblem\": \"This is a very important problem\",\n                    \"TargetCompletionDate\": \"2025-10-04\",\n                    \"ExpectedCustomerSpend\": [{\n                        \"Amount\": \"10000.00\",\n\t\t\t\t\t\t\"TargetCompany\": \"AWS\",\n                        \"CurrencyCode\": \"USD\",\n\t\t\t\t\t    \"Frequency\": \"Monthly\",\n                        \"EstimationUrl\": \"www.amazon.com\"\n                    }]\n                }\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/CreateEngagementInvitation"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 17:20:18 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "189",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "43fc9721-e8fe-4353-b73b-9be1b08940c1",
									"enabled": true
								},
								{
									"key": "x-amzn-ErrorType",
									"value": "ValidationException:http://internal.amazon.com/coral/com.amazon.partnerintegrationapi.common/",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement-invitation/engi-e1xc7gri1ti85\",\n\t\"Id\": \"engi-e1xc7gri1ti85\"\n}"
						}
					]
				},
				{
					"name": "CreateOpportunity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c1e283f-a239-4d0c-b293-eee8f88e5bd0",
								"exec": [
									"try {",
									"    opportunityId = pm.response.json().Id;",
									"",
									"    // Save the opportunityId to a collection variable",
									"    pm.collectionVariables.set('opportunityId', opportunityId);",
									"",
									"    // Log the opportunity creation",
									"    console.log(`Created opportunity with ID ${opportunityId}`);",
									"",
									"    // Add a test to validate the opportunityId extraction",
									"    pm.test(`[Post-res ${pm.info.requestName}] Validate opportunity ID extraction`, function () {",
									"        pm.response.to.have.status(200); // Ensure the response status is 200",
									"        pm.expect(opportunityId).to.exist; // Ensure opportunityId exists",
									"        pm.expect(opportunityId).to.not.be.empty; // Ensure opportunityId is not empty",
									"        console.log(`[Post-res ${pm.info.requestName}] Opportunity ID ${opportunityId} successfully extracted and stored.`);",
									"    });",
									"",
									"} catch (error) {",
									"    // Handle any additional errors",
									"    console.error(`[${pm.info.requestName}] Failed to extract response data:`, error);",
									"",
									"    // Add a test to capture the error",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
									"        throw error; // Fail the test if an error occurs",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8811bb5-c353-42bd-862f-a4e9b227d1b6",
								"exec": [
									"try {",
									"    // Step 1: Generate Client Token",
									"    const clientToken = pm.variables.replaceIn('{{$randomUUID}}')",
									"",
									"    // Save the generated client token as a local variable",
									"    pm.variables.set('clientToken', pm.variables.replaceIn('{{$randomUUID}}'));",
									"    console.log(`[${pm.info.requestName}] Generated Client Token: ${clientToken}`);",
									"",
									"    // Step 2: Generate Opportunity Details",
									"    const requestTitle = \"New Business Deal\"; // Base title for the opportunity",
									"    const opportunityAmount = Math.floor(Math.random() * (32000 - 12000 + 1)) + 12000; // Random amount between 12000 and 32000",
									"    const randomSuffix = Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000; // Random 4-digit number",
									"    const opportunityTitle = `${requestTitle} - ${randomSuffix}`;",
									"    console.log(`amount ${opportunityAmount} random suffix ${randomSuffix} opportunity title ${opportunityTitle}`);",
									"",
									"    // Save the generated opportunity details as local variables",
									"    pm.variables.set('opportunityTitle', opportunityTitle);",
									"    pm.variables.set('opportunityAmount', opportunityAmount);",
									"    console.log(`[${pm.info.requestName}] Generated Opportunity Title: ${opportunityTitle}`);",
									"    console.log(`[${pm.info.requestName}] Generated Opportunity Amount: ${opportunityAmount}`);",
									"} catch (error) {",
									"    // Handle any errors during token generation or opportunity detail generation",
									"    console.error(`[${pm.info.requestName}] Error occurred:`, error);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6faf604b-1ecc-4248-9a5d-68720be0efc9",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ClientToken\": \"{{clientToken}}\",\n    \"Catalog\": \"{{catalog}}\",\n    \"Origin\": \"Partner Referral\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": null,\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": null\n            },\n            \"AwsAccountId\": \"111111111111\",\n            \"CompanyName\": \"ValidAWSCreate\",\n            \"Duns\": \"111100111\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": null,\n            \"WebsiteUrl\": \"www.test.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Executive\",\n                \"Email\": \"test@test.com\",\n                \"FirstName\": \"TestContact011\",\n                \"LastName\": \"MLastName001\",\n                \"Phone\": \"+14444444444\"\n            }\n        ]\n    },\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Pending Submission\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Prospect\",\n        \"TargetCloseDate\": \"2029-10-05\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": \"Yes\",\n        \"CampaignName\": \"TestCampaignName01\",\n        \"Channels\": [\n            \"Content Syndication\"\n        ],\n        \"Source\": \"Marketing Activity\",\n        \"UseCases\": [\n            \"Analytics\"\n        ]\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"testemail@test.com\",\n            \"FirstName\": \"TestContact001\",\n            \"LastName\": \"CLastName001\",\n            \"Phone\": \"+14444444444\"\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Architectural Validation\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": \"On-Prem\",\n        \"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n        \"CustomerUseCase\": \"Security & Compliance\",\n        \"DeliveryModels\": [\n            \"SaaS or PaaS\"\n        ],\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"12500\",\n                \"CurrencyCode\": \"USD\",\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": \"TestSolution\",\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Conducted POC / Demo\"\n        ],\n        \"Title\": \"{{opportunityTitle}}\"\n    },\n    \"SoftwareRevenue\": {\n        \"DeliveryModel\": \"Pay-as-you-go\",\n        \"EffectiveDate\": \"2023-10-31\",\n        \"ExpirationDate\": \"2024-03-31\",\n        \"Value\": {\n            \"Amount\": \"10000.0\",\n            \"CurrencyCode\": \"USD\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/CreateOpportunity",
						"description": "[CreateOpportunity](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_CreateOpportunity.html) creates an `Opportunity` record in Partner Central. Use this operation to create a potential business opportunity for submission to AWS. Creating an opportunity sets `Lifecycle.ReviewStatus` to `Pending Submission`.\n\nTo submit an opportunity, follow these steps:\n\n1. To create the opportunity, use `CreateOpportunity`.\n    \n2. To associate a solution with the opportunity, use `AssociateOpportunity`.\n    \n3. To start the engagement with AWS, use `StartEngagementFromOpportunity`.\n    \n\nAfter submission, you can't edit the opportunity until the review is complete. But opportunities in the `Pending Submission` state must have complete details. You can update the opportunity while it's in the `Pending Submission` state.\n\nThere's a set of mandatory fields to create opportunities, but consider providing optional fields to enrich the opportunity record."
					},
					"response": [
						{
							"id": "567368f5-dc68-43b2-9e75-a16b97eaac1f",
							"name": "CreateOpportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ClientToken\": \"test-do31221231233131233122112313568eqw3111324133301kdsssn\",\n\t\"Catalog\": \"Sandbox\",\n\t\"Origin\": \"Partner Referral\",\n\t\"Customer\": {\n\t\t\"Account\": {\n\t\t\t\"Address\": {\n\t\t\t\t\"City\": null,\n\t\t\t\t\"CountryCode\": \"US\",\n\t\t\t\t\"PostalCode\": \"10001\",\n\t\t\t\t\"StateOrRegion\": \"New York\",\n\t\t\t\t\"StreetAddress\": null\n\t\t\t},\n\t\t\t\"AwsAccountId\": \"909090909090\",\n\t\t\t\"CompanyName\": \"ValidSandboxCreate\",\n\t\t\t\"Duns\": \"111100111\",\n\t\t\t\"Industry\": \"Financial Services\",\n\t\t\t\"OtherIndustry\": null,\n\t\t\t\"WebsiteUrl\": \"www.testsite011.amazon.com\"\n\t\t},\n\t\t\"Contacts\": [\n\t\t\t{\n\t\t\t\t\"BusinessTitle\": \"Executive\",\n\t\t\t\t\"Email\": \"testnamelast09@gmail.com\",\n\t\t\t\t\"FirstName\": \"TestContact011\",\n\t\t\t\t\"LastName\": \"MLastName001\",\n\t\t\t\t\"Phone\": \"+14567898765\"\n\t\t\t}\n\t\t]\n\t},\n\t\"LifeCycle\": {\n\t\t\"ClosedLostReason\": null,\n\t\t\"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n\t\t\"NextStepsHistory\": null,\n\t\t\"ReviewComments\": null,\n\t\t\"ReviewStatus\": \"Pending Submission\",\n\t\t\"ReviewStatusReason\": null,\n\t\t\"Stage\": \"Prospect\",\n\t\t\"TargetCloseDate\": \"2029-10-05\"\n\t},\n\t\"Marketing\": {\n\t\t\"AwsFundingUsed\": \"Yes\",\n\t\t\"CampaignName\": \"TestCampaignName01\",\n\t\t\"Channels\": [\n\t\t\t\"Content Syndication\"\n\t\t],\n\t\t\"Source\": \"Marketing Activity\",\n\t\t\"UseCases\": [\n\t\t\t\"Analytics\"\n\t\t]\n\t},\n\t\"NationalSecurity\": \"No\",\n\t\"OpportunityTeam\": [\n\t\t{\n\t\t\t\"BusinessTitle\": \"PartnerAccountManager\",\n\t\t\t\"Email\": \"testfirstlast001@gmail.com\",\n\t\t\t\"FirstName\": \"TestContact001\",\n\t\t\t\"LastName\": \"CLastName001\",\n\t\t\t\"Phone\": \"+19875678877\"\n\t\t}\n\t],\n\t\"OpportunityType\": \"Net New Business\",\n\t\"PartnerOpportunityIdentifier\": null,\n\t\"PrimaryNeedsFromAws\": [\n\t\t\"Co-Sell - Architectural Validation\"\n\t],\n\t\"Project\": {\n\t\t\"AdditionalComments\": null,\n\t\t\"ApnPrograms\": null,\n\t\t\"CompetitorName\": \"Google Cloud Platform\",\n\t\t\"CustomerBusinessProblem\": \"A very important problem goes here ValidSandboxCreate\",\n\t\t\"CustomerUseCase\": \"Security & Compliance\",\n\t\t\"DeliveryModels\": [\n\t\t\t\"SaaS or PaaS\"\n\t\t],\n\t\t\"ExpectedCustomerSpend\": [\n\t\t\t{\n\t\t\t\t\"Amount\": \"12500\",\n\t\t\t\t\"CurrencyCode\": \"USD\",\n\t\t\t\t\"Frequency\": \"Monthly\",\n\t\t\t\t\"TargetCompany\": \"AWS\"\n\t\t\t}\n\t\t],\n\t\t\"OtherCompetitorNames\": null,\n\t\t\"OtherSolutionDescription\": \"TestSolution\",\n\t\t\"RelatedOpportunityIdentifier\": null,\n\t\t\"SalesActivities\": [\n\t\t\t\"Conducted POC / Demo\"\n\t\t],\n\t\t\"Title\": \"Some New Project Name\"\n\t},\n\t\"SoftwareRevenue\": {\n\t\t\"DeliveryModel\": \"Pay-as-you-go\",\n\t\t\"EffectiveDate\": \"2023-10-31\",\n\t\t\"ExpirationDate\": \"2024-03-31\",\n\t\t\"Value\": {\n\t\t\t\"Amount\": \"10000.0\",\n\t\t\t\"CurrencyCode\": \"USD\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://partnercentral-selling.us-east-1.api.aws/CreateOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 14 Nov 2024 21:33:19 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "95",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "bfb55fce-8410-485c-9f72-0eacc7a2a916",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Id\": \"O1111111\",\n    \"LastModifiedDate\": \"2024-11-14T21:33:18Z\",\n    \"PartnerOpportunityIdentifier\": null\n}"
						}
					]
				},
				{
					"name": "CreateResourceSnapshot",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c1e283f-a239-4d0c-b293-eee8f88e5bd0",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8811bb5-c353-42bd-862f-a4e9b227d1b6",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6715e370-c46e-44fd-818b-af92f8ef11d6",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"ClientToken\": \"{{clientToken}}\",\n    \"EngagementIdentifier\": \"eng-loy2dvfk0s0tq7\",\n    \"ResourceType\": \"Opportunity\",\n    \"ResourceIdentifier\": \"O1111111\",\n    \"ResourceSnapshotTemplateIdentifier\": \"Opportunity\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/CreateResourceSnapshot",
						"description": "This [action](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_CreateResourceSnapshot.html) allows you to create an immutable snapshot of a specific resource, such as an opportunity, within the context of an engagement. The snapshot captures a subset of the resource's data based on the schema defined by the provided template."
					},
					"response": [
						{
							"id": "b54a78e8-e0d0-4613-90b3-1cd33cf1483f",
							"name": "CreateResourceSnapshot",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"EngagementIdentifier\": \"eng-eyl04g6b3yz2t6\",\n    \"ResourceType\": \"Opportunity\",\n    \"ResourceIdentifier\": \"O4974569\",\n    \"ResourceSnapshotTemplateIdentifier\": \"Opportunity\",\n    \"ClientToken\": \"{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/CreateResourceSnapshot"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 19:04:23 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "44",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "36ae7ee7-84f2-4d64-887b-707785281740",
									"enabled": true
								},
								{
									"key": "x-amzn-ErrorType",
									"value": "ResourceNotFoundException:http://internal.amazon.com/coral/com.amazon.partnerintegrationapi.common/",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement/eng-eyl04g6b3yz2t6/resource/Opportunity/O1111111/template/Opportunity/snapshot/1\",\n\t\"Revision\": 1\n}"
						}
					]
				},
				{
					"name": "CreateResourceSnapshotJob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c1e283f-a239-4d0c-b293-eee8f88e5bd0",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8811bb5-c353-42bd-862f-a4e9b227d1b6",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9c40bbe4-13d1-47a7-a6c1-d6b24e48dad5",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"EngagementIdentifier\": \"eng-eyl04g6b3yz2t6\",\n    \"ResourceType\": \"Opportunity\",\n    \"ResourceIdentifier\": \"O1111111\",\n    \"ResourceSnapshotTemplateIdentifier\": \"OpportunitySummaryView\",\n    \"ClientToken\": \"{{$guid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/CreateResourceSnapshotJob",
						"description": "Use this [action](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_CreateResourceSnapshotJob.html) to create a job to generate a snapshot of the specified resource within an engagement. It initiates an asynchronous process to create a resource snapshot. The job creates a new snapshot only if the resource state has changed, adhering to the same access control and immutability rules as direct snapshot creation."
					},
					"response": [
						{
							"id": "e5cddb57-08e5-46cb-aad0-b09b5db99dff",
							"name": "CreateResourceSnapshotJob",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"EngagementIdentifier\": \"eng-eyl04g6b3yz2t6\",\n    \"ResourceType\": \"Opportunity\",\n    \"ResourceIdentifier\": \"O4973793\",\n    \"ResourceSnapshotTemplateIdentifier\": \"OpportunitySummaryView\",\n    \"ClientToken\": \"{{$guid}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{GAMMA_URL}}/CreateResourceSnapshotJob"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 19:14:07 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "1579",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "70c02430-f1fd-486f-bf7e-df6fe3b592d0",
									"enabled": true
								},
								{
									"key": "x-amzn-ErrorType",
									"value": "ValidationException:http://internal.amazon.com/coral/com.amazon.partnerintegrationapi.common/",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"Arn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/AWS/resource-snapshot-job/job-ib7zo7tu7pau5\",\n\t\"Id\": \"job-ib7zo7tu7pau5\"\n}"
						}
					]
				},
				{
					"name": "DeleteResourceSnapshotJob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c1e283f-a239-4d0c-b293-eee8f88e5bd0",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8811bb5-c353-42bd-862f-a4e9b227d1b6",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1e71bd75-f4cd-4acd-836f-5284140448b4",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"ResourceSnapshotJobIdentifier\": \"job-ib7zo7tu7pau5\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/DeleteResourceSnapshotJob",
						"description": "Use this [action](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_DeleteResourceSnapshotJob.html) to deletes a previously created resource snapshot job. The job must be in a stopped state before it can be deleted."
					},
					"response": [
						{
							"id": "8f639de3-d8dd-4130-857e-243a4fb26ee4",
							"name": "DeleteResourceSnapshotJob",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"ResourceSnapshotJobIdentifier\": \"job-ib7zo7tu7pau5\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{GAMMA_URL}}/CreateResourceSnapshotJob"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 19:16:06 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "1579",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "4b6adb8e-5dae-4b13-9ec5-529acb8c1949",
									"enabled": true
								},
								{
									"key": "x-amzn-ErrorType",
									"value": "ValidationException:http://internal.amazon.com/coral/com.amazon.partnerintegrationapi.common/",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "DisassociateOpportunity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7451a91-2672-479a-814b-f5ab19bbc950",
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b1c77a8-baf6-4f39-9b23-23a2c3a3d859",
								"exec": [
									"// Parse the request payload",
									"const requestPayload = JSON.parse(pm.request.body.raw);",
									"",
									"// Extract relevant attributes",
									"const opportunityId = requestPayload.OpportunityIdentifier;",
									"const relatedEntityType = requestPayload.RelatedEntityType;",
									"const relatedEntityIdentifier = requestPayload.RelatedEntityIdentifier;",
									"",
									"// Log the association details",
									"console.log(`[Pre-req ${pm.info.requestName}] Disassociating the ${relatedEntityType}, ${relatedEntityIdentifier} from opportunity ${opportunityId}`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "5b51c419-e70c-4b40-9a55-c299eb197fb5",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"Catalog\": \"{{catalog}}\",\n\t\"OpportunityIdentifier\": \"O1111111\",\n\t\"RelatedEntityType\": \"Solutions\",\n\t\"RelatedEntityIdentifier\": \"S-0000000\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/DisassociateOpportunity",
						"description": "[DisassociateOpportunity](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_DisassociateOpportunity.html)\n\nAllows you to remove an existing association between an `Opportunity` and related entities, such as a Partner Solution, AWS product, or an AWS Marketplace offer. This operation is the counterpart to `AssociateOpportunity`, and it provides flexibility to manage associations as business needs change.\n\nUse this operation to update the associations of an `Opportunity` due to changes in the related entities, or if an association was made in error. Ensuring accurate associations helps maintain clarity and accuracy to track and manage business opportunities. When you replace an entity, first attach the new entity and then disassociate the one to be removed, especially if it's the last remaining entity that's required."
					},
					"response": [
						{
							"id": "59436306-4991-4986-9561-79e4f0ba9372",
							"name": "DisassociateOpportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Catalog\": \"Sandbox\",\n\t\"OpportunityIdentifier\": \"O1952682\",\n\t\"RelatedEntityType\": \"Solutions\",\n\t\"RelatedEntityIdentifier\": \"S-0045543\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://partnercentral-selling.us-east-1.api.aws/DisassociateOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 15 Nov 2024 00:38:06 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "32",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "eddc6b7c-ea20-4bdd-b6f0-b68ae2809b97",
									"enabled": true
								},
								{
									"key": "x-amzn-ErrorType",
									"value": "ResourceNotFoundException:http://internal.amazon.com/coral/com.amazon.partnerintegrationapi.common/",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "GetAwsOpportunitySummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a125b8e-6852-4243-a96a-23b44e1c9c1f",
								"exec": [
									"// Parse the request payload to extract the Identifier",
									"const requestPayload = JSON.parse(pm.request.body.raw);",
									"const identifier = requestPayload.RelatedOpportunityId || \"Unknown Identifier\";",
									"",
									"// Check the response status and log accordingly",
									"if (pm.response.code === 200) {",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded for Identifier: ${identifier}`);",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed for Identifier: ${identifier}. Status Code: ${pm.response.code}`);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c779b3b1-2d66-4c0a-b440-b7d9a0e73ab0",
								"exec": [
									"// Parse the request payload to extract the Identifier",
									"const requestPayload = JSON.parse(pm.request.body.raw);",
									"const identifier = requestPayload.RelatedOpportunityIdentifier || \"Unknown Identifier\";",
									"",
									"// Log the start of the action with the Identifier",
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for RelatedOpportunityIdentifier: ${identifier}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2c613117-9cd1-4d51-a2dd-e22802aa2ddb",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"RelatedOpportunityIdentifier\": \"O1111111\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetAwsOpportunitySummary",
						"description": "[GetAwsOpportunitySummary](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetAwsOpportunitySummary.html)\n\nRetrieves a summary of an AWS Opportunity. This summary includes high-level details about the opportunity sourced from AWS, such as lifecycle information, customer details, and involvement type. It is useful for tracking updates on the AWS opportunity corresponding to an opportunity in the partner's account."
					},
					"response": [
						{
							"id": "c0477691-9e5d-4ae2-8c2f-7804fa773621",
							"name": "GetAwsOpportunitySummary",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"Sandbox\",\n   \"RelatedOpportunityIdentifier\": \"O4236577\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://partnercentral-selling.us-east-1.api.aws/GetAwsOpportunitySummary"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 14 Nov 2024 23:57:41 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "677",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "97a4e9e5-7921-490d-821f-4fd1357d8f7c",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Catalog\": \"AWS\",\n    \"Customer\": {\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": null,\n                \"Email\": \"test@test.com\",\n                \"FirstName\": null,\n                \"LastName\": null,\n                \"Phone\": null\n            }\n        ]\n    },\n    \"Insights\": null,\n    \"InvolvementType\": \"Co-Sell\",\n    \"InvolvementTypeChangeReason\": null,\n    \"LifeCycle\": null,\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"PDM\",\n            \"Email\": \"test@test.com\",\n            \"FirstName\": \"TestFirstName\",\n            \"LastName\": \"TestLastName\"\n        }\n    ],\n    \"Origin\": \"Partner Referral\",\n    \"Project\": {\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"2132\",\n                \"CurrencyCode\": \"USD\",\n                \"EstimationUrl\": null,\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ]\n    },\n    \"RelatedEntityIds\": {\n        \"AwsProducts\": [],\n        \"Solutions\": [\n            \"S-0000000\",\n            \"S-0000001\"\n        ]\n    },\n    \"RelatedOpportunityId\": \"O1111111\",\n    \"Visibility\": \"Full\"\n}"
						}
					]
				},
				{
					"name": "GetEngagement",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a125b8e-6852-4243-a96a-23b44e1c9c1f",
								"exec": [
									"// Parse the request payload to extract the Identifier",
									"const requestPayload = JSON.parse(pm.request.body.raw);",
									"const identifier = requestPayload.Identifier || \"Unknown Identifier\";",
									"",
									"// Check the response status and log accordingly",
									"if (pm.response.code === 200) {",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded for Identifier: ${identifier}`);",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed for Identifier: ${identifier}. Status Code: ${pm.response.code}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c779b3b1-2d66-4c0a-b440-b7d9a0e73ab0",
								"exec": [
									"// Parse the request payload to extract the Identifier",
									"const requestPayload = JSON.parse(pm.request.body.raw);",
									"const identifier = requestPayload.Identifier || \"Unknown Identifier\";",
									"",
									"// Log the start of the action with the Identifier",
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${identifier}`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9c0bec64-9f73-4fe0-babb-b1506cd40e54",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"eng-0e7bzf66vlcj3p\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetEngagement",
						"description": "Use this [action](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetAwsOpportunitySummary.html) to retrieve the engagement record for a given `EngagementIdentifier`."
					},
					"response": [
						{
							"id": "2fc90f50-0ad3-4d98-b82c-1a43c842b196",
							"name": "GetEngagement",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"eng-ktsuz9kfow9cv5\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetEngagement"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 16:41:58 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "586",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "d639632c-03dc-4604-8bfa-6396e9d4961e",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement/eng-ktsuz9kfow9cv5\",\n    \"Contexts\": [\n        {\n            \"Payload\": {\n                \"CustomerProject\": {\n                    \"Customer\": {\n                        \"CompanyName\": \"Willms - Wyman\",\n                        \"CountryCode\": \"US\",\n                        \"Industry\": \"Retail\",\n                        \"WebsiteUrl\": \"wade.name\"\n                    },\n                    \"Project\": {\n                        \"BusinessProblem\": \"Historically taken a regional approach to Access Management\",\n                        \"TargetCompletionDate\": \"2025-05-12\",\n                        \"Title\": \"Project16\"\n                    }\n                }\n            },\n            \"Type\": \"CustomerProject\"\n        }\n    ],\n    \"CreatedAt\": \"2025-01-15T16:34:26.04932597Z\",\n    \"CreatedBy\": \"222222222222\",\n    \"Description\": \"This is my test\",\n    \"Id\": \"eng-ktsuz9kfow9cv5\",\n    \"MemberCount\": 1,\n    \"Title\": \"Test Engagement16\"\n}"
						}
					]
				},
				{
					"name": "GetEngagementInvitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59663823-8510-4750-ab76-04f1f114d3ff",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "033ddfae-1e87-41eb-a829-bdc157c561da",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement-invitation/engi-0000001abc3de\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetEngagementInvitation",
						"description": "[GetEngagementInvitation](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetEngagementInvitation.html)\n\nRetrieves the details of an engagement invitation shared by AWS with a partner. The information includes aspects such as customer, project details, and lifecycle information. To connect an engagement invitation with an opportunity, match the invitation’s `Payload.Project.Title` with opportunity `Project.Title`."
					},
					"response": [
						{
							"id": "5c022001-8231-4151-a1a2-fa72bd1b2baa",
							"name": "GetEngagementInvitation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"Sandbox\",\n   \"Identifier\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-invitation/engi-0000002itk3ga\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://partnercentral-selling.us-east-1.api.aws/GetEngagementInvitation"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 14 Nov 2024 23:59:16 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "1328",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "5f02fd5c-117b-4da8-8e7d-6674db2a39d7",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement-invitation/engi-0000001abc3de\",\n    \"Catalog\": \"AWS\",\n    \"EngagementDescription\": null,\n    \"EngagementId\": null,\n    \"EngagementTitle\": \"Some New Project Name\",\n    \"ExistingMembers\": null,\n    \"ExpirationDate\": \"2024-11-21T07:00:00Z\",\n    \"Id\": \"engi-0000001abc3de\",\n    \"InvitationDate\": \"2024-11-14T19:41:29Z\",\n    \"InvitationMessage\": null,\n    \"Payload\": {\n        \"OpportunityInvitation\": {\n            \"Customer\": {\n                \"CompanyName\": \"CreateAWSCatalogWithOriginAwsReferral\",\n                \"CountryCode\": \"US\",\n                \"Industry\": \"Financial Services\",\n                \"WebsiteUrl\": \"www.CreateAWSCatalogWithOriginAwsReferral.test.com\"\n            },\n            \"Project\": {\n                \"BusinessProblem\": \"A very important problem goes here CreateAWSCatalogWithOriginAwsReferral\",\n                \"ExpectedCustomerSpend\": [\n                    {\n                        \"Amount\": \"12500\",\n                        \"CurrencyCode\": \"USD\",\n                        \"EstimationUrl\": null,\n                        \"Frequency\": \"Monthly\",\n                        \"TargetCompany\": \"AWS\"\n                    }\n                ],\n                \"TargetCompletionDate\": \"2029-10-05\",\n                \"Title\": \"Some New Project Name\"\n            },\n            \"ReceiverResponsibilities\": null,\n            \"SenderContacts\": [\n                {\n                    \"BusinessTitle\": \"PDM\",\n                    \"Email\": \"test@test.com\",\n                    \"FirstName\": \"TestFirstName\",\n                    \"LastName\": \"TestLastName\",\n                    \"Phone\": null\n                }\n            ]\n        }\n    },\n    \"PayloadType\": \"OpportunityInvitation\",\n    \"Receiver\": {\n        \"Account\": {\n            \"Alias\": \"PC API Canary Test Partner [DO NOT EDIT]\",\n            \"AwsAccountId\": \"111111111111\"\n        }\n    },\n    \"RejectionReason\": null,\n    \"SenderAwsAccountId\": \"aws\",\n    \"SenderCompanyName\": \"AWS\",\n    \"Status\": \"PENDING\"\n}"
						}
					]
				},
				{
					"name": "GetOpportunity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2ebf74cb-7977-4999-a5db-85d8c1bb2e31",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetOpportunity",
						"description": "[GetOpportunity](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)\n\nFetches the `Opportunity` record from Partner Central by a given `Identifier`.\n\nUse the `ListOpportunities` action or the event notification (from Amazon EventBridge) to obtain this identifier."
					},
					"response": [
						{
							"id": "3844f829-f269-4694-a714-67ed2802ea09",
							"name": "GetOpportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"AWS\",\n   \"Identifier\": \"O4932099\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://partnercentral-selling.us-east-1.api.aws/GetOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 14 Nov 2024 21:14:39 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "1787",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "081d259e-e6fb-4c69-b3ab-d881b3a89f23",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Arn\": null,\n    \"Catalog\": \"AWS\",\n    \"CreatedDate\": \"2024-11-14T19:32:03Z\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": null,\n                \"CountryCode\": \"LT\",\n                \"PostalCode\": \"45531\",\n                \"StateOrRegion\": null,\n                \"StreetAddress\": null\n            },\n            \"AwsAccountId\": null,\n            \"CompanyName\": \"TestCompanyName\",\n            \"Duns\": null,\n            \"Industry\": \"Non-Profit Organization\",\n            \"OtherIndustry\": null,\n            \"WebsiteUrl\": \"www.TestCompanyName.com\"\n        },\n        \"Contacts\": []\n    },\n    \"Id\": \"O1111111\",\n    \"LastModifiedDate\": \"2024-11-14T19:32:03Z\",\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": null,\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Approved\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Launched\",\n        \"TargetCloseDate\": \"2029-05-05\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": null,\n        \"CampaignName\": null,\n        \"Channels\": null,\n        \"Source\": \"None\",\n        \"UseCases\": null\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"OpportunityOwner\",\n            \"Email\": \"testEmail@test.com\",\n            \"FirstName\": \"API Test\",\n            \"LastName\": \"test\",\n            \"Phone\": null\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Competitive Information\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": null,\n        \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n        \"CustomerUseCase\": \"Database\",\n        \"DeliveryModels\": null,\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"531\",\n                \"CurrencyCode\": \"USD\",\n                \"EstimationUrl\": null,\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": null,\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Initialized discussions with customer\"\n        ],\n        \"Title\": \"TestAcessibleStatusApprovedStageLaunched\"\n    },\n    \"RelatedEntityIdentifiers\": {\n        \"AwsMarketplaceOffers\": [],\n        \"AwsProducts\": [],\n        \"Solutions\": []\n    },\n    \"SoftwareRevenue\": null\n}"
						}
					]
				},
				{
					"name": "GetResourceSnapshot",
					"id": "db05374c-811d-4678-9bda-349211ca694c",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"EngagementIdentifier\": \"eng-eyl04g6b3yz2t6\",\n   \"ResourceType\": \"Opportunity\",\n   \"ResourceIdentifier\": \"O1111111\",\n   \"ResourceSnapshotTemplateIdentifier\": \"Opportunity\",\n   \"Revision\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetResourceSnapshot",
						"description": "[GetResourceSnapshot](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetResourceSnapshot.html)\n\nUse this action to retrieve a specific snapshot record."
					},
					"response": [
						{
							"id": "2d65286a-104b-43af-9498-7c9e4d292707",
							"name": "GetResourceSnapshot",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"EngagementIdentifier\": \"eng-eyl04g6b3yz2t6\",\n   \"ResourceType\": \"Opportunity\",\n   \"ResourceIdentifier\": \"O4974569\",\n   \"ResourceSnapshotTemplateIdentifier\": \"Opportunity\",\n   \"Revision\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetResourceSnapshot"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 19:25:06 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "32",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "33066f80-b8f2-4aba-b370-e9aed7a748aa",
									"enabled": true
								},
								{
									"key": "x-amzn-ErrorType",
									"value": "ResourceNotFoundException:http://internal.amazon.com/coral/com.amazon.partnerintegrationapi.common/",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement/eng-eyl04g6b3yz2t6/resource/Opportunity/O1111111/template/Opportunity/snapshot/1\",\n\t\"Catalog\": \"AWS\",\n\t\"CreatedAt\": \"2024-11-12T23:13:01.656156539Z\",\n\t\"CreatedBy\": \"111111111111\",\n\t\"EngagementId\": \"eng-eyl04g6b3yz2t6\",\n\t\"Payload\": {\n\t\t\"OpportunitySummary\": {\n\t\t\t\"Customer\": {\n\t\t\t\t\"Account\": {\n\t\t\t\t\t\"Address\": {\n\t\t\t\t\t\t\"City\": \"Scottsdale\",\n\t\t\t\t\t\t\"CountryCode\": \"US\",\n\t\t\t\t\t\t\"PostalCode\": \"78027\",\n\t\t\t\t\t\t\"StateOrRegion\": \"Arizona\",\n\t\t\t\t\t\t\"StreetAddress\": \"111 Main St\"\n\t\t\t\t\t},\n\t\t\t\t\t\"AwsAccountId\": \"0333333333333\",\n\t\t\t\t\t\"CompanyName\": \"Company19\",\n\t\t\t\t\t\"Duns\": \"123123032\",\n\t\t\t\t\t\"Industry\": \"Financial Services\",\n\t\t\t\t\t\"OtherIndustry\": null,\n\t\t\t\t\t\"WebsiteUrl\": \"coarse-juggernaut.info\"\n\t\t\t\t},\n\t\t\t\t\"Contacts\": []\n\t\t\t},\n\t\t\t\"Lifecycle\": {\n\t\t\t\t\"NextSteps\": null,\n\t\t\t\t\"ReviewStatus\": \"Pending Submission\",\n\t\t\t\t\"Stage\": \"Prospect\",\n\t\t\t\t\"TargetCloseDate\": \"2025-10-11\"\n\t\t\t},\n\t\t\t\"OpportunityTeam\": [\n\t\t\t\t{\n\t\t\t\t\t\"BusinessTitle\": \"OpportunityOwner\",\n\t\t\t\t\t\"Email\": \"user-01@test.com\",\n\t\t\t\t\t\"FirstName\": \"API Test\",\n\t\t\t\t\t\"LastName\": \"test\",\n\t\t\t\t\t\"Phone\": null\n\t\t\t\t}\n\t\t\t],\n\t\t\t\"OpportunityType\": \"Net New Business\",\n\t\t\t\"PrimaryNeedsFromAws\": [\n\t\t\t\t\"Co-Sell - Architectural Validation\",\n\t\t\t\t\"Co-Sell - Pricing Assistance\"\n\t\t\t],\n\t\t\t\"Project\": {\n\t\t\t\t\"CustomerUseCase\": \"Security & Compliance\",\n\t\t\t\t\"DeliveryModels\": [\n\t\t\t\t\t\"SaaS or PaaS\"\n\t\t\t\t],\n\t\t\t\t\"ExpectedCustomerSpend\": [\n\t\t\t\t\t{\n\t\t\t\t\t\t\"Amount\": \"500\",\n\t\t\t\t\t\t\"CurrencyCode\": \"USD\",\n\t\t\t\t\t\t\"EstimationUrl\": null,\n\t\t\t\t\t\t\"Frequency\": \"Monthly\",\n\t\t\t\t\t\t\"TargetCompany\": \"AWS\"\n\t\t\t\t\t}\n\t\t\t\t],\n\t\t\t\t\"OtherSolutionDescription\": \"Other solution\",\n\t\t\t\t\"SalesActivities\": [\n\t\t\t\t\t\"Initialized discussions with customer\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"RelatedEntityIdentifiers\": {\n\t\t\t\t\"AwsMarketplaceOffers\": [],\n\t\t\t\t\"AwsProducts\": [],\n\t\t\t\t\"Solutions\": []\n\t\t\t}\n\t\t}\n\t},\n\t\"ResourceId\": \"O1111111\",\n\t\"ResourceSnapshotTemplateName\": \"Opportunity\",\n\t\"ResourceType\": \"Opportunity\",\n\t\"Revision\": 1\n}"
						}
					]
				},
				{
					"name": "GetResourceSnapshotJob",
					"id": "fa006033-ff83-4f36-8bac-d1c91480199b",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"ResourceSnapshotJobIdentifier\": \"job-ib7zo7tu7pau5\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetResourceSnapshotJob",
						"description": "[GetResourceSnapshotJob](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetResourceSnapshotJob.html)\n\nUse this action to retrieves information about a specific resource snapshot job."
					},
					"response": [
						{
							"id": "7770b614-a7f1-49f7-8d48-2f7e5888e9c4",
							"name": "GetResourceSnapshotJob",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"ResourceSnapshotJobIdentifier\": \"job-ib7zo7tu7pau5\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetResourceSnapshotJob"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 19:27:26 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "106",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "501da37d-35d2-48b9-a6b3-4fd6e476007e",
									"enabled": true
								},
								{
									"key": "x-amzn-ErrorType",
									"value": "ResourceNotFoundException:http://internal.amazon.com/coral/com.amazon.partnerintegrationapi.common/",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"Arn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/AWS/resource-snapshot-job/job-ib7zo7tu7pau5\",\n\t\"Catalog\": \"AWS\",\n\t\"CreatedDate\": \"2024-11-12T21:35:01.883901802Z\",\n\t\"EngagementIdentifier\": \"eng-eyl04g6b3yz2t6\",\n\t\"Id\": \"job-ib7zo7tu7pau5\",\n\t\"LastFailure\": null,\n\t\"LastSuccessfulExecution\": null,\n\t\"ResourceArn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/AWS/opportunity/O1111111\",\n\t\"ResourceId\": \"O1111111\",\n\t\"ResourceSnapshotTemplateName\": \"OpportunitySummaryView\",\n\t\"ResourceType\": \"Opportunity\",\n\t\"Status\": \"Stopped\"\n}"
						}
					]
				},
				{
					"name": "GetSellingSystemSettings",
					"id": "b75c7e67-0c02-473f-a601-0b12e4273f28",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetSellingSystemSettings",
						"description": "[GetSellingSystemSettings](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetSellingSystemSettings.html)\n\nRetrieves the currently set system settings, which include the IAM Role used for resource snapshot jobs."
					},
					"response": [
						{
							"id": "cd6b6603-c60e-4141-9418-463493edf15d",
							"name": "GetSellingSystemSettings",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetSellingSystemSettings"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 19:28:11 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "108",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "f9c57b76-e790-4047-83ab-df15435e6650",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Catalog\": \"AWS\",\n    \"ResourceSnapshotJobRoleArn\": \"arn:aws:iam::222222222222:role/PartnerAccountManagementRole\"\n}"
						}
					]
				},
				{
					"name": "ListEngagementByAcceptingInvitationTasks",
					"id": "281fb9df-163b-4d0d-92e2-295d350fe2b5",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"MaxResults\": 1\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListEngagementByAcceptingInvitationTasks",
						"description": "[ListEngagementByAcceptingInvitationTasks](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementByAcceptingInvitationTasks.html)\n\nLists all in-progress, completed, or failed StartEngagementByAcceptingInvitationTask tasks that were initiated by the caller's account."
					},
					"response": [
						{
							"id": "48b1a647-b88c-4568-82f4-c5dac436fc86",
							"name": "ListEngagementByAcceptingInvitationTasks",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"MaxResults\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagementByAcceptingInvitationTasks"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 19:29:27 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "37",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "a08f7f1d-1295-4253-8813-124a6d5404ae",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"NextToken\": \"AAMA-EFRSURBSGo0YlJJYTlweTJFUytBdnd3NnM3a05IZ25HM0g3RTBHMEpoVlFLQWdOdzB3SHV2djZQMnd1elA3KzE3dG80bUtvQkFBQUFmakI4QmdrcWhraUc5dzBCQndhZ2J6QnRBZ0VBTUdnR0NTcUdTSWIzRFFFSEFUQWVCZ2xnaGtnQlpRTUVBUzR3RVFRTVhWOTVKTTJSL0pwMmFhNjNBZ0VRZ0R1Y2VpcUtwVVVJK0VrUXBBe=\",\n\t\"TaskSummaries\": [\n\t\t{\n\t\t\t\"EngagementInvitationId\": \"engi-zays71kb20svf\",\n\t\t\t\"Message\": null,\n\t\t\t\"OpportunityId\": \"O1111111\",\n\t\t\t\"ReasonCode\": \"null\",\n\t\t\t\"ResourceSnapshotJobId\": \"job-fehio3wzyl9q8\",\n\t\t\t\"StartTime\": \"2024-11-08T16:58:19.739320515Z\",\n\t\t\t\"TaskArn\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement-by-accepting-invitation-task/task-thqoe8sf0cnfx\",\n\t\t\t\"TaskId\": \"task-thqoe8sf0cnfx\",\n\t\t\t\"TaskStatus\": \"COMPLETE\"\n\t\t}\n\t]\n}"
						}
					]
				},
				{
					"name": "ListEngagementFromOpportunityTasks",
					"id": "402e809f-dbe3-4493-85e0-364604f8aef1",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"MaxResults\": 10\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListEngagementFromOpportunityTasks",
						"description": "[ListEngagementFromOpportunityTasks](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementFromOpportunityTasks.html)\n\nLists all in-progress, completed, or failed `EngagementFromOpportunity` tasks that were initiated by the caller's account."
					},
					"response": [
						{
							"id": "f1f935c1-bc18-4547-b3d1-84e44bad1cee",
							"name": "ListEngagementFromOpportunityTasks",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"MaxResults\": 10\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagementFromOpportunityTasks"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 19:30:28 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "37",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "012df8fb-b0b7-442f-bd80-ecec468f4924",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"NextToken\": null,\n\t\"TaskSummaries\": [\n\t\t{\n\t\t\t\"EngagementId\": \"eng-hdbyiqohxd0afw\",\n\t\t\t\"EngagementInvitationId\": \"engi-39tkbefdi4z4g\",\n\t\t\t\"Message\": null,\n\t\t\t\"OpportunityId\": \"O1111111\",\n\t\t\t\"ReasonCode\": \"null\",\n\t\t\t\"ResourceSnapshotJobId\": \"job-o0hekgjo3b2pb\",\n\t\t\t\"StartTime\": \"2024-11-08T17:57:04.774925483Z\",\n\t\t\t\"TaskArn\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement-from-opportunity-task/task-v0gc1xnl3uhx7\",\n\t\t\t\"TaskId\": \"task-v0gc1xnl3uhx7\",\n\t\t\t\"TaskStatus\": \"COMPLETE\"\n\t\t}\n\t]\n}"
						}
					]
				},
				{
					"name": "ListEngagementInvitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71531857-ca03-45c3-8739-7a7593585860",
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e7362e5-c729-4346-8307-61e370d79817",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0bb219c0-4956-4a51-b39a-14c454174564",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"MaxResults\": 20,\n    \"NextToken\": null,\n    \"ParticipantType\": \"RECEIVER\",\n    \"PayloadType\": [\n        \"OpportunityInvitation\"\n    ],\n    \"Sort\": {\n        \"SortBy\": \"InvitationDate\",\n        \"SortOrder\": \"DESCENDING\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListEngagementInvitations",
						"description": "[ListEngagementInvitations](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html)\n\nRetrieves a list of engagement invitations sent to the partner. This allows partners to view all pending or past engagement invitations, helping them track opportunities shared by AWS"
					},
					"response": [
						{
							"id": "a05b76e9-29a7-4ca9-8c2d-b204c205e7ce",
							"name": "ListEngagementInvitations",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"MaxResults\": 2,\n\t\"Catalog\": \"Sandbox\",\n\t\"ParticipantType\": \"RECEIVER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://partnercentral-selling.us-east-1.api.aws/ListEngagementInvitations"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 14 Nov 2024 23:58:47 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "1520",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "e8f291c0-5400-4418-bacf-c7270dcd5afd",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"EngagementInvitationSummaries\": [\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement-invitation/engi-0000001abc3de\",\n            \"Catalog\": \"AWS\",\n            \"EngagementId\": null,\n            \"EngagementTitle\": \"Some New Project Name\",\n            \"ExpirationDate\": \"2024-11-21T07:00:00Z\",\n            \"Id\": \"engi-0000001abc3de\",\n            \"InvitationDate\": \"2024-11-14T19:41:29Z\",\n            \"PayloadType\": \"OpportunityInvitation\",\n            \"Receiver\": {\n                \"Account\": {\n                    \"Alias\": \"PC API Canary Test Partner [DO NOT EDIT]\",\n                    \"AwsAccountId\": \"111111111111\"\n                }\n            },\n            \"SenderAwsAccountId\": \"aws\",\n            \"SenderCompanyName\": \"AWS\",\n            \"Status\": \"PENDING\"\n        },\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement-invitation/engi-0000001abc4de\",\n            \"Catalog\": \"AWS\",\n            \"EngagementId\": null,\n            \"EngagementTitle\": \"Some New Project Name\",\n            \"ExpirationDate\": \"2024-11-21T07:00:00Z\",\n            \"Id\": \"engi-0000001abc4de\",\n            \"InvitationDate\": \"2024-11-14T18:39:15Z\",\n            \"PayloadType\": \"OpportunityInvitation\",\n            \"Receiver\": {\n                \"Account\": {\n                    \"Alias\": \"PC API Canary Test Partner [DO NOT EDIT]\",\n                    \"AwsAccountId\": \"111111111111\"\n                }\n            },\n            \"SenderAwsAccountId\": \"aws\",\n            \"SenderCompanyName\": \"AWS\",\n            \"Status\": \"PENDING\"\n        }\n    ],\n    \"NextToken\": \"AAMA-EFRSURBSGd3UFpqL0JaWWd5TFQ2RHRwRTc1QmVLMmw2SGhxQ3-testToken\"\n}"
						}
					]
				},
				{
					"name": "ListEngagementMembers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71531857-ca03-45c3-8739-7a7593585860",
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e7362e5-c729-4346-8307-61e370d79817",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "012862ba-d996-4fd4-8f41-96f05b9be746",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"MaxResults\": 2,\n    \"Identifier\": \"eng-ktsuz9kfow9cv5\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListEngagementMembers",
						"description": "[ListEngagementMembers](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementMembers.html)\n\nRetrieves the details of member partners in an Engagement. This operation can only be invoked by members of the Engagement. The `ListEngagementMembers` operation allows you to fetch information about the members of a specific Engagement. This action is restricted to members of the Engagement being queried."
					},
					"response": [
						{
							"id": "d9fe482c-2bf1-4e09-afad-b8d06b78d7be",
							"name": "ListEngagementMembers",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"MaxResults\": 2,\n    \"Identifier\": \"eng-ktsuz9kfow9cv5\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagementMembers"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 16:43:00 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "150",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "62edb9a6-587c-4a1c-aaa0-b85dfbe29d31",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"EngagementMemberList\": [\n        {\n            \"AccountId\": \"22222222222\",\n            \"CompanyName\": \"An AWS Partner Company\",\n            \"WebsiteUrl\": \"http://www.test.com/\"\n        }\n    ],\n    \"NextToken\": null\n}"
						}
					]
				},
				{
					"name": "ListEngagementResourceAssociations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71531857-ca03-45c3-8739-7a7593585860",
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e7362e5-c729-4346-8307-61e370d79817",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c8535589-aa36-40e4-b4a9-55f5e72550b2",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"ResourceType\": \"Opportunity\",\n\t\"ResourceIdentifier\": \"O1111111\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListEngagementResourceAssociations",
						"description": "[ListEngagementResourceAssociations](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementResourceAssociations.html)\n\nLists the associations between resources and engagements where the caller is a member and has at least one snapshot in the engagement."
					},
					"response": [
						{
							"id": "df521f0f-9834-47ac-bca6-d43f139015e8",
							"name": "ListEngagementResourceAssociations",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"ResourceType\": \"Opportunity\",\n\t\"ResourceIdentifier\": \"O1111111\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagementResourceAssociations"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 19:31:20 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "62",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "05ef3578-c2f8-4618-9776-f0e3c95e9066",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"EngagementResourceAssociationSummaries\": [\n\t\t{\n\t\t\t\"Catalog\": \"AWS\",\n\t\t\t\"EngagementId\": \"eng-6wq6i74hsqbiwm\",\n\t\t\t\"ResourceArn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/AWS/opportunity/O1111111\",\n\t\t\t\"ResourceId\": \"O1111111\",\n\t\t\t\"ResourceOwner\": \"111111111111\",\n\t\t\t\"ResourceType\": \"Opportunity\"\n\t\t}\n\t],\n\t\"NextToken\": null\n}"
						}
					]
				},
				{
					"name": "ListEngagements",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71531857-ca03-45c3-8739-7a7593585860",
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e7362e5-c729-4346-8307-61e370d79817",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "042fae66-3488-4f3c-a3df-a6771543ff52",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"MaxResults\": 2,\n\t\"Sort\": {\n\t\t\"SortBy\": \"CreatedDate\",\n\t\t\"SortOrder\": \"DESCENDING\"\n\t}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListEngagements",
						"description": "[ListEngagements](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagements.html)\n\nThis action allows users to retrieve a list of Engagement records from Partner Central. This action can be used to manage and track various engagements across different stages of the partner selling process."
					},
					"response": [
						{
							"id": "4f4ab230-024d-43ef-819e-f3d0385b2f88",
							"name": "ListEngagements",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"MaxResults\": 2,\n\t\"Sort\": {\n\t\t\"SortBy\": \"CreatedDate\",\n\t\t\"SortOrder\": \"DESCENDING\"\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagements"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 16:40:10 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "1122",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "941abb68-d33c-4297-a76f-3168ff40676b",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"EngagementSummaryList\": [\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement/eng-ktsuz9kfow9cv5\",\n            \"CreatedAt\": \"2025-01-15T16:34:26.04Z\",\n            \"CreatedBy\": \"222222222222\",\n            \"Id\": \"eng-ktsuz9kfow9cv5\",\n            \"MemberCount\": 1,\n            \"Title\": \"Test Engagement16\"\n        },\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement/eng-s178ims3pxiprb\",\n            \"CreatedAt\": \"2025-01-11T00:04:00.84Z\",\n            \"CreatedBy\": \"aws\",\n            \"Id\": \"eng-s178ims3pxiprb\",\n            \"MemberCount\": 2,\n            \"Title\": \"New Business Deal - 9151\"\n        }\n    ],\n    \"NextToken\": \"AAMA-EFRSURBSGo0YlJJYTlweTJFUytBdnd3NnM3a05IZ25HM0g3RTBHMEpoVlFLQWdOdzB3R1JPZDhZV0J2S1BoV0tnN1dpcGQyOUFBQUFmakI4QmdrcWhraUc5dzBCQndhZ2J6QnRBZ0VBTUdnR0NTcUdTSWIzRFFFSEFUQWVCZ2xnaGtnQlpRTUVBUzR3RVFRTXFwcjAyZHFQdnJKRmxJNW5BZ0VRZ0R0RW1hR1NwNUIxZHdEMjZNMzAyMUZsTTVQMDFs==\"\n}"
						}
					]
				},
				{
					"name": "ListOpportunities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9154c78-a3e6-41a0-a5a7-2d409df018ce",
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "368b59f2-0081-4886-ba7c-819201c5af53",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "adc578a9-8fa5-446a-afa9-729835e403a2",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "X-Amzn-User-Agent",
								"value": "{{companyName}}|PostmanCollection|{{crm}}|v1",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"CustomerCompanyName\": [],\n   \"Identifier\": [],\n   \"LastModifiedDate\": { \n      \"AfterLastModifiedDate\": null,\n      \"BeforeLastModifiedDate\": null\n   },\n   \"LifeCycleReviewStatus\": [],\n   \"LifeCycleStage\": [],\n   \"MaxResults\": 20,\n   \"NextToken\": null,\n   \"Sort\": { \n      \"SortBy\": \"LastModifiedDate\",\n      \"SortOrder\": \"DESCENDING\"\n   }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListOpportunities",
						"description": "This request accepts a list of filters that retrieve opportunity subsets as well as sort options. This feature is available to partners from [Partner Central](https://partnercentral.awspartner.com/) using the [ListOpportunities](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListOpportunities.html) API action.\n\nTo synchronize your system with AWS, only list the opportunities that were newly created or updated. We recommend you rely on events emitted by the service into your AWS account’s Amazon EventBridge default event bus, you can also use the `ListOpportunities` action.\n\nWe recommend the following approach:\n\n1. Find the latest `LastModifiedDate` that you stored, and only use the values that came from AWS. Don’t use values generated by your system.\n    \n2. When you send a `ListOpportunities` request, submit the date in ISO 8601 format in the `AfterLastModifiedDate` filter.\n    \n3. AWS only returns opportunities created or updated on or after that date and time. Use `NextToken` to iterate over all pages."
					},
					"response": [
						{
							"id": "6d425636-c19c-488e-b30c-f597e3472e07",
							"name": "ListOpportunities",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Catalog\": \"AWS\",\n\t\"LifeCycleReviewStatus\": [ \"Approved\" ],\n    \"LifeCycleStage\": [ \"Launched\" ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://partnercentral-selling.us-east-1.api.aws/ListOpportunities"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 14 Nov 2024 21:11:26 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "873",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "94ead1e5-28e9-444c-b8c8-6d1123ee29e5",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"NextToken\": null,\n    \"OpportunitySummaries\": [\n        {\n            \"Arn\": null,\n            \"Catalog\": \"AWS\",\n            \"CreatedDate\": \"2024-11-14T19:32:03Z\",\n            \"Customer\": {\n                \"Account\": {\n                    \"Address\": {\n                        \"City\": null,\n                        \"CountryCode\": \"LT\",\n                        \"PostalCode\": \"11111\",\n                        \"StateOrRegion\": null\n                    },\n                    \"CompanyName\": \"TestAcessibleStatusApprovedStageLaunched\",\n                    \"Industry\": \"Non-Profit Organization\",\n                    \"OtherIndustry\": null,\n                    \"WebsiteUrl\": \"www.TestAcessibleStatusApprovedStageLaunched.com\"\n                }\n            },\n            \"Id\": \"O1111111\",\n            \"LastModifiedDate\": \"2024-11-14T19:32:03Z\",\n            \"LifeCycle\": {\n                \"ClosedLostReason\": null,\n                \"NextSteps\": null,\n                \"ReviewComments\": null,\n                \"ReviewStatus\": \"Approved\",\n                \"ReviewStatusReason\": null,\n                \"Stage\": \"Launched\",\n                \"TargetCloseDate\": \"2029-05-05\"\n            },\n            \"OpportunityType\": \"Net New Business\",\n            \"PartnerOpportunityIdentifier\": null,\n            \"Project\": {\n                \"DeliveryModels\": null,\n                \"ExpectedCustomerSpend\": [\n                    {\n                        \"Amount\": \"531.0\",\n                        \"CurrencyCode\": \"USD\",\n                        \"EstimationUrl\": null,\n                        \"Frequency\": \"Monthly\",\n                        \"TargetCompany\": \"AWS\"\n                    }\n                ]\n            }\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "ListResourceSnapshotJobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9154c78-a3e6-41a0-a5a7-2d409df018ce",
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "368b59f2-0081-4886-ba7c-819201c5af53",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "239b59cc-bf32-4a83-aec1-5e0f0ef813db",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "X-Amzn-User-Agent",
								"value": "{{companyName}}|PostmanCollection|{{crm}}|v1",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"EngagementIdentifier\": \"eng-df1ehxdgdi23nr\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListResourceSnapshotJobs",
						"description": "[ListResourceSnapshotJobs](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListResourceSnapshotJobs.html)\n\nLists resource snapshot jobs owned by the customer. This operation supports various filtering scenarios, including listing all jobs owned by the caller, jobs for a specific engagement, jobs with a specific status, or any combination of these filters."
					},
					"response": [
						{
							"id": "d71d604c-930e-4614-97e2-b064109e8839",
							"name": "ListResourceSnapshotJobs",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "X-Amzn-User-Agent",
										"value": "{{companyName}}|PostmanCollection|{{crm}}|v1",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"EngagementIdentifier\": \"eng-df1ehxdgdi23nr\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListResourceSnapshotJobs"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 19:20:07 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "52",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "43fd5e80-c67f-430c-b2cd-5e1a6e3471c4",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n\t\"NextToken\": null,\n\t\"ResourceSnapshotJobSummaries\": [\n\t\t{\n\t\t\t\"Arn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/AWS/resource-snapshot-job/job-240u7np9yersf\",\n\t\t\t\"EngagementId\": \"eng-df1ehxdgdi23nr\",\n\t\t\t\"Id\": \"job-240u7np9yersf\",\n\t\t\t\"Status\": \"Running\"\n\t\t},\n\t\t{\n\t\t\t\"Arn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/AWS/resource-snapshot-job/job-cp1r2aw1iabav\",\n\t\t\t\"EngagementId\": \"eng-df1ehxdgdi23nr\",\n\t\t\t\"Id\": \"job-cp1r2aw1iabav\",\n\t\t\t\"Status\": \"Running\"\n\t\t},\n\t\t{\n\t\t\t\"Arn\": \"arn:aws:partnercentral:us-east-1:116669848322:catalog/AWS/resource-snapshot-job/job-xqcnj82yf4t7o\",\n\t\t\t\"EngagementId\": \"eng-df1ehxdgdi23nr\",\n\t\t\t\"Id\": \"job-xqcnj82yf4t7o\",\n\t\t\t\"Status\": \"Running\"\n\t\t},\n\t\t{\n\t\t\t\"Arn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/AWS/resource-snapshot-job/job-rmdunk6j6fe6u\",\n\t\t\t\"EngagementId\": \"eng-df1ehxdgdi23nr\",\n\t\t\t\"Id\": \"job-rmdunk6j6fe6u\",\n\t\t\t\"Status\": \"Running\"\n\t\t}\n\t]\n}"
						}
					]
				},
				{
					"name": "ListResourceSnapshots",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9154c78-a3e6-41a0-a5a7-2d409df018ce",
								"exec": [
									"if (pm.response.code === 200) {",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "368b59f2-0081-4886-ba7c-819201c5af53",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d5be61e4-039f-4201-b94c-8d66b2889a55",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							},
							{
								"key": "X-Amzn-User-Agent",
								"value": "{{companyName}}|PostmanCollection|{{crm}}|v1",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"EngagementIdentifier\": \"eng-eyl04g6b3yz2t6\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListResourceSnapshots",
						"description": "[ListResourceSnapshots](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListResourceSnapshots.html)\n\nRetrieves a list of resource view snapshots based on specified criteria. This operation supports various use cases, including:\n\n- Fetching all snapshots associated with an engagement.\n    \n- Retrieving snapshots of a specific resource type within an engagement.\n    \n- Obtaining snapshots for a particular resource using a specified template.\n    \n- Accessing the latest snapshot of a resource within an engagement.\n    \n- Filtering snapshots by resource owner."
					},
					"response": [
						{
							"id": "b84a076b-3e20-4782-904c-0dc5935ef241",
							"name": "ListResourceSnapshots",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "X-Amzn-User-Agent",
										"value": "{{companyName}}|PostmanCollection|{{crm}}|v1",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"EngagementIdentifier\": \"eng-loy2dvfk0s0tq7\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListResourceSnapshots"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 19:19:07 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "356",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "b50cc492-f70f-490c-ab72-5089bd3bdc20",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"NextToken\": null,\n    \"ResourceSnapshotSummaries\": [\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement/eng-loy2dvfk0s0tq7/resource/Opportunity/O1111111/template/OpportunitySummaryView/snapshot/1\",\n            \"CreatedBy\": \"111111111111\",\n            \"ResourceId\": \"O1111111\",\n            \"ResourceSnapshotTemplateName\": \"OpportunitySummaryView\",\n            \"ResourceType\": \"Opportunity\",\n            \"Revision\": 1\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "ListSolutions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87a027e4-642f-4274-aa0b-1625159a8900",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3b7f3437-4349-4fa0-ab92-6d536ca171ca",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "b6882c56-915c-4271-8288-24ba86beaba4",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Category\": [],\n   \"Identifier\": [],\n   \"MaxResults\": 5,\n   \"NextToken\": null,\n   \"Sort\": { \n      \"SortBy\": \"CreatedDate\",\n      \"SortOrder\": \"DESCENDING\"\n   },\n   \"Status\": [ \"Active\" ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListSolutions",
						"description": "[ListSolutions](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListSolutions.html)\n\nRetrieves a list of Partner Solutions that the partner registered on Partner Central. This API is used to generate a list of solutions that an end user selects from for association with an opportunity."
					},
					"response": [
						{
							"id": "d11aacd6-c363-48d5-a008-82373fe1a50d",
							"name": "ListSolutions",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Catalog\" : \"Sandbox\",\n\t\"MaxResults\": 5\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://partnercentral-selling.us-east-1.api.aws/ListSolutions"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 14 Nov 2024 21:34:08 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "1311",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "e6d26180-6516-4134-955d-2596acb18af1",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"NextToken\": \"AAMA-EFRSURBSGd3UFpqL0JaWWd5TFQ2RHRwR-testToken\",\n    \"SolutionSummaries\": [\n        {\n            \"Arn\": null,\n            \"Catalog\": \"AWS\",\n            \"Category\": \"Software Product\",\n            \"CreatedDate\": \"2024-08-02T19:27:57Z\",\n            \"Id\": \"S-0000000\",\n            \"Name\": \"TestSolution11hrash\",\n            \"Status\": \"Active\"\n        },\n        {\n            \"Arn\": null,\n            \"Catalog\": \"AWS\",\n            \"Category\": null,\n            \"CreatedDate\": \"2024-08-02T19:27:57Z\",\n            \"Id\": \"S-0000001\",\n            \"Name\": \"TestSolutionInactive2\",\n            \"Status\": \"Inactive\"\n        },\n        {\n            \"Arn\": null,\n            \"Catalog\": \"AWS\",\n            \"Category\": \"Software Product\",\n            \"CreatedDate\": \"2024-08-02T19:27:57Z\",\n            \"Id\": \"S-0000002\",\n            \"Name\": \"TestSolutionInactive2\",\n            \"Status\": \"Inactive\"\n        },\n        {\n            \"Arn\": null,\n            \"Catalog\": \"AWS\",\n            \"Category\": \"Software Product\",\n            \"CreatedDate\": \"2024-08-02T19:27:57Z\",\n            \"Id\": \"S-0000003\",\n            \"Name\": \"TestSolutionInactive1\",\n            \"Status\": \"Inactive\"\n        },\n        {\n            \"Arn\": null,\n            \"Catalog\": \"AWS\",\n            \"Category\": \"Software Product\",\n            \"CreatedDate\": \"2024-08-02T19:27:57Z\",\n            \"Id\": \"S-0000004\",\n            \"Name\": \"TestSolution23\",\n            \"Status\": \"Active\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "ListTagsForResource",
					"id": "2f4cf2ef-3353-4dd0-bdee-1a065a79bb1a",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ResourceArn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/AWS/resource-snapshot-job/job-48pmtsnpc6733\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListTagsForResource",
						"description": "[ListTagsForResource](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListTagsForResource.html)\n\nReturns a list of tags for a resource."
					},
					"response": [
						{
							"id": "246a6671-da99-45aa-be35-7a366b875b78",
							"name": "ListTagsForResource",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ResourceArn\": \"arn:aws:partnercentral:us-east-1:116669848322:catalog/AWS/resource-snapshot-job/job-48pmtsnpc6733\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListTagsForResource"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 05:18:57 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "235",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "a40b9d48-f1c9-4c07-bb08-3ef765133a0e",
									"enabled": true
								},
								{
									"key": "x-amzn-ErrorType",
									"value": "AccessDeniedException:http://internal.amazon.com/coral/com.amazon.partnerintegrationapi.common/",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Tags\": [\n        {\n            \"Key\": \"Environment1\",\n            \"Value\": \"Production\"\n        },\n        {\n            \"Key\": \"CostCenter1\",\n            \"Value\": \"123\"\n        },\n        {\n            \"Key\": \"Project1\",\n            \"Value\": \"Alpha\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "PutSellingSystemSettings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87a027e4-642f-4274-aa0b-1625159a8900",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3b7f3437-4349-4fa0-ab92-6d536ca171ca",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0196aed2-d86c-4104-974b-37f809534637",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"ResourceSnapshotJobRoleIdentifier\": \"arn:aws:iam::111111111111:role/PartnerAccountManagementRole\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/PutSellingSystemSettings",
						"description": "[PutSellingSystemSettings](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_PutSellingSystemSettings.html)\n\nUpdates the currently set system settings, which include the IAM Role used for resource snapshot jobs."
					},
					"response": [
						{
							"id": "197f19bf-d453-4654-a5da-c0c013373ada",
							"name": "PutSellingSystemSettings",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"ResourceSnapshotJobRoleIdentifier\": \"arn:aws:iam::277707133693:role/PartnerAccountManagementRole\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/PutSellingSystemSettings"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 18:52:29 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "108",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "ec0228cc-ebb2-424f-81ab-e2bd557734b2",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Catalog\": \"AWS\",\n    \"ResourceSnapshotJobRoleArn\": \"arn:aws:iam::111111111111:role/PartnerAccountManagementRole\"\n}"
						}
					]
				},
				{
					"name": "RejectEngagementInvitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b308b41-520e-4f1c-ba63-4789e27261f7",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dfcf769e-a246-4d0a-8cf3-8644c51cb7ef",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement-invitation/engi-0000001abc3de\",\n   \"RejectionReason\": \"Next steps unclear\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/RejectEngagementInvitation",
						"description": "[RejectEngagementInvitation](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_RejectEngagementInvitation.html)\n\nThis action rejects an `EngagementInvitation` that AWS shared. Rejecting an invitation indicates that the partner doesn't want to pursue the opportunity, and all related data will become inaccessible thereafter."
					},
					"response": [
						{
							"id": "b9fc9d67-79f7-4405-aa3e-d61c9be34b98",
							"name": "RejectEngagementInvitation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"Sandbox\",\n   \"Identifier\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-invitation/engi-0000002itk3ga\",\n   \"RejectionReason\": \"Next steps unclear\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://partnercentral-selling.us-east-1.api.aws/RejectEngagementInvitation"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 14 Nov 2024 23:59:47 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "0",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "7ee331ca-fa0f-4cf3-8275-2ee9c0c5350e",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": ""
						}
					]
				},
				{
					"name": "StartEngagementByAcceptingInvitationTask",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c01f7012-5f8b-4a79-8784-06bef4ab9e73",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "399ece88-a24d-4d55-a30b-cf267f4009d1",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1d883497-16ef-48a2-aeb2-c63cbf16af4e",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"Catalog\": \"{{catalog}}\",\n\t\"Identifier\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement-invitation/engi-0000001abc3de\",\n\t\"ClientToken\": \"{{$guid}}\",\n    \"Tags\": [\n\t\t{\n\t\t\t\"Key\" : \"Environment\",\n\t\t\t\"Value\": \"Production\"\n\t\t},\n\t\t{\n\t\t\t\"Key\" : \"Project\",\n\t\t\t\"Value\": \"Alpha\"\n\t\t},\n\t\t{\n\t\t\t\"Key\" : \"CostCenter\",\n\t\t\t\"Value\": \"123\"\n\t\t}\t\t\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/StartEngagementByAcceptingInvitationTask",
						"description": "[StartEngagementByAcceptingInvitationTask](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_StartEngagementByAcceptingInvitationTask.html)\n\nThis action starts the engagement by accepting an `EngagementInvitation`. The task is asynchronous and involves the following steps: accepting the invitation, creating an opportunity in the partner’s account from the AWS opportunity, and copying details for tracking. When completed, an `Opportunity Created` event is generated, indicating that the opportunity has been successfully created in the partner's account."
					},
					"response": [
						{
							"id": "bb48ce8f-64d5-440d-92a4-7ed90934153e",
							"name": "StartEngagementByAcceptingInvitationTask",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Catalog\": \"Sandbox\",\n\t\"Identifier\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-invitation/engi-0000002itk2ga\",\n\t\"ClientToken\": \"test-annjqwe\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://partnercentral-selling.us-east-1.api.aws/StartEngagementByAcceptingInvitationTask"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 15 Nov 2024 00:00:25 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "296",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "6c102e43-0af4-40e0-aaff-7c5835216a77",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"EngagementInvitationId\": \"arn:aws:partnercentral:us-east-1::catalog/AWS/engagement-invitation/engi-0000001abc3de\",\n    \"Message\": null,\n    \"OpportunityId\": \"O1111111\",\n    \"ReasonCode\": null,\n    \"ResourceSnapshotJobId\": null,\n    \"StartTime\": \"2024-11-15T00:00:25Z\",\n    \"TaskArn\": null,\n    \"TaskId\": null,\n    \"TaskStatus\": \"COMPLETE\"\n}"
						}
					]
				},
				{
					"name": "StartEngagementFromOpportunityTask",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14c5819c-a522-40ee-8dcb-cc6399a01081",
								"exec": [
									"try {",
									"    // Parse the response JSON",
									"    const response = pm.response.json();",
									"",
									"    // Extract response attributes",
									"    const opportunityId = response.OpportunityId || \"Unknown Opportunity\";",
									"    const taskDetails = {",
									"        TaskId: response.TaskId || \"N/A\",",
									"        TaskArn: response.TaskArn || \"N/A\",",
									"        TaskStatus: response.TaskStatus || \"N/A\"",
									"    };",
									"",
									"    // Log the action execution and task details",
									"    console.log(",
									"        `[Post-res ${pm.info.requestName}] ${pm.info.requestName} executed. Started engagement on ${opportunityId}. Task details: TaskId=${taskDetails.TaskId}, TaskArn=${taskDetails.TaskArn}, TaskStatus=${taskDetails.TaskStatus}.`",
									"    );",
									"} catch (error) {",
									"    // Handle errors during response parsing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "551533ea-a8c5-44b8-a9c3-046e04ebf90f",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "21b53899-2807-41c5-acd5-03de97546149",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"AwsSubmission\": {\n        \"InvolvementType\": \"Co-Sell\",\n        \"Visibility\": \"Full\"\n    },\n    \"Catalog\": \"{{catalog}}\",\n    \"ClientToken\": \"{{$guid}}\",\n    \"Identifier\": \"O1111111\",\n    \"Tags\": [\n\t\t{\n\t\t\t\"Key\" : \"Environment\",\n\t\t\t\"Value\": \"Production\"\n\t\t},\n\t\t{\n\t\t\t\"Key\" : \"Project\",\n\t\t\t\"Value\": \"Alpha\"\n\t\t},\n\t\t{\n\t\t\t\"Key\" : \"CostCenter\",\n\t\t\t\"Value\": \"123\"\n\t\t}\t\t\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/StartEngagementFromOpportunityTask",
						"description": "[StartEngagementFromOpportunityTask](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_StartEngagementFromOpportunityTask.html)\n\nThis action initiates the engagement process from an existing opportunity by accepting the engagement invitation and creating a corresponding opportunity in the partner’s system. Similar to `StartEngagementByAcceptingInvitationTask`, this action is asynchronous and performs multiple steps before completion."
					},
					"response": [
						{
							"id": "6e9d4102-4b9f-4455-b33f-2a9df4637be9",
							"name": "StartEngagementFromOpportunityTask",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Catalog\": \"Sandbox\",\n\t\"Identifier\": \"O4237356\",\n\t\"ClientToken\": \"test-annjq11we\",\n\t\"AwsSubmission\": { \n      \"InvolvementType\": \"Co-Sell\",\n      \"Visibility\": \"Full\"\n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://partnercentral-selling.us-east-1.api.aws/StartEngagementFromOpportunityTask"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Thu, 14 Nov 2024 23:51:43 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "244",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "114c2007-8850-4b12-bd0b-dad94ddff01b",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"EngagementId\": null,\n    \"EngagementInvitationId\": \"engi-0000001abc3de\",\n    \"Message\": null,\n    \"OpportunityId\": \"O1111111\",\n    \"ReasonCode\": null,\n    \"ResourceSnapshotJobId\": null,\n    \"StartTime\": \"2024-11-14T23:51:43Z\",\n    \"TaskArn\": null,\n    \"TaskId\": null,\n    \"TaskStatus\": \"COMPLETE\"\n}"
						}
					]
				},
				{
					"name": "StartResourceSnapshotJob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c01f7012-5f8b-4a79-8784-06bef4ab9e73",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "399ece88-a24d-4d55-a30b-cf267f4009d1",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "56d36bf9-3991-42ce-9e7c-005430cdb51e",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"Catalog\": \"{{catalog}}\",\n\t\"ResourceSnapshotJobIdentifier\": \"job-ib7zo7tu7pau5\",\n\t\"ClientToken\": \"{{$guid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/StartResourceSnapshotJob",
						"description": "[StartResourceSnapshotJob](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_StartResourceSnapshotJob.html)\n\nStarts a resource snapshot job that has been previously created."
					},
					"response": [
						{
							"id": "4a287e1b-ca4c-4482-86fe-2f0f6114af88",
							"name": "StartResourceSnapshotJob",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Catalog\": \"{{catalog}}\",\n\t\"ResourceSnapshotJobIdentifier\": \"job-ib7zo7tu7pau5\",\n\t\"ClientToken\": \"{{clientToken}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/StartResourceSnapshotJob"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 19:33:15 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "106",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "d6bcb249-dae1-4947-9054-012c99cc2522",
									"enabled": true
								},
								{
									"key": "x-amzn-ErrorType",
									"value": "ResourceNotFoundException:http://internal.amazon.com/coral/com.amazon.partnerintegrationapi.common/",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "StopResourceSnapshotJob",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c01f7012-5f8b-4a79-8784-06bef4ab9e73",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "399ece88-a24d-4d55-a30b-cf267f4009d1",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7c9090ef-ff3a-4aff-b699-595b575c6229",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"Catalog\": \"{{catalog}}\",\n\t\"ResourceSnapshotJobIdentifier\": \"job-ib7zo7tu7pau5\",\n\t\"ClientToken\": \"{{$guid}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/StopResourceSnapshotJob",
						"description": "[StopResourceSnapshotJob](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_StopResourceSnapshotJob.html)\n\nStops a resource snapshot job. The job must be started prior to being stopped."
					},
					"response": [
						{
							"id": "433ae4b7-8b35-47a6-8cf4-91902e97e1af",
							"name": "StopResourceSnapshotJob",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Catalog\": \"{{catalog}}\",\n\t\"ResourceSnapshotJobIdentifier\": \"job-ib7zo7tu7pau5\",\n\t\"ClientToken\": \"{{clientToken}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/StopResourceSnapshotJob"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 15 Jan 2025 19:34:17 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "106",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "d43332cf-2971-4463-b1ba-313b98a6d229",
									"enabled": true
								},
								{
									"key": "x-amzn-ErrorType",
									"value": "ResourceNotFoundException:http://internal.amazon.com/coral/com.amazon.partnerintegrationapi.common/",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "SubmitOpportunity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c01f7012-5f8b-4a79-8784-06bef4ab9e73",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "399ece88-a24d-4d55-a30b-cf267f4009d1",
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0f8e70d7-a844-4cc6-903a-805fff999cbe",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"Catalog\": \"{{catalog}}\",\n\t\"ClientToken\": \"{{$guid}}\",\n    \"Identifier\" : \"{{opportunityId}}\",\n    \"InvolvementType\": \"Co-Sell\",\n    \"Visibility\": \"Full\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/SubmitOpportunity",
						"description": "[SubmitOpportunity](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_SubmitOpportunity.html)\n\nUse this action to submit an Opportunity that was previously created by partner for AWS review. After you perform this action, the Opportunity becomes non-editable until it is reviewed by AWS and has `L`"
					},
					"response": [
						{
							"id": "3114185f-21b9-4b19-9f80-8490f0597d4c",
							"name": "SubmitOpportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Catalog\": \"{{catalog}}\",\n\t\"ClientToken\": \"{{clientToken}}\",\n    \"Identifier\" : \"{{opportunityId}}\",\n    \"InvolvementType\": \"Co-Sell\",\n    \"Visibility\": \"Full\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/SubmitOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 05:14:12 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "0",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "bf45d46b-8721-446b-ab82-7742fbce1204",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "TagResource",
					"id": "ac1dbff5-f194-47eb-a0e1-fbcdd6b2d2a2",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ResourceArn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/AWS/resource-snapshot-job/job-tlt3yi0brncwj\",\n\t\"Tags\": [\n\t\t{\n\t\t\t\"Key\" : \"Environment\",\n\t\t\t\"Value\": \"Production\"\n\t\t},\n\t\t{\n\t\t\t\"Key\" : \"Project\",\n\t\t\t\"Value\": \"Alpha\"\n\t\t},\n\t\t{\n\t\t\t\"Key\" : \"CostCenter\",\n\t\t\t\"Value\": \"123\"\n\t\t}\t\t\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/TagResource",
						"description": "[TagResource](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_TagResource.html)\n\nAssigns one or more tags (key-value pairs) to the specified resource."
					},
					"response": [
						{
							"id": "feb27c35-39f4-49b1-a6e5-f52fbbaf55b1",
							"name": "TagResource",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ResourceArn\": \"arn:aws:partnercentral:us-east-1:116669848322:catalog/AWS/resource-snapshot-job/job-tlt3yi0brncwj\",\n\t\"Tags\": [\n\t\t{\n\t\t\t\"Key\" : \"Environment\",\n\t\t\t\"Value\": \"Production\"\n\t\t},\n\t\t{\n\t\t\t\"Key\" : \"Project\",\n\t\t\t\"Value\": \"Alpha\"\n\t\t},\n\t\t{\n\t\t\t\"Key\" : \"CostCenter\",\n\t\t\t\"Value\": \"123\"\n\t\t}\t\t\n   ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/TagResource"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 05:21:09 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "227",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "47866fb0-f14b-4716-8945-077703d5d337",
									"enabled": true
								},
								{
									"key": "x-amzn-ErrorType",
									"value": "AccessDeniedException:http://internal.amazon.com/coral/com.amazon.partnerintegrationapi.common/",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "UntagResource",
					"id": "65415928-725d-428d-8f5d-ebadde9b52bc",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"ResourceArn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/AWS/resource-snapshot-job/job-tlt3yi0brncwj\",\n\t\"Tags\": [\n\t\t{\n\t\t\t\"Key\" : \"Environment\",\n\t\t\t\"Value\": \"Production\"\n\t\t},\n\t\t{\n\t\t\t\"Key\" : \"Project\",\n\t\t\t\"Value\": \"Alpha\"\n\t\t},\n\t\t{\n\t\t\t\"Key\" : \"CostCenter\",\n\t\t\t\"Value\": \"123\"\n\t\t}\t\t\n   ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/UntagResource",
						"description": "[UntagResource](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_UntagResource.html)\n\nRemoves a tag or tags from a resource."
					},
					"response": [
						{
							"id": "63f4192f-242d-493e-8013-008396586617",
							"name": "UntagResource",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\"ResourceArn\": \"arn:aws:partnercentral:us-east-1:116669848322:catalog/AWS/resource-snapshot-job/job-tlt3yi0brncwj\",\n\"TagKeys\": [\"CostCenter\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/TagResource"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 03 Feb 2025 05:21:09 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "227",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "47866fb0-f14b-4716-8945-077703d5d337",
									"enabled": true
								},
								{
									"key": "x-amzn-ErrorType",
									"value": "AccessDeniedException:http://internal.amazon.com/coral/com.amazon.partnerintegrationapi.common/",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "UpdateOpportunity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9dc71dc3-0697-4304-9353-36df85315fe3",
								"exec": [
									"try {",
									"    // Parse the response JSON",
									"    const response = pm.response.json();",
									"",
									"    // Extract response attributes",
									"    const opportunityId = response.Id || \"Unknown Id\";",
									"    const lastModifiedDate = response.LastModifiedDate || \"Unknown Date\";",
									"",
									"    // Check the response status",
									"    if (pm.response.code === 200) {",
									"        console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded. ",
									"          Updated Opportunity Id=${opportunityId}, ",
									"          LastModifiedDate=${lastModifiedDate}`);",
									"    } else {",
									"        console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
									"    }",
									"} catch (error) {",
									"    // Handle errors during response processing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "22668c7a-d299-49f0-9a50-711b792092d3",
								"exec": [
									"try {",
									"    // Parse the request payload",
									"    const requestPayload = JSON.parse(pm.request.body.raw);",
									"",
									"    // Safely extract Lifecycle attributes",
									"    const lifecycle = requestPayload.LifeCycle || {};",
									"    const nextSteps = lifecycle.NextSteps || \"N/A\";",
									"    const targetCloseDate = lifecycle.TargetCloseDate || \"N/A\";",
									"    const stage = lifecycle.Stage || \"N/A\";",
									"",
									"    // Log the action and attributes being updated",
									"    console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
									"    console.log(`[Pre-req ${pm.info.requestName}] Updating Lifecycle attributes: ",
									"      NextSteps=${nextSteps}, ",
									"      TargetCloseDate=${targetCloseDate}, ",
									"      Stage=${stage}`);",
									"} catch (error) {",
									"    // Handle JSON parsing or other unexpected errors",
									"    console.error(`[Pre-req ${pm.info.requestName}] Error processing request payload:`, error);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "047ce640-3a8c-4b2b-89d2-5a6844c557d9",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"CreatedDate\": \"2024-11-24T23:21:46Z\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": null,\n                \"CountryCode\": \"BR\",\n                \"PostalCode\": \"99999\",\n                \"StateOrRegion\": null,\n                \"StreetAddress\": null\n            },\n            \"AwsAccountId\": null,\n            \"CompanyName\": \"TestCloudTrailPOEditableOpportunityCanary\",\n            \"Duns\": null,\n            \"Industry\": \"Energy - Oil and Gas\",\n            \"OtherIndustry\": null,\n            \"WebsiteUrl\": \"www.TestCloudTrailPOEditableOpportunityCanary.com\"\n        },\n        \"Contacts\": []\n    },\n    \"Identifier\": \"O1111111\",\n    \"LastModifiedDate\": \"2024-11-25T01:37:49Z\",\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": \"Please call the customer on 2024-12-15\",\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Approved\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Qualified\",\n        \"TargetCloseDate\": \"2029-05-24\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": null,\n        \"CampaignName\": null,\n        \"Channels\": null,\n        \"Source\": \"None\",\n        \"UseCases\": null\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"OpportunityOwner\",\n            \"Email\": \"test@test.com\",\n            \"FirstName\": \"API Test\",\n            \"LastName\": \"Test Normal User\",\n            \"Phone\": null\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Business Presentation\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": null,\n        \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n        \"CustomerUseCase\": \"Database\",\n        \"DeliveryModels\": [\"SaaS or PaaS\"],\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"62323892\",\n                \"CurrencyCode\": \"USD\",\n                \"EstimationUrl\": null,\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": null,\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Initialized discussions with customer\"\n        ],\n        \"Title\": \"TestCloudTrailPOEditableOpportunityCanary\"\n    },\n    \"RelatedEntityIdentifiers\": {\n        \"AwsMarketplaceOffers\": [],\n        \"AwsProducts\": [],\n        \"Solutions\": [\n            \"S-0000000\"\n        ]\n    },\n    \"SoftwareRevenue\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/UpdateOpportunity",
						"description": "[UpdateOpportunity](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_UpdateOpportunity.html)\n\nUpdates the `Opportunity` record identified by a given `Identifier`. This operation allows you to modify the details of an existing opportunity to reflect the latest information and progress. Use this action to keep the opportunity record up-to-date and accurate.\n\nWhen you perform updates, include the entire payload with each request. If any field is omitted, the API assumes that the field is set to `null`. The best practice is to always perform a `GetOpportunity` to retrieve the latest values, then send the complete payload with the updated values to be changed."
					},
					"response": [
						{
							"id": "aceb5efd-c0c6-496f-90a8-b945b3a9edcc",
							"name": "UpdateOpportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Catalog\": \"Sandbox\",\n  \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": null,\n                \"CountryCode\": \"AO\",\n                \"PostalCode\": null,\n                \"StateOrRegion\": null,\n                \"StreetAddress\": \"123 main st\"\n            },\n            \"AwsAccountId\": null,\n            \"CompanyName\": \"TestTestCleanPoDraftOpp\",\n            \"Duns\": null,\n            \"Industry\": \"Gaming\",\n            \"OtherIndustry\": null,\n            \"WebsiteUrl\": \"https://www.nskrtest.com/\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": null,\n                \"Email\": \"thsis@live.com\",\n                \"FirstName\": null,\n                \"LastName\": null,\n                \"Phone\": null\n            }\n        ]\n    },\n  \"Identifier\": \"O4236579\",\n  \"LastModifiedDate\": \"2024-11-14T19:41:57Z\",\n  \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": null,\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Action Required\",\n        \"ReviewStatusReason\": \"null\",\n        \"Stage\": \"Prospect\",\n        \"TargetCloseDate\": \"2029-05-05\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": null,\n        \"CampaignName\": null,\n        \"Channels\": null,\n        \"Source\": \"None\",\n        \"UseCases\": null\n    },\n    \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Competitive Information\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": null,\n        \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n        \"CustomerUseCase\": \"Database\",\n        \"DeliveryModels\": [\n            \"SaaS or PaaS\"\n        ],\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"2132\",\n                \"CurrencyCode\": \"USD\",\n                \"EstimationUrl\": null,\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": null,\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Initialized discussions with customer\"\n        ],\n        \"Title\": \"TestTestCleanPoDraftOpp\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://partnercentral-selling.us-east-1.api.aws/UpdateOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 15 Nov 2024 00:05:51 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "59",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "829165ac-bd80-40a4-b04c-027ec4364c94",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Id\": \"O1111111\",\n    \"LastModifiedDate\": \"2024-11-15T00:05:50Z\"\n}"
						}
					]
				}
			],
			"id": "3d47fdbe-dcea-4c1d-a7a7-990a08fd34ce",
			"description": "Here are the list of actions offered by AWS Partner Central API for Selling:\n\n- [AssignOpportunity](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_AssignOpportunity.html)\n    \n- [AssociateOpportunity](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_AssociateOpportunity.html)\n    \n- [CreateOpportunity](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_CreateOpportunity.html)\n    \n- [DisassociateOpportunity](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_DisassociateOpportunity.html)\n    \n- [GetAwsOpportunitySummary](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetAwsOpportunitySummary.html)\n    \n- [GetEngagementInvitation](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetEngagementInvitation.html)\n    \n- [GetOpportunity](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)\n    \n- [ListEngagementInvitations](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html)\n    \n- [ListOpportunities](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListOpportunities.html)\n    \n- [ListSolutions](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListSolutions.html)\n    \n- [RejectEngagementInvitation](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_RejectEngagementInvitation.html)\n    \n- [StartEngagementByAcceptingInvitationTask](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_StartEngagementByAcceptingInvitationTask.html)\n    \n- [StartEngagementFromOpportunityTask](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_StartEngagementFromOpportunityTask.html)\n    \n- [UpdateOpportunity](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_UpdateOpportunity.html)"
		},
		{
			"name": "Working with AWS-originated Opportunities",
			"item": [
				{
					"name": "Simulating the creation of AWS originated opportunity",
					"item": [
						{
							"name": "[Simulate] CreateOpportunity - For Accept",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e9bce14-d7ed-4a18-93c1-8fbb4b78273e",
										"exec": [
											"try {",
											"     opportunityId = pm.response.json().Id;",
											"",
											"    // Save the opportunityId to a collection variable",
											"    pm.collectionVariables.set('opportunityId', opportunityId);",
											"",
											"    // Log the opportunity creation",
											"    console.log(`Created opportunity with ID ${opportunityId}`);",
											"",
											"    // Add a test to validate the opportunityId extraction",
											"    pm.test(`[Post-res ${pm.info.requestName}] Validate opportunity ID extraction`, function () {",
											"        pm.response.to.have.status(200); // Ensure the response status is 200",
											"        pm.expect(opportunityId).to.exist; // Ensure opportunityId exists",
											"        pm.expect(opportunityId).to.not.be.empty; // Ensure opportunityId is not empty",
											"        console.log(`[Post-res ${pm.info.requestName}] Opportunity ID ${opportunityId} successfully extracted and stored.`);",
											"    });",
											"",
											"} catch (error) {",
											"    // Handle any additional errors",
											"    console.error(`[${pm.info.requestName}] Failed to extract response data:`, error);",
											"",
											"    // Add a test to capture the error",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
											"        throw error; // Fail the test if an error occurs",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9ba801c5-f2fc-495c-b423-1a7a644d3916",
										"exec": [
											"try {",
											"    // Step 1: Generate Client Token",
											"    const clientToken = pm.variables.replaceIn('{{$randomUUID}}')",
											"",
											"    // Save the generated client token as a local variable",
											"    pm.variables.set('clientToken', pm.variables.replaceIn('{{$randomUUID}}'));",
											"    console.log(`[${pm.info.requestName}] Generated Client Token: ${clientToken}`);",
											"",
											"    // Step 2: Generate Opportunity Details",
											"    const requestTitle = \"New Business Deal\"; // Base title for the opportunity",
											"    const opportunityAmount = Math.floor(Math.random() * (32000 - 12000 + 1)) + 12000; // Random amount between 12000 and 32000",
											"    const randomSuffix = Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000; // Random 4-digit number",
											"    const opportunityTitle = `${requestTitle} - ${randomSuffix}`;",
											"    console.log(`amount ${opportunityAmount} random suffix ${randomSuffix} opportunity title ${opportunityTitle}`);",
											"",
											"    // Save the generated opportunity details as local variables",
											"    pm.variables.set('opportunityTitle', opportunityTitle);",
											"    pm.variables.set('opportunityAmount', opportunityAmount);",
											"    console.log(`[${pm.info.requestName}] Generated Opportunity Title: ${opportunityTitle}`);",
											"    console.log(`[${pm.info.requestName}] Generated Opportunity Amount: ${opportunityAmount}`);",
											"} catch (error) {",
											"    // Handle any errors during token generation or opportunity detail generation",
											"    console.error(`[${pm.info.requestName}] Error occurred:`, error);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d19445de-0ed7-44e3-97bd-3fbb3a3d490f",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ClientToken\": \"{{clientToken}}\",\n\t\"Catalog\": \"{{catalog}}\",\n\t\"Origin\": \"AWS Referral\",\n\t\"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": \"New York\",\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": \"123 Wall Street\"\n            },\n            \"AwsAccountId\": \"123456789012\",\n            \"CompanyName\": \"Acme Corp\",\n            \"Duns\": \"987654321\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": \"Investment Banking\",\n            \"WebsiteUrl\": \"https://www.acmecorp.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Chief Financial Officer\",\n                \"Email\": \"jane.doe@acmecorp.com\",\n                \"FirstName\": \"Jane\",\n                \"LastName\": \"Doe\",\n                \"Phone\": \"+12125551234\"\n            }\n        ]\n\t},\n\t\"LifeCycle\": {\n\t\t\"ClosedLostReason\": null,\n\t\t\"NextSteps\": \"Review the opportunity and update documentation before finalizing rejection.\",\n\t\t\"NextStepsHistory\": null,\n\t\t\"ReviewComments\": null,\n\t\t\"ReviewStatus\": \"Pending Submission\",\n\t\t\"ReviewStatusReason\": null,\n\t\t\"Stage\": \"Prospect\",\n\t\t\"TargetCloseDate\": \"2029-10-05\"\n\t},\n\t\"Marketing\": {\n\t\t\"AwsFundingUsed\": \"Yes\",\n\t\t\"CampaignName\": \"MKTG-Q1NYC2025-001\",\n\t\t\"Channels\": [\n\t\t\t\"Content Syndication\"\n\t\t],\n\t\t\"Source\": \"Marketing Activity\",\n\t\t\"UseCases\": [\n\t\t\t\"Analytics\"\n\t\t]\n\t},\n\t\"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"johndoe@acmecorp.com\",\n            \"FirstName\": \"John\",\n            \"LastName\": \"Doe\",\n            \"Phone\": \"+14155559876\"\n        }\n    ],\n\t\"OpportunityType\": \"Net New Business\",\n\t\"PartnerOpportunityIdentifier\": null,\n\t\"PrimaryNeedsFromAws\": [\n\t\t\"Co-Sell - Architectural Validation\"\n\t],\n\t\"Project\": {\n\t\t\"AdditionalComments\": null,\n\t\t\"ApnPrograms\": null,\n\t\t\"CompetitorName\": \"On-Prem\",\n\t\t\"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n\t\t\"CustomerUseCase\": \"Security & Compliance\",\n\t\t\"DeliveryModels\": [\n\t\t\t\"SaaS or PaaS\"\n\t\t],\n\t\t\"ExpectedCustomerSpend\": [\n\t\t\t{\n\t\t\t\t\"Amount\": \"25000\",\n\t\t\t\t\"CurrencyCode\": \"USD\",\n\t\t\t\t\"Frequency\": \"Monthly\",\n\t\t\t\t\"TargetCompany\": \"AWS\"\n\t\t\t}\n\t\t],\n\t\t\"OtherCompetitorNames\": null,\n\t\t\"OtherSolutionDescription\": \"Acme Data Lake\",\n\t\t\"RelatedOpportunityIdentifier\": null,\n\t\t\"SalesActivities\": [\n\t\t\t\"Conducted POC / Demo\"\n\t\t],\n\t\t\"Title\": \"{{opportunityTitle}}\"\n\t},\n\t\"SoftwareRevenue\": {\n\t\t\"DeliveryModel\": \"Pay-as-you-go\",\n\t\t\"EffectiveDate\": \"2023-10-31\",\n\t\t\"ExpirationDate\": \"2024-03-31\",\n\t\t\"Value\": {\n\t\t\t\"Amount\": \"10000.0\",\n\t\t\t\"CurrencyCode\": \"USD\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/CreateOpportunity"
							},
							"response": [
								{
									"id": "63fdd79a-6960-42f8-924b-c55dc31818d2",
									"name": "[Simulate] CreateOpportunity - For Accept",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"ClientToken\": \"{{clientToken}}\",\n\t\"Catalog\": \"{{catalog}}\",\n\t\"Origin\": \"AWS Referral\",\n\t\"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": \"New York\",\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": \"123 Wall Street\"\n            },\n            \"AwsAccountId\": \"123456789012\",\n            \"CompanyName\": \"Acme Corp\",\n            \"Duns\": \"987654321\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": \"Investment Banking\",\n            \"WebsiteUrl\": \"https://www.acmecorp.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Chief Financial Officer\",\n                \"Email\": \"jane.doe@acmecorp.com\",\n                \"FirstName\": \"Jane\",\n                \"LastName\": \"Doe\",\n                \"Phone\": \"+12125551234\"\n            }\n        ]\n\t},\n\t\"LifeCycle\": {\n\t\t\"ClosedLostReason\": null,\n\t\t\"NextSteps\": \"Review the opportunity and update documentation before finalizing rejection.\",\n\t\t\"NextStepsHistory\": null,\n\t\t\"ReviewComments\": null,\n\t\t\"ReviewStatus\": \"Pending Submission\",\n\t\t\"ReviewStatusReason\": null,\n\t\t\"Stage\": \"Prospect\",\n\t\t\"TargetCloseDate\": \"2029-10-05\"\n\t},\n\t\"Marketing\": {\n\t\t\"AwsFundingUsed\": \"Yes\",\n\t\t\"CampaignName\": \"MKTG-Q1NYC2025-001\",\n\t\t\"Channels\": [\n\t\t\t\"Content Syndication\"\n\t\t],\n\t\t\"Source\": \"Marketing Activity\",\n\t\t\"UseCases\": [\n\t\t\t\"Analytics\"\n\t\t]\n\t},\n\t\"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"johndoe@acmecorp.com\",\n            \"FirstName\": \"John\",\n            \"LastName\": \"Doe\",\n            \"Phone\": \"+14155559876\"\n        }\n    ],\n\t\"OpportunityType\": \"Net New Business\",\n\t\"PartnerOpportunityIdentifier\": null,\n\t\"PrimaryNeedsFromAws\": [\n\t\t\"Co-Sell - Architectural Validation\"\n\t],\n\t\"Project\": {\n\t\t\"AdditionalComments\": null,\n\t\t\"ApnPrograms\": null,\n\t\t\"CompetitorName\": \"On-Prem\",\n\t\t\"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n\t\t\"CustomerUseCase\": \"Security & Compliance\",\n\t\t\"DeliveryModels\": [\n\t\t\t\"SaaS or PaaS\"\n\t\t],\n\t\t\"ExpectedCustomerSpend\": [\n\t\t\t{\n\t\t\t\t\"Amount\": \"25000\",\n\t\t\t\t\"CurrencyCode\": \"USD\",\n\t\t\t\t\"Frequency\": \"Monthly\",\n\t\t\t\t\"TargetCompany\": \"AWS\"\n\t\t\t}\n\t\t],\n\t\t\"OtherCompetitorNames\": null,\n\t\t\"OtherSolutionDescription\": \"Acme Data Lake\",\n\t\t\"RelatedOpportunityIdentifier\": null,\n\t\t\"SalesActivities\": [\n\t\t\t\"Conducted POC / Demo\"\n\t\t],\n\t\t\"Title\": \"{{opportunityTitle}}\"\n\t},\n\t\"SoftwareRevenue\": {\n\t\t\"DeliveryModel\": \"Pay-as-you-go\",\n\t\t\"EffectiveDate\": \"2023-10-31\",\n\t\t\"ExpirationDate\": \"2024-03-31\",\n\t\t\"Value\": {\n\t\t\t\"Amount\": \"10000.0\",\n\t\t\t\"CurrencyCode\": \"USD\"\n\t\t}\n\t}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BASE_URL}}/CreateOpportunity"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Sat, 15 Feb 2025 00:41:37 GMT",
											"enabled": true
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										},
										{
											"key": "Content-Length",
											"value": "95",
											"enabled": true
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"enabled": true
										},
										{
											"key": "x-amzn-RequestId",
											"value": "80bcc88b-9de6-4141-8f3b-08027b9c51b5",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"Id\": \"O5397000\",\n    \"LastModifiedDate\": \"2025-02-15T00:41:36Z\",\n    \"PartnerOpportunityIdentifier\": null\n}"
								}
							]
						},
						{
							"name": "[Simulate] CreateOpportunity - For Reject",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e9bce14-d7ed-4a18-93c1-8fbb4b78273e",
										"exec": [
											"try {",
											"    opportunityId = pm.response.json().Id;",
											"",
											"    // Save the opportunityId to a collection variable",
											"    pm.collectionVariables.set('opportunityId', opportunityId);",
											"",
											"    // Log the opportunity creation",
											"    console.log(`Created opportunity with ID ${opportunityId}`);",
											"",
											"    // Add a test to validate the opportunityId extraction",
											"    pm.test(`[Post-res ${pm.info.requestName}] Validate opportunity ID extraction`, function () {",
											"        pm.response.to.have.status(200); // Ensure the response status is 200",
											"        pm.expect(opportunityId).to.exist; // Ensure opportunityId exists",
											"        pm.expect(opportunityId).to.not.be.empty; // Ensure opportunityId is not empty",
											"        console.log(`[Post-res ${pm.info.requestName}] Opportunity ID ${opportunityId} successfully extracted and stored.`);",
											"    });",
											"",
											"} catch (error) {",
											"    // Handle any additional errors",
											"    console.error(`[${pm.info.requestName}] Failed to extract response data:`, error);",
											"",
											"    // Add a test to capture the error",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
											"        throw error; // Fail the test if an error occurs",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a7f64dea-698b-400f-b60d-b9f19153e361",
										"exec": [
											"try {",
											"    // Step 1: Generate Client Token",
											"    const clientToken = pm.variables.replaceIn('{{$randomUUID}}')",
											"",
											"    // Save the generated client token as a local variable",
											"    pm.variables.set('clientToken', pm.variables.replaceIn('{{$randomUUID}}'));",
											"    console.log(`[${pm.info.requestName}] Generated Client Token: ${clientToken}`);",
											"",
											"    // Step 2: Generate Opportunity Details",
											"    const requestTitle = \"New Business Deal\"; // Base title for the opportunity",
											"    const opportunityAmount = Math.floor(Math.random() * (32000 - 12000 + 1)) + 12000; // Random amount between 12000 and 32000",
											"    const randomSuffix = Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000; // Random 4-digit number",
											"    const opportunityTitle = `${requestTitle} - ${randomSuffix}`;",
											"    console.log(`amount ${opportunityAmount} random suffix ${randomSuffix} opportunity title ${opportunityTitle}`);",
											"",
											"    // Save the generated opportunity details as local variables",
											"    pm.variables.set('opportunityTitle', opportunityTitle);",
											"    pm.variables.set('opportunityAmount', opportunityAmount);",
											"    console.log(`[${pm.info.requestName}] Generated Opportunity Title: ${opportunityTitle}`);",
											"    console.log(`[${pm.info.requestName}] Generated Opportunity Amount: ${opportunityAmount}`);",
											"} catch (error) {",
											"    // Handle any errors during token generation or opportunity detail generation",
											"    console.error(`[${pm.info.requestName}] Error occurred:`, error);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c078cde8-c9fc-4fb1-9c97-6272e07c22c2",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"ClientToken\": \"{{clientToken}}\",\n\t\"Catalog\": \"{{catalog}}\",\n\t\"Origin\": \"AWS Referral\",\n\t\"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": \"New York\",\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": \"123 Wall Street\"\n            },\n            \"AwsAccountId\": \"123456789012\",\n            \"CompanyName\": \"Acme Corp\",\n            \"Duns\": \"987654321\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": \"Investment Banking\",\n            \"WebsiteUrl\": \"https://www.acmecorp.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Chief Financial Officer\",\n                \"Email\": \"jane.doe@acmecorp.com\",\n                \"FirstName\": \"Jane\",\n                \"LastName\": \"Doe\",\n                \"Phone\": \"+12125551234\"\n            }\n        ]\n\t},\n\t\"LifeCycle\": {\n\t\t\"ClosedLostReason\": null,\n\t\t\"NextSteps\": \"Review the opportunity and update documentation before finalizing rejection.\",\n\t\t\"NextStepsHistory\": null,\n\t\t\"ReviewComments\": null,\n\t\t\"ReviewStatus\": \"Pending Submission\",\n\t\t\"ReviewStatusReason\": null,\n\t\t\"Stage\": \"Prospect\",\n\t\t\"TargetCloseDate\": \"2029-10-05\"\n\t},\n\t\"Marketing\": {\n\t\t\"AwsFundingUsed\": \"Yes\",\n\t\t\"CampaignName\": \"MKTG-Q1NYC2025-001\",\n\t\t\"Channels\": [\n\t\t\t\"Content Syndication\"\n\t\t],\n\t\t\"Source\": \"Marketing Activity\",\n\t\t\"UseCases\": [\n\t\t\t\"Analytics\"\n\t\t]\n\t},\n\t\"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"johndoe@acmecorp.com\",\n            \"FirstName\": \"John\",\n            \"LastName\": \"Doe\",\n            \"Phone\": \"+14155559876\"\n        }\n    ],\n\t\"OpportunityType\": \"Net New Business\",\n\t\"PartnerOpportunityIdentifier\": null,\n\t\"PrimaryNeedsFromAws\": [\n\t\t\"Co-Sell - Architectural Validation\"\n\t],\n\t\"Project\": {\n\t\t\"AdditionalComments\": null,\n\t\t\"ApnPrograms\": null,\n\t\t\"CompetitorName\": \"On-Prem\",\n\t\t\"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n\t\t\"CustomerUseCase\": \"Security & Compliance\",\n\t\t\"DeliveryModels\": [\n\t\t\t\"SaaS or PaaS\"\n\t\t],\n\t\t\"ExpectedCustomerSpend\": [\n\t\t\t{\n\t\t\t\t\"Amount\": \"25000\",\n\t\t\t\t\"CurrencyCode\": \"USD\",\n\t\t\t\t\"Frequency\": \"Monthly\",\n\t\t\t\t\"TargetCompany\": \"AWS\"\n\t\t\t}\n\t\t],\n\t\t\"OtherCompetitorNames\": null,\n\t\t\"OtherSolutionDescription\": \"Acme Data Lake\",\n\t\t\"RelatedOpportunityIdentifier\": null,\n\t\t\"SalesActivities\": [\n\t\t\t\"Conducted POC / Demo\"\n\t\t],\n\t\t\"Title\": \"{{opportunityTitle}}\"\n\t},\n\t\"SoftwareRevenue\": {\n\t\t\"DeliveryModel\": \"Pay-as-you-go\",\n\t\t\"EffectiveDate\": \"2023-10-31\",\n\t\t\"ExpirationDate\": \"2024-03-31\",\n\t\t\"Value\": {\n\t\t\t\"Amount\": \"10000.0\",\n\t\t\t\"CurrencyCode\": \"USD\"\n\t\t}\n\t}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/CreateOpportunity"
							},
							"response": []
						},
						{
							"name": "ListEngagementInvitations to check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71531857-ca03-45c3-8739-7a7593585860",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "000ec6e7-bad5-40b0-be6b-1302fd048f59",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c1d8968f-5d59-46bf-8d9f-eeeb4f33cf4a",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"MaxResults\": 2,\n\t\"Catalog\": \"{{catalog}}\",\n\t\"ParticipantType\": \"RECEIVER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagementInvitations",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html)"
							},
							"response": []
						}
					],
					"id": "97205d47-8f92-434f-ba68-0b20f51e3095",
					"description": "This folder contains APIs for testing scenarios related to the creation of opportunities initiated by AWS. It includes actions for accepting or rejecting the opportunity and checking engagement invitations to validate the creation process. Remember that the requests tagged as \\[Simulate\\] is only available in the `Sandbox` catalog, and not in the `AWS` catalog."
				},
				{
					"name": "Rejecting an AWS-originated ACE opportunity",
					"item": [
						{
							"name": "ListEngagementInvitations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71531857-ca03-45c3-8739-7a7593585860",
										"exec": [
											"try {",
											"    // Parse the response JSON",
											"    const response = pm.response.json();",
											"",
											"    // Check if EngagementInvitationSummaries array exists and has at least one item",
											"    if (response.EngagementInvitationSummaries && response.EngagementInvitationSummaries.length > 0) {",
											"        // Get the first invitation (last incoming invitation based on descending order)",
											"        const firstInvitation = response.EngagementInvitationSummaries[0];",
											"        let rejectingEngagementInvitationID = firstInvitation.Arn;",
											"",
											"        // Save the ARN to a Postman variable",
											"        pm.collectionVariables.set(\"rejectingEngagementInvitationID\", rejectingEngagementInvitationID);",
											"",
											"        // Log the details",
											"",
											"        pm.test(`${pm.info.requestName} Status is 200. Set ${rejectingEngagementInvitationID} to be rejected`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"    } else {",
											"        console.warn(`[Post-res ${pm.info.requestName}] No engagement invitations found.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response parsing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "8f3279f5-bfa6-46be-a488-71b1f95b4918",
										"exec": [
											"console.log(`[Pre-req ${pm.info.requestName}] Executing ${pm.info.requestName} action with ParticipantType=RECEIVER, sorted by InvitationDate in Descending order.`);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "520468f4-da05-42ff-aaf0-0f2cde360e20",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"MaxResults\": 20,\n    \"Catalog\": \"{{catalog}}\",\n    \"Status\": [\"PENDING\"],\n    \"Sort\": {\n        \"SortBy\": \"InvitationDate\",\n        \"SortOrder\": \"DESCENDING\"\n    },\n\t\"ParticipantType\": \"RECEIVER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagementInvitations",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html)"
							},
							"response": []
						},
						{
							"name": "GetEngagementInvitation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4dce1163-9537-49a8-abea-1433bfcfe899",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const requestPayload = JSON.parse(pm.request.body.raw);",
											"const identifier = requestPayload.Identifier || \"Unknown Identifier\";",
											"let rejectingEngagementInvitationID = pm.collectionVariables.get(\"rejectingEngagementInvitationID\");",
											"",
											"// Check the response status and log accordingly",
											"if (pm.response.code === 200) {",
											"",
											"    pm.test(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded for Identifier: ${identifier}`, function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"} else {",
											"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed for Identifier: ${identifier}. Status Code: ${pm.response.code}`);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "e2278bc9-8ae1-4821-b065-f94392891fd5",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const requestPayload = JSON.parse(pm.request.body.raw);",
											"const identifier = requestPayload.Identifier || \"Unknown Identifier\";",
											"",
											"// Log the start of the action with the Identifier",
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${identifier}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c1afbbab-40f3-473b-b1dc-cb8fc8790aaa",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{rejectingEngagementInvitationID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetEngagementInvitation"
							},
							"response": []
						},
						{
							"name": "RejectEngagementInvitation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cec4ba5a-d6f1-48b4-ac8b-5fb1c9fab228",
										"exec": [
											"try {",
											"    // Retrieve the rejectingEngagementInvitationID and RejectionReason from Postman variables",
											"    let rejectingEngagementInvitationID = pm.collectionVariables.get(\"rejectingEngagementInvitationID\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Successfully rejected engagement invitation with ARN: ${rejectingEngagementInvitationID}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to reject engagement invitation with ARN: ${rejectingEngagementInvitationID}. Status Code: ${pm.response.code}`);",
											"    }",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "58303b91-1519-496e-980a-c26e9efbfea0",
										"exec": [
											"// Retrieve the rejectingEngagementInvitationID and RejectionReason from Postman variables",
											"const rejectingEngagementInvitationID = pm.variables.get(\"rejectingEngagementInvitationID\");",
											"const requestPayload = JSON.parse(pm.request.body.raw);",
											"",
											"// Log the action with the ARN and rejection reason",
											"if (rejectingEngagementInvitationID) {",
											"    console.log(`[Pre-req ${pm.info.requestName}] Rejecting engagement invitation with ARN: ${rejectingEngagementInvitationID} and Rejection reason: ${requestPayload.rejectionReason}`);",
											"} else {",
											"    console.warn(`[Pre-req ${pm.info.requestName}] No rejectingEngagementInvitationID found. Ensure it has been set before executing this action.`);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e06754e8-3965-4461-8421-bd71a8b01010",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{rejectingEngagementInvitationID}}\",\n    \"RejectionReason\": \"Next steps unclear\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/RejectEngagementInvitation"
							},
							"response": []
						}
					],
					"id": "e479b70c-7e4d-4a5d-8c91-2b17e532acde",
					"description": "Use these APIs to manage the rejection process of AWS-originated ACE opportunities. The workflow includes listing available engagement invitations, fetching a specific engagement invitation, and rejecting it."
				},
				{
					"name": "Accepting an AWS-originated ACE opportunity",
					"item": [
						{
							"name": "ListEngagementInvitations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71531857-ca03-45c3-8739-7a7593585860",
										"exec": [
											"try {",
											"    // Parse the response JSON",
											"    const response = pm.response.json();",
											"",
											"    // Check if EngagementInvitationSummaries array exists and has at least one item",
											"    if (response.EngagementInvitationSummaries && response.EngagementInvitationSummaries.length > 0) {",
											"        // Get the first invitation (last incoming invitation based on descending order)",
											"        const firstInvitation = response.EngagementInvitationSummaries[0];",
											"        const acceptingEngagementInvitationID = firstInvitation.Arn;",
											"",
											"        // Save the ARN to a Postman collection variable",
											"        pm.collectionVariables.set(\"acceptingEngagementInvitationID\", acceptingEngagementInvitationID);",
											"",
											"        // Log the details",
											"        console.log(`[Post-res ${pm.info.requestName}] Found engagement invitation to accept. ARN: ${acceptingEngagementInvitationID}`);",
											"",
											"        // Add a test to validate the success of setting the ARN",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status is 200. ARN set for acceptance: ${acceptingEngagementInvitationID}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"    } else {",
											"        // Log a warning if no invitations are found",
											"        console.warn(`[Post-res ${pm.info.requestName}] No engagement invitations found.`);",
											"        pm.test(`[Post-res ${pm.info.requestName}] No engagement invitations found`, function () {",
											"            pm.expect(response.EngagementInvitationSummaries).to.have.lengthOf(0);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Log the error and fail the test if JSON parsing or other issues occur",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
											"        throw error; // Ensure the test fails if an error occurs",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ff7e603f-be6b-4d82-ad60-3a2ea6ece03c",
										"exec": [
											"console.log(`[Pre-req ${pm.info.requestName}] Executing ${pm.info.requestName} action with ParticipantType=RECEIVER, sorted by InvitationDate in Descending order.`);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4cb0a453-454d-46e2-9744-5255f093567a",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"MaxResults\": 20,\n    \"Catalog\": \"{{catalog}}\",\n    \"Status\": [\"PENDING\"],\n    \"Sort\": {\n        \"SortBy\": \"InvitationDate\",\n        \"SortOrder\": \"DESCENDING\"\n    },\n\t\"ParticipantType\": \"RECEIVER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagementInvitations",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html)"
							},
							"response": []
						},
						{
							"name": "GetEngagementInvitation",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4dce1163-9537-49a8-abea-1433bfcfe899",
										"exec": [
											"try {",
											"    // Parse the request payload to extract the Identifier",
											"    const requestPayload = JSON.parse(pm.request.body.raw);",
											"    const identifier = requestPayload.Identifier || \"Unknown Identifier\";",
											"    const acceptingEngagementInvitationID = pm.collectionVariables.get(\"acceptingEngagementInvitationID\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded for Identifier: ${identifier}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"        console.log(`[Post-res ${pm.info.requestName}] Successfully accepted engagement invitation with ARN: ${acceptingEngagementInvitationID}`);",
											"    } else {",
											"        pm.test(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed for Identifier: ${identifier}`, function () {",
											"            pm.response.to.not.have.status(200);",
											"        });",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to accept engagement invitation with ARN: ${acceptingEngagementInvitationID}. Status Code: ${pm.response.code}`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response parsing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
											"        throw error;",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "45df17b5-cb5d-47ee-807d-09c15026e925",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const requestPayload = JSON.parse(pm.request.body.raw);",
											"const identifier = requestPayload.Identifier || \"Unknown Identifier\";",
											"",
											"// Log the start of the action with the Identifier",
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${identifier}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "07ae1e6b-94c5-46ba-928e-384dc3d47489",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{acceptingEngagementInvitationID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetEngagementInvitation"
							},
							"response": []
						},
						{
							"name": "StartEngagementByAcceptingInvitationTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9bcc3dd-c5ba-46e7-8271-0bd93d6d59cd",
										"exec": [
											"try {",
											"    // Parse the response JSON",
											"    const response = pm.response.json();",
											"",
											"    // Extract response attributes",
											"    const opportunityId = response.OpportunityId || \"Unknown Opportunity\";",
											"    const taskDetails = {",
											"        TaskId: response.TaskId || \"N/A\",",
											"        TaskArn: response.TaskArn || \"N/A\",",
											"        TaskStatus: response.TaskStatus || \"N/A\"",
											"    };",
											"",
											"    pm.collectionVariables.set(\"acceptedEngagementOpportunityID\", opportunityId);",
											"",
											"    // Add tests for response validation",
											"    pm.test(`[Post-res ${pm.info.requestName}] Response structure validation`, function () {",
											"        pm.response.to.have.status(200);",
											"        pm.expect(response).to.have.property(\"OpportunityId\");",
											"        pm.expect(taskDetails.TaskStatus).to.not.equal(\"FAILED\");",
											"    });",
											"",
											"    // Add tests for individual fields",
											"    pm.test(`[Post-res ${pm.info.requestName}] Task details validation`, function () {",
											"        pm.expect(taskDetails.TaskId).to.not.equal(\"N/A\");",
											"        pm.expect(taskDetails.TaskArn).to.not.equal(\"N/A\");",
											"        pm.expect(taskDetails.TaskStatus).to.not.equal(\"N/A\");",
											"    });",
											"",
											"    // Log the action execution and task details",
											"    console.log(",
											"        `[Post-res ${pm.info.requestName}] ${pm.info.requestName} executed. Started engagement on ${opportunityId}. Task details: TaskId=${taskDetails.TaskId}, TaskArn=${taskDetails.TaskArn}, TaskStatus=${taskDetails.TaskStatus}.`",
											"    );",
											"} catch (error) {",
											"    // Handle errors during response parsing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
											"        throw error;",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cc229de6-5890-4c2b-8302-ed678150cd25",
										"exec": [
											"try {",
											"    // Step 1: Generate Client Token",
											"    const clientToken = pm.variables.replaceIn('{{$randomUUID}}')",
											"",
											"    // Save the generated client token as a local variable",
											"    pm.variables.set('clientToken', pm.variables.replaceIn('{{$randomUUID}}'));",
											"    console.log(`[${pm.info.requestName}] Generated Client Token: ${clientToken}`);",
											"    ",
											"    // Step 2: Retrieve acceptingEngagementInvitationID",
											"    const acceptingEngagementInvitationID = pm.collectionVariables.get(\"acceptingEngagementInvitationID\");",
											"",
											"    if (acceptingEngagementInvitationID) {",
											"        // Log the action details for accepting the engagement invitation",
											"        console.log(`[Pre-req ${pm.info.requestName}] Accepting engagement invitation with ARN: ${acceptingEngagementInvitationID}`);",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No acceptingEngagementInvitationID found. Ensure it has been set before executing this action.`);",
											"    }",
											"",
											"    // Log the action start",
											"    console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
											"",
											"} catch (error) {",
											"    // Handle any errors during token generation or retrieving engagement ID",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error occurred:`, error);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "adc455bb-0b95-4fc3-b924-4f42d07b9d44",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Catalog\": \"{{catalog}}\",\n\t\"Identifier\": \"{{acceptingEngagementInvitationID}}\",\n\t\"ClientToken\": \"{{clientToken}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/StartEngagementByAcceptingInvitationTask"
							},
							"response": []
						},
						{
							"name": "GetOpportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60dc0e30-6648-4733-b82a-5a0188de9d02",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        let responseBody = pm.response.json();",
											"",
											"        // Perform tests on the response body",
											"        pm.test(\"Response has the correct structure\", function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"            pm.expect(responseBody).to.have.property('Id');",
											"            pm.expect(responseBody.Id).to.eql(opportunityId);",
											"            // Add more property checks as needed",
											"        });",
											"",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5f3e2c38-b6b3-43f6-8732-51ce88a09e86",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const requestPayload = JSON.parse(pm.request.body.raw);",
											"const identifier = requestPayload.Identifier || \"Unknown Identifier\";",
											"",
											"// Log the start of the action with the Identifier",
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${identifier}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "4584bf07-6ede-4a53-8226-696087f7f49c",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{acceptedEngagementOpportunityID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity"
							},
							"response": []
						}
					],
					"id": "33c540d2-ef1f-4ba0-a462-def2ad1cf5e5",
					"description": "This folder facilitates the acceptance of AWS-originated ACE opportunities. The APIs allow you to list engagement invitations, fetch the details of an invitation, and initiate the acceptance task while verifying the opportunity."
				}
			],
			"id": "11093c4f-f421-4f84-8af4-e6de85db9149",
			"description": "Opportunities are shared with partners when an AWS sales executive attaches a partner to an opportunity in AWS's CRM system. These are referred to as AWS Opportunities, distinct from opportunities created in the partner's own account.\n\nWhen an AWS Opportunity has a partner attached, AWS creates an Engagement Invitation containing a subset of data from the AWS Opportunity. Partners will receive an _Engagement Invitation Created_ event.\n\nHere is the workflow of working with [AWS Originated opportunities](https://docs.aws.amazon.com/partner-central/latest/APIReference/working-with-opportunities-from-aws.html):\n\n<img src=\"https://content.pstmn.io/bc2745df-3cc6-4a57-af1f-75ca0d4c15f4/U2NyZWVuc2hvdCAyMDI1LTAyLTEwIGF0IDUuMTcuNTDigK9QTS5wbmc=\" alt=\"AWS%20Originated%20Opportunity\" width=\"1532\" height=\"882\">"
		},
		{
			"name": "Working with Partner-originated Opportunities",
			"item": [
				{
					"name": "Submitting a Partner-originated ACE opportunity",
					"item": [
						{
							"name": "CreateOpportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3e9bce14-d7ed-4a18-93c1-8fbb4b78273e",
										"exec": [
											"try {",
											"    // Step 1: Generate Client Token",
											"    const clientToken = pm.variables.replaceIn('{{$randomUUID}}')",
											"",
											"    // Save the generated client token as a local variable",
											"    pm.variables.set('clientToken', pm.variables.replaceIn('{{$randomUUID}}'));",
											"    console.log(`[${pm.info.requestName}] Generated Client Token: ${clientToken}`);",
											"",
											"    // Step 2: Generate Opportunity Details",
											"    const requestTitle = \"New Business Deal\"; // Base title for the opportunity",
											"    const opportunityAmount = Math.floor(Math.random() * (32000 - 12000 + 1)) + 12000; // Random amount between 12000 and 32000",
											"    const randomSuffix = Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000; // Random 4-digit number",
											"    const opportunityTitle = `${requestTitle} - ${randomSuffix}`;",
											"    console.log(`amount ${opportunityAmount} random suffix ${randomSuffix} opportunity title ${opportunityTitle}`);",
											"",
											"    // Save the generated opportunity details as local variables",
											"    pm.variables.set('opportunityTitle', opportunityTitle);",
											"    pm.variables.set('opportunityAmount', opportunityAmount);",
											"    console.log(`[${pm.info.requestName}] Generated Opportunity Title: ${opportunityTitle}`);",
											"    console.log(`[${pm.info.requestName}] Generated Opportunity Amount: ${opportunityAmount}`);",
											"} catch (error) {",
											"    // Handle any errors during token generation or opportunity detail generation",
											"    console.error(`[${pm.info.requestName}] Error occurred:`, error);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "0f3a39db-eb57-42fc-aab0-14ad9007da60",
										"exec": [
											"try {",
											"    // Step 1: Generate Client Token",
											"    const clientToken = pm.variables.replaceIn('{{$randomUUID}}')",
											"",
											"    // Save the generated client token as a local variable",
											"    pm.variables.set('clientToken', pm.variables.replaceIn('{{$randomUUID}}'));",
											"    console.log(`[${pm.info.requestName}] Generated Client Token: ${clientToken}`);",
											"",
											"    // Step 2: Generate Opportunity Details",
											"    const requestTitle = \"New Business Deal\"; // Base title for the opportunity",
											"    const opportunityAmount = Math.floor(Math.random() * (32000 - 12000 + 1)) + 12000; // Random amount between 12000 and 32000",
											"    const randomSuffix = Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000; // Random 4-digit number",
											"    const opportunityTitle = `${requestTitle} - ${randomSuffix}`;",
											"    console.log(`amount ${opportunityAmount} random suffix ${randomSuffix} opportunity title ${opportunityTitle}`);",
											"",
											"    // Save the generated opportunity details as local variables",
											"    pm.variables.set('opportunityTitle', opportunityTitle);",
											"    pm.variables.set('opportunityAmount', opportunityAmount);",
											"    console.log(`[${pm.info.requestName}] Generated Opportunity Title: ${opportunityTitle}`);",
											"    console.log(`[${pm.info.requestName}] Generated Opportunity Amount: ${opportunityAmount}`);",
											"} catch (error) {",
											"    // Handle any errors during token generation or opportunity detail generation",
											"    console.error(`[${pm.info.requestName}] Error occurred:`, error);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6f804e94-ce15-45a7-b203-e84375f7835d",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ClientToken\": \"{{clientToken}}\",\n    \"Catalog\": \"{{catalog}}\",\n    \"Origin\": \"Partner Referral\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": null,\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": null\n            },\n            \"AwsAccountId\": \"111111111111\",\n            \"CompanyName\": \"ValidAWSCreate\",\n            \"Duns\": \"111100111\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": null,\n            \"WebsiteUrl\": \"www.test.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Executive\",\n                \"Email\": \"test@test.com\",\n                \"FirstName\": \"TestContact011\",\n                \"LastName\": \"MLastName001\",\n                \"Phone\": \"+14444444444\"\n            }\n        ]\n    },\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Pending Submission\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Prospect\",\n        \"TargetCloseDate\": \"2029-10-05\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": \"Yes\",\n        \"CampaignName\": \"TestCampaignName01\",\n        \"Channels\": [\n            \"Content Syndication\"\n        ],\n        \"Source\": \"Marketing Activity\",\n        \"UseCases\": [\n            \"Analytics\"\n        ]\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"testemail@test.com\",\n            \"FirstName\": \"TestContact001\",\n            \"LastName\": \"CLastName001\",\n            \"Phone\": \"+14444444444\"\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Architectural Validation\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": \"On-Prem\",\n        \"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n        \"CustomerUseCase\": \"Security & Compliance\",\n        \"DeliveryModels\": [\n            \"SaaS or PaaS\"\n        ],\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"12500\",\n                \"CurrencyCode\": \"USD\",\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": \"TestSolution\",\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Conducted POC / Demo\"\n        ],\n        \"Title\": \"{{opportunityTitle}}\"\n    },\n    \"SoftwareRevenue\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/CreateOpportunity"
							},
							"response": []
						},
						{
							"name": "ListSolutions",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09273b28-c68d-43e0-9c30-e1074b818053",
										"exec": [
											"try {",
											"    // Parse the response JSON",
											"    const response = pm.response.json();",
											"",
											"    // Check if SolutionSummaries array exists and has at least one item",
											"    if (response.SolutionSummaries && response.SolutionSummaries.length > 0) {",
											"        // Get the first solution (latest solution based on descending order)",
											"        const firstSolution = response.SolutionSummaries[0];",
											"        let solutionId = firstSolution.Id;",
											"",
											"        // Save the Id to a Postman variable",
											"        pm.collectionVariables.set(\"solutionId\", solutionId);",
											"",
											"        // Log the details",
											"",
											"        pm.test(`${pm.info.requestName} Status is 200. Set ${solutionId} to be active solution to associate`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"    } else {",
											"        console.warn(`[Post-res ${pm.info.requestName}] No active solution found.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response parsing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "69f2631a-9d96-445b-9831-c2b00e98300f",
										"exec": [
											"console.log(`[Pre-req ${pm.info.requestName}] Executing ${pm.info.requestName} action with Status=Active, sorted by CreatedDate in Descending order.`);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "35fcc949-276e-47dd-9794-aed53490d972",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"MaxResults\": 20,\n    \"Catalog\" : \"{{catalog}}\",\n    \"Sort\": {\n        \"SortBy\": \"CreatedDate\",\n        \"SortOrder\": \"DESCENDING\"\n    },\n    \"Status\": [\"Active\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListSolutions"
							},
							"response": []
						},
						{
							"name": "ListOffersFromAWSMarketplace",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09273b28-c68d-43e0-9c30-e1074b818053",
										"exec": [
											"try {",
											"    // Parse the response JSON",
											"    const response = pm.response.json();",
											"",
											"    // Check if SolutionSummaries array exists and has at least one item",
											"    if (response.EntitySummaryList && response.EntitySummaryList.length > 0) {",
											"        // Get the first private offer",
											"        const firstOffer = response.EntitySummaryList[0];",
											"        let offerId = firstOffer.EntityId;",
											"        let offerArn = firstOffer.EntityArn;",
											"",
											"        // Save the Id to a Postman variable",
											"        pm.collectionVariables.set(\"offerId\", offerId);",
											"        pm.collectionVariables.set(\"offerArn\", offerArn);",
											"        console.warn(`offer id ${offerId}`);",
											"        // Log the details",
											"",
											"        pm.test(`${pm.info.requestName} Status is 200. Set ${offerId} to be valid offer to associate`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"    } else {",
											"        console.warn(`[Post-res ${pm.info.requestName}] No valid offer found.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response parsing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "69f2631a-9d96-445b-9831-c2b00e98300f",
										"exec": [
											"console.log(`[Pre-req ${pm.info.requestName}] Executing ${pm.info.requestName} action with Status=Active, sorted by CreatedDate in Descending order.`);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8e97a507-dfa9-420b-baf7-844f6be68d66",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "awsv4",
									"awsv4": {
										"sessionToken": "{{vault:aws.sessionToken.inviting}}",
										"service": "{{aws.marketplace.service}}",
										"secretKey": "{{vault:aws.secretKey.inviting}}",
										"accessKey": "{{vault:aws.accessKey.inviting}}",
										"addAuthDataToQuery": false,
										"region": "us-east-1"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"AWSMarketplace\",\n    \"EntityType\": \"Offer\",\n    \"EntityTypeFilters\": {\n\t\t\t\"OfferFilters\": {\n                \"Targeting\": {\n                    \"ValueList\": [\"BuyerAccounts\"]\n                }\n            }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{_.CAPI_PROD}}/ListEntities"
							},
							"response": []
						},
						{
							"name": "AssociateOpportunity - Solution",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e784582-58cc-4aee-aece-98065aab311a",
										"exec": [
											"try {",
											"    // Retrieve the solutionId and opportunityId from Postman collection variables",
											"    let solutionId = pm.collectionVariables.get(\"solutionId\");",
											"    let opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Successfully associated Opportunity ID: ${opportunityId} with Solution ID: ${solutionId}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to associate Opportunity ID: ${opportunityId} with Solution ID: ${solutionId}. Status Code: ${pm.response.code}`);        ",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9f38fef7-0866-4228-916d-c68abab42b10",
										"exec": [
											"// Retrieve the solutionId and opportunityId from Postman collection variables",
											"const solutionId = pm.collectionVariables.get(\"solutionId\");",
											"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the action with the solutionId and opportunityId",
											"if (solutionId && opportunityId) {",
											"    console.log(`[Pre-req ${pm.info.requestName}] Associating Opportunity with Solution ID: ${solutionId} and Opportunity ID: ${opportunityId}`);",
											"} else {",
											"    console.warn(`[Pre-req ${pm.info.requestName}] Missing solutionId or opportunityId. Ensure both have been set before executing this action.`);",
											"}",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5f9908c4-65c9-4875-9ff2-e8bee8da713f",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"OpportunityIdentifier\": \"{{opportunityId}}\",\n   \"RelatedEntityIdentifier\": \"{{solutionId}}\",\n   \"RelatedEntityType\": \"Solutions\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/AssociateOpportunity"
							},
							"response": []
						},
						{
							"name": "AssociateOpportunity - MarketplacePrivateOffer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e784582-58cc-4aee-aece-98065aab311a",
										"exec": [
											"try {",
											"    // Retrieve the solutionId and opportunityId from Postman collection variables",
											"    let solutionId = pm.collectionVariables.get(\"solutionId\");",
											"    let opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Successfully associated Opportunity ID: ${opportunityId} with Solution ID: ${solutionId}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to associate Opportunity ID: ${opportunityId} with Solution ID: ${solutionId}. Status Code: ${pm.response.code}`);        ",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9f38fef7-0866-4228-916d-c68abab42b10",
										"exec": [
											"// Retrieve the solutionId and opportunityId from Postman collection variables",
											"const offerId = pm.collectionVariables.get(\"offerId\");",
											"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the action with the solutionId and opportunityId",
											"if (offerId && opportunityId) {",
											"    console.log(`[Pre-req ${pm.info.requestName}] Associating Opportunity with Offer ID: ${offerId} and Opportunity ID: ${opportunityId}`);",
											"} else {",
											"    console.warn(`[Pre-req ${pm.info.requestName}] Missing offerId or opportunityId. Ensure both have been set before executing this action.`);",
											"}",
											"",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "c20086b3-2399-4765-ad84-748a67f25c38",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"OpportunityIdentifier\": \"{{opportunityId}}\",\n   \"RelatedEntityIdentifier\": \"{{offerArn}}\",\n   \"RelatedEntityType\": \"AwsMarketplaceOffers\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/AssociateOpportunity"
							},
							"response": []
						},
						{
							"name": "ListProductsFromGithub",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09273b28-c68d-43e0-9c30-e1074b818053",
										"exec": [
											"try {",
											"    // Check if the response is successful (status code 200)",
											"    if (pm.response.code === 200) {",
											"        // Parse the JSON response",
											"        let awsProducts = pm.response.json();",
											"",
											"        // Check if the response is an array and has at least one item",
											"        if (Array.isArray(awsProducts) && awsProducts.length > 0) {",
											"            // Extract the \"Identifier\" of the first object",
											"            let productId = awsProducts[0].Identifier;",
											"",
											"            // Store the productId in the collection variable",
											"            pm.collectionVariables.set(\"productId\", productId);",
											"",
											"            console.log(`[Post-res ${pm.info.requestName}] Successfully extracted Product ID: ${productId}`);",
											"",
											"            // Test to verify the productId was set",
											"            pm.test(\"Product ID extracted and set\", function() {",
											"                pm.expect(pm.collectionVariables.get(\"productId\")).to.exist.and.to.not.be.empty;",
											"            });",
											"        } else {",
											"            throw new Error(\"Response is not an array or is empty\");",
											"        }",
											"    } else {",
											"        throw new Error(`Unexpected status code: ${pm.response.code}`);",
											"    }",
											"} catch (error) {",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response: ${error.message}`);",
											"    pm.test(\"Failed to extract Product ID\", function() {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "69f2631a-9d96-445b-9831-c2b00e98300f",
										"exec": [
											"console.log(`[Pre-req ${pm.info.requestName}] Fetching AWS Products list from GitHub`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5c6a86d1-beff-4268-a358-7658b8f3bde6",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "raw.githubusercontent.com/aws-samples/partner-crm-integration-samples/main/resources/aws_products.json"
							},
							"response": []
						},
						{
							"name": "AssociateOpportunity - Product",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e784582-58cc-4aee-aece-98065aab311a",
										"exec": [
											"try {",
											"    // Retrieve the productId and opportunityId from Postman collection variables",
											"    let productId = pm.collectionVariables.get(\"productId\");",
											"    let opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Add a test to validate the status code",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        console.log(`[Post-res ${pm.info.requestName}] Successfully associated AWS Product ID: ${productId} with Opportunity ID: ${opportunityId}`);",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to associate AWS Product ID: ${productId} with Opportunity ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"    }",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "38dc73d2-2383-44c4-af2b-7732779ce840",
										"exec": [
											"// Retrieve the productId and opportunityId from Postman collection variables",
											"const productId = pm.collectionVariables.get(\"productId\");",
											"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the action with the productId and opportunityId",
											"if (productId && opportunityId) {",
											"    console.log(`[Pre-req ${pm.info.requestName}] Associating AWS Product ID: ${productId} with Opportunity ID: ${opportunityId}`);",
											"    ",
											"} else {",
											"    console.warn(`[Pre-req ${pm.info.requestName}] Missing productId or opportunityId. Ensure both have been set before executing this action.`);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a42b3b89-098b-4c0d-b8f2-a5600fd6eb67",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"OpportunityIdentifier\": \"{{opportunityId}}\",\n   \"RelatedEntityIdentifier\": \"{{productId}}\",\n   \"RelatedEntityType\": \"AwsProducts\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/AssociateOpportunity"
							},
							"response": []
						},
						{
							"name": "StartEngagementFromOpportunityTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b75e4b5b-7753-4bd7-a37e-fbdb83713436",
										"exec": [
											"let retryInterval = 2000;",
											"",
											"try {",
											"    // Parse the response JSON",
											"    const response = pm.response.json();",
											"",
											"    // Extract response attributes",
											"    const opportunityId = response.OpportunityId || \"Unknown Opportunity\";",
											"    const taskDetails = {",
											"        TaskId: response.TaskId || \"N/A\",",
											"        TaskArn: response.TaskArn || \"N/A\",",
											"        TaskStatus: response.TaskStatus || \"N/A\"",
											"    };",
											"    let taskStatus = response.TaskStatus; ",
											"    if ( taskStatus == \"COMPLETE\") {",
											"        console.log(\"TaskStatu is COMPLETE. Continue on next request.\")",
											"    } else if (status == \"FAILED\") {",
											"        console.log(\"TaskStatu is FAILED. Stopping the RUN.\");",
											"            pm.execution.setNextRequest(null);",
											"    } else {",
											"        console.log(\"TaskStatu is not SUCCEEDED. Waiting for \" + retryInterval/1000 + \" seconds to re-check.\")",
											"        setTimeout(() => {",
											"            pm.execution.setNextRequest(pm.info.requestName);",
											"        }, retryInterval);",
											"    }",
											"",
											"    // Add tests for response validation",
											"    pm.test(`[Post-res ${pm.info.requestName}] Response structure validation`, function () {",
											"        pm.response.to.have.status(200);",
											"        pm.expect(response).to.have.property(\"OpportunityId\");",
											"        pm.expect(taskDetails.TaskStatus).to.not.equal(\"FAILED\");",
											"    });",
											"",
											"    // Add tests for individual fields",
											"    pm.test(`[Post-res ${pm.info.requestName}] Task details validation`, function () {",
											"        pm.expect(taskDetails.TaskId).to.not.equal(\"N/A\");",
											"        pm.expect(taskDetails.TaskArn).to.not.equal(\"N/A\");",
											"        pm.expect(taskDetails.TaskStatus).to.not.equal(\"N/A\");",
											"    });",
											"",
											"    // Log the action execution and task details",
											"    console.log(",
											"        `[Post-res ${pm.info.requestName}] ${pm.info.requestName} executed. Started engagement on ${opportunityId}. Task details: TaskId=${taskDetails.TaskId}, TaskArn=${taskDetails.TaskArn}, TaskStatus=${taskDetails.TaskStatus}.`",
											"    );",
											"} catch (error) {",
											"    // Handle errors during response parsing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
											"        throw error;",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3d8e9782-5f4c-476c-8fb0-b5475c22c27b",
										"exec": [
											"try {",
											"    // Step 1: Generate a truly unique Client Token",
											"    const clientToken = `${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;",
											"",
											"    // Save the generated client token as a local variable",
											"    pm.variables.set('clientToken', clientToken);",
											"    console.log(`[Pre-req ${pm.info.requestName}] Generated Client Token: ${clientToken}`);",
											"",
											"    // Step 2: Retrieve opportunityId for logging",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    if (opportunityId) {",
											"        // Log the action details for starting the engagement",
											"        console.log(`[Pre-req ${pm.info.requestName}] Starting engagement with AWS using opportunity: ${opportunityId}`);",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No opportunityId found. Ensure it has been set before executing this action.`);",
											"    }",
											"",
											"    // Log the action start",
											"    console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
											"",
											"} catch (error) {",
											"    // Handle any errors during client token generation or retrieving variables",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error occurred:`, error);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6d0dd41a-85e4-4d71-b00e-6d9911f0d7d1",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{opportunityId}}\",\n    \"ClientToken\": \"{{clientToken}}\",\n    \"AwsSubmission\": {\n        \"InvolvementType\": \"Co-Sell\",\n        \"Visibility\": \"Full\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/StartEngagementFromOpportunityTask"
							},
							"response": []
						},
						{
							"name": "GetOpportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        let responseBody = pm.response.json();",
											"",
											"        // Perform tests on the response body",
											"        pm.test(\"Response has the correct structure\", function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"            pm.expect(responseBody).to.have.property('Id');",
											"            pm.expect(responseBody.Id).to.eql(opportunityId);",
											"            // Add more property checks as needed",
											"        });",
											"",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "c0b162dd-3126-41cd-bed3-e5b153537238",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const identifier = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the start of the action with the Identifier",
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${identifier}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "00ff65e0-5991-40f4-b53c-4a0014d97ece",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
							},
							"response": []
						}
					],
					"id": "2df62c70-2ff1-4e79-83e9-0b07c00c53d9",
					"description": "This section includes APIs required to create and manage ACE opportunities initiated by partners. The workflow supports creating opportunities, associating them with solutions or products, and initiating an engagement with AWS."
				},
				{
					"name": "Simulating a Action Required",
					"item": [
						{
							"name": "GetOpportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        const responseBody = pm.response.json();",
											"",
											"        // Perform basic validation on the response",
											"        pm.test(\"Response has the correct structure\", function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"            pm.expect(responseBody).to.have.property('Id');",
											"            pm.expect(responseBody).to.have.property('LifeCycle');",
											"        });",
											"",
											"        // Store the complete response in a collection variable",
											"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored response payload for ID: ${responseBody.Id}`);",
											"",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3e834d1d-4ddb-4682-b09e-22f7c05ad4eb",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the start of the action with the Identifier",
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "cc2c3e1b-27fa-4dc0-bcf9-fe54a906c2ca",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
							},
							"response": []
						},
						{
							"name": "[Simulate] AWS changing to Action Required",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d083d5cb-5484-4b42-b239-459d88e448b4",
										"exec": [
											"try {",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        // Log success and add a test for status 200",
											"        console.log(`[Post-res ${pm.info.requestName}] UpdateOpportunity action succeeded.`);",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"    } else {",
											"        // Log failure and add a test for non-200 status",
											"        console.error(`[Post-res ${pm.info.requestName}] UpdateOpportunity action failed. Status Code: ${pm.response.code}`);",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is not 200`, function () {",
											"            pm.response.to.not.have.status(200);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"",
											"    // Add a test to capture the error",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
											"        throw error; // Ensure the test fails if an error occurs",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d6a21fbb-20ab-42e6-9f9a-c2c3135f4d7a",
										"exec": [
											"try {",
											"    // Retrieve the stored payload from the GetOpportunity action",
											"    const getOpportunityPayload = pm.collectionVariables.get(\"getOpportunityPayload\");",
											"",
											"    if (getOpportunityPayload) {",
											"        // Parse the stored payload",
											"        const payload = JSON.parse(getOpportunityPayload);",
											"",
											"        // Transform the payload for UpdateOpportunity",
											"        payload.Identifier = payload.Id; // Rename \"Id\" to \"Identifier\"",
											"        delete payload.Id; // Remove the original \"Id\" field",
											"        payload.LifeCycle.ReviewStatus = \"Action Required\"; // Update ReviewStatus",
											"        payload.LifeCycle.ReviewComments = \"Please update the customer business problem to give more details\"; // Update ReviewComments",
											"",
											"        // Set the modified payload as the request body",
											"        pm.request.body.raw = JSON.stringify(payload);",
											"        console.log(`[Pre-req ${pm.info.requestName}] Transformed payload for UpdateOpportunity:`, payload);",
											"",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No payload found from GetOpportunity. Ensure the previous request executed successfully.`);",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during payload transformation",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request payload:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2b39d22d-e173-4527-a97f-1a3ba8bd3da8",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+14444444444\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": \"Review comments go here\",\n    \"ReviewStatus\": \"Action Required\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Prospect\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/UpdateOpportunity"
							},
							"response": []
						},
						{
							"name": "GetOpportunity to see reviewer comments",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse and validate the response",
											"        const responseBody = pm.response.json();",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Validate Opportunity attributes`, function () {",
											"            pm.expect(responseBody).to.have.property('Id');",
											"            pm.expect(responseBody).to.have.property('LifeCycle');",
											"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewStatus', 'Action Required');",
											"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewComments').that.is.not.empty;",
											"        });",
											"",
											"        // Store the complete response for subsequent requests",
											"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored updated Opportunity payload for ID: ${responseBody.Id}`);",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve updated Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f926d538-8031-4f26-bcce-8a09fa162897",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    if (opportunityId) {",
											"        console.log(`[Pre-req ${pm.info.requestName}] Fetching updated Opportunity with ID: ${opportunityId}`);",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No opportunityId found. Ensure it has been set before executing this action.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during pre-request execution",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e1bd61f2-f100-484e-92ca-38d7ba0ac354",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
							},
							"response": []
						},
						{
							"name": "UpdateOpportunity as Partner",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d083d5cb-5484-4b42-b239-459d88e448b4",
										"exec": [
											"try {",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] UpdateOpportunity action succeeded`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Log success",
											"        console.log(`[Post-res ${pm.info.requestName}] Successfully updated Opportunity.`);",
											"    } else {",
											"        // Log failure",
											"        console.error(`[Post-res ${pm.info.requestName}] UpdateOpportunity action failed. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Update failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "6082a3ea-a808-4fc3-9311-ba5678f0f7b0",
										"exec": [
											"try {",
											"    // Retrieve the stored Opportunity payload",
											"    const getOpportunityPayload = pm.collectionVariables.get(\"getOpportunityPayload\");",
											"",
											"    if (getOpportunityPayload) {",
											"        // Parse the payload",
											"        const payload = JSON.parse(getOpportunityPayload);",
											"",
											"        // Update the necessary fields",
											"        payload.Identifier = payload.Id; // Rename \"Id\" to \"Identifier\"",
											"        delete payload.Id; // Remove the original \"Id\" field",
											"        payload.Project = payload.Project || {}; // Ensure Project exists",
											"        payload.Project.CustomerBusinessProblem = \"Updated with additional details about the customer problem\"; // Update CustomerBusinessProblem",
											"",
											"        // Set the modified payload as the request body",
											"        pm.request.body.raw = JSON.stringify(payload);",
											"        console.log(`[Pre-req ${pm.info.requestName}] Transformed payload for UpdateOpportunity:`, payload);",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No payload found from GetOpportunity. Ensure the previous request executed successfully.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during payload preparation",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request payload:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "37047101-f982-4560-89d3-525dc094c25e",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+14444444444\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": null,\n    \"ReviewStatus\": \"Action Required\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Prospect\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/UpdateOpportunity"
							},
							"response": []
						},
						{
							"name": "GetOpportunityToVerify",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        const responseBody = pm.response.json();",
											"",
											"        // Validate the updated CustomerBusinessProblem",
											"        const expectedProblem = \"Updated with additional details about the customer problem\";",
											"        pm.test(`[Post-res ${pm.info.requestName}] Validate updated CustomerBusinessProblem`, function () {",
											"            pm.expect(responseBody).to.have.property('Project');",
											"            pm.expect(responseBody.Project).to.have.property('CustomerBusinessProblem', expectedProblem);",
											"        });",
											"",
											"        // Log the success",
											"        console.log(`[Post-res ${pm.info.requestName}] Successfully validated updated CustomerBusinessProblem for Opportunity ID: ${opportunityId}`);",
											"        console.log(`[Post-res ${pm.info.requestName}] Updated CustomerBusinessProblem: ${responseBody.Project.CustomerBusinessProblem}`);",
											"    } else {",
											"        // Log the failure",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5dbbd8bc-fe0b-42d9-85d3-f6cc2f93d93f",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    if (opportunityId) {",
											"        console.log(`[Pre-req ${pm.info.requestName}] Fetching updated Opportunity with ID: ${opportunityId}`);",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No opportunityId found. Ensure it has been set before executing this action.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during pre-request execution",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2e1419c7-5eb5-4558-a31d-413f857477ff",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
							},
							"response": []
						}
					],
					"id": "0b73715f-9656-43aa-8c28-0a93745734e0",
					"description": "These APIs simulate scenarios where an opportunity is moved to an \"Action Required\" state. The workflow involves reviewing the opportunity, updating it, and verifying the changes as a partner. Remember that the requests tagged as \\[Simulate\\] is only available in the `Sandbox` catalog, and not in the `AWS` catalog."
				},
				{
					"name": "Simulating the Approval",
					"item": [
						{
							"name": "GetOpportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        const responseBody = pm.response.json();",
											"",
											"        // Perform basic validation on the response",
											"        pm.test(\"Response has the correct structure\", function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"            pm.expect(responseBody).to.have.property('Id');",
											"            pm.expect(responseBody).to.have.property('LifeCycle');",
											"        });",
											"",
											"        // Store the complete response in a collection variable",
											"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        pm.variables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored response payload for ID: ${responseBody.Id}`);",
											"",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b15cc49a-c66b-418d-9c96-f49e9da4ca00",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the start of the action with the Identifier",
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "082df928-63e3-4bb1-8097-5423f443b738",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
							},
							"response": []
						},
						{
							"name": "[Simulate] Approval from AWS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d083d5cb-5484-4b42-b239-459d88e448b4",
										"exec": [
											"try {",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        // Log success and add a test for status 200",
											"        console.log(`[Post-res ${pm.info.requestName}] UpdateOpportunity action succeeded.`);",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"    } else {",
											"        // Log failure and add a test for non-200 status",
											"        console.error(`[Post-res ${pm.info.requestName}] UpdateOpportunity action failed. Status Code: ${pm.response.code}`);",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is not 200`, function () {",
											"            pm.response.to.not.have.status(200);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"",
											"    // Add a test to capture the error",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
											"        throw error; // Ensure the test fails if an error occurs",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "04127e8e-4299-4a8b-84a0-aa8e1aa90973",
										"exec": [
											"try {",
											"    // Retrieve the stored payload from the GetOpportunity action",
											"    const getOpportunityPayload = pm.collectionVariables.get(\"getOpportunityPayload\") || pm.variables.get(\"getOpportunityPayload\");",
											"",
											"    if (getOpportunityPayload) {",
											"        // Parse the stored payload",
											"        const payload = JSON.parse(getOpportunityPayload);",
											"",
											"        // Transform the payload for UpdateOpportunity",
											"        payload.Identifier = payload.Id; // Rename \"Id\" to \"Identifier\"",
											"        delete payload.Id; // Remove the original \"Id\" field",
											"        payload.LifeCycle.ReviewStatus = \"Approved\"; // Update to Approved",
											"",
											"        // Set the modified payload as the request body",
											"        pm.request.body.raw = JSON.stringify(payload);",
											"        console.log(`[Pre-req ${pm.info.requestName}] Transformed payload for UpdateOpportunity:`, payload);",
											"",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No payload found from GetOpportunity. Ensure the previous request executed successfully.`);",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during payload transformation",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request payload:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "7f1c7d32-aeec-4702-aab2-896a65cdf74b",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+14444444444\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": null,\n    \"ReviewStatus\": \"Approved\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Qualified\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/UpdateOpportunity"
							},
							"response": []
						},
						{
							"name": "[Simulate] Approval from AWS - Notebook",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d083d5cb-5484-4b42-b239-459d88e448b4",
										"exec": [
											"try {",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        // Log success and add a test for status 200",
											"        console.log(`[Post-res ${pm.info.requestName}] UpdateOpportunity action succeeded.`);",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"    } else {",
											"        // Log failure and add a test for non-200 status",
											"        console.error(`[Post-res ${pm.info.requestName}] UpdateOpportunity action failed. Status Code: ${pm.response.code}`);",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is not 200`, function () {",
											"            pm.response.to.not.have.status(200);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"",
											"    // Add a test to capture the error",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
											"        throw error; // Ensure the test fails if an error occurs",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "04127e8e-4299-4a8b-84a0-aa8e1aa90973",
										"exec": [
											"try {",
											"    // Retrieve the stored payload from the GetOpportunity action",
											"    const getOpportunityPayload = pm.collectionVariables.get(\"getOpportunityPayload\") || pm.variables.get(\"getOpportunityPayload\");",
											"",
											"    if (getOpportunityPayload) {",
											"        // Parse the stored payload",
											"        const payload = JSON.parse(getOpportunityPayload);",
											"",
											"        // Transform the payload for UpdateOpportunity",
											"        payload.Identifier = payload.Id; // Rename \"Id\" to \"Identifier\"",
											"        delete payload.Id; // Remove the original \"Id\" field",
											"        payload.LifeCycle.ReviewStatus = \"Approved\"; // Update to Approved",
											"",
											"        // Set the modified payload as the request body",
											"        pm.request.body.raw = JSON.stringify(payload);",
											"        console.log(`[Pre-req ${pm.info.requestName}] Transformed payload for UpdateOpportunity:`, payload);",
											"",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No payload found from GetOpportunity. Ensure the previous request executed successfully.`);",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during payload transformation",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request payload:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8b220e3e-125b-4610-a9ab-a3d0fbaf6d0b",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{opportunityPayload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/UpdateOpportunity"
							},
							"response": []
						},
						{
							"name": "GetOpportunityToVerify",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        const responseBody = pm.response.json();",
											"",
											"        // Validate the updated ReviewStatus",
											"        const expectedStatus = \"Approved\";",
											"        pm.test(`[Post-res ${pm.info.requestName}] Validate updated ReviewStatus`, function () {",
											"            pm.expect(responseBody).to.have.property('LifeCycle');",
											"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewStatus', expectedStatus);",
											"        });",
											"        // Store the complete response in a collection variable",
											"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        pm.variables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        // Log the success",
											"        console.log(`[Post-res ${pm.info.requestName}] Successfully validated updated ReviewStatus for Opportunity ID: ${opportunityId}`);",
											"        console.log(`[Post-res ${pm.info.requestName}] Updated ReviewStatus: ${responseBody.LifeCycle.ReviewStatus}`);",
											"    } else {",
											"        // Log the failure",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "a537fd8c-3c19-4393-a967-be37842ee2e5",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    if (opportunityId) {",
											"        console.log(`[Pre-req ${pm.info.requestName}] Fetching updated Opportunity with ID: ${opportunityId}`);",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No opportunityId found. Ensure it has been set before executing this action.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during pre-request execution",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "1fb0e17e-3041-47db-bf98-109f8d6c0d94",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
							},
							"response": []
						},
						{
							"name": "GetAwsOpportunitySummary",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2575422-0d49-47a4-b1f2-2a94994f3459",
										"exec": [
											"try {",
											"    // Parse the response body",
											"    let responseBody = pm.response.json();",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${responseBody.Id}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Perform tests on the response body",
											"        pm.test(\"Response has the correct structure\", function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"            pm.expect(responseBody).to.have.property('RelatedOpportunityId');",
											"            pm.expect(responseBody.RelatedOpportunityId).to.eql(opportunityId);",
											"            pm.expect(responseBody).to.have.property('Origin');",
											"            pm.expect(responseBody.Origin).to.eql('Partner Referral');",
											"            // Add more property checks as needed",
											"        });",
											"",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message, error.code);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d7562e69-0e5d-4d00-b332-1b8d7ace9207",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the start of the action with the Identifier",
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "aea576e9-e7db-466b-ae89-7094d022dce6",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"RelatedOpportunityIdentifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetAwsOpportunitySummary",
								"description": "Retrieves a summary of an AWS Opportunity. This summary includes high-level details about the opportunity sourced from AWS, such as lifecycle information, customer details, and involvement type. It is useful for tracking updates on the AWS opportunity corresponding to an opportunity in the partner's account."
							},
							"response": []
						}
					],
					"id": "d8438ca7-829e-41d8-bfe1-03faeeb30dcd",
					"description": "This folder helps simulate the approval process for opportunities by AWS. It includes actions to fetch opportunity details, simulate AWS's approval, and verify the updated state. Remember that the requests tagged as \\[Simulate\\] is only available in the `Sandbox` catalog, and not in the `AWS` catalog."
				},
				{
					"name": "Updating to Technical Validation Stage",
					"item": [
						{
							"name": "GetOpportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        const responseBody = pm.response.json();",
											"",
											"        // Perform basic validation on the response",
											"        pm.test(\"Response has the correct structure\", function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"            pm.expect(responseBody).to.have.property('Id');",
											"            pm.expect(responseBody).to.have.property('LifeCycle');",
											"        });",
											"",
											"        // Store the complete response in a collection variable",
											"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored response payload for ID: ${responseBody.Id}`);",
											"",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b15cc49a-c66b-418d-9c96-f49e9da4ca00",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the start of the action with the Identifier",
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2df816d1-9a7d-414a-930a-e9f4aad44d86",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
							},
							"response": []
						},
						{
							"name": "UpdateOpportunity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3f66b338-4d44-4084-9f9a-cd06ae71bb28",
										"exec": [
											"try {",
											"    // Retrieve the stored Opportunity payload",
											"    const getOpportunityPayload = pm.collectionVariables.get(\"getOpportunityPayload\");",
											"",
											"    if (getOpportunityPayload) {",
											"        // Parse the payload",
											"        const payload = JSON.parse(getOpportunityPayload);",
											"",
											"        // Update the necessary fields",
											"        payload.Identifier = payload.Id; // Rename \"Id\" to \"Identifier\"",
											"        delete payload.Id; // Remove the original \"Id\" field",
											"        //payload.Customer.Account.Address.PostalCode = null;",
											"        //payload.Project.DeliveryModels = [\"Other\"];",
											"        payload.Project = payload.Project || {}; // Ensure Project exists",
											"        payload.LifeCycle.Stage = \"Technical Validation\";",
											"        // Set the modified payload as the request body",
											"        pm.request.body.raw = JSON.stringify(payload);",
											"        console.log(`[Pre-req ${pm.info.requestName}] Transformed payload for UpdateOpportunity:`, payload);",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No payload found from GetOpportunity. Ensure the previous request executed successfully.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during payload preparation",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request payload:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ea1198a-5e78-4ca6-b255-83f9b2000c04",
										"exec": [
											"try {",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] UpdateOpportunity action succeeded`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Log success",
											"        console.log(`[Post-res ${pm.info.requestName}] Successfully updated Opportunity.`);",
											"    } else {",
											"        // Log failure",
											"        console.error(`[Post-res ${pm.info.requestName}] UpdateOpportunity action failed. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Update failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d2aec819-371e-43f1-8db3-2aa2d8f3f7ed",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+14444444444\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": null,\n    \"ReviewStatus\": \"Action Required\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Prospect\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/UpdateOpportunity"
							},
							"response": [
								{
									"id": "6aa9fcae-6901-4e20-afe4-919a230b4ea3",
									"name": "UpdateOpportunity",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+14444444444\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": null,\n    \"ReviewStatus\": \"Action Required\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Technical Validation\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BASE_URL}}/UpdateOpportunity"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Fri, 24 Jan 2025 21:00:04 GMT",
											"enabled": true
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										},
										{
											"key": "Content-Length",
											"value": "59",
											"enabled": true
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"enabled": true
										},
										{
											"key": "x-amzn-RequestId",
											"value": "04126ce4-48c8-48bc-a3a3-398fc1f07470",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"Id\": \"O5037173\",\n    \"LastModifiedDate\": \"2025-01-24T21:00:03Z\"\n}"
								}
							]
						},
						{
							"name": "UpdateOpportunity - Notebook",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d083d5cb-5484-4b42-b239-459d88e448b4",
										"exec": [
											"try {",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        // Log success and add a test for status 200",
											"        console.log(`[Post-res ${pm.info.requestName}] UpdateOpportunity action succeeded.`);",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"    } else {",
											"        // Log failure and add a test for non-200 status",
											"        console.error(`[Post-res ${pm.info.requestName}] UpdateOpportunity action failed. Status Code: ${pm.response.code}`);",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is not 200`, function () {",
											"            pm.response.to.not.have.status(200);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"",
											"    // Add a test to capture the error",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
											"        throw error; // Ensure the test fails if an error occurs",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "04127e8e-4299-4a8b-84a0-aa8e1aa90973",
										"exec": [
											"try {",
											"    // Retrieve the stored payload from the GetOpportunity action",
											"    const getOpportunityPayload = pm.collectionVariables.get(\"getOpportunityPayload\") || pm.variables.get(\"getOpportunityPayload\");",
											"",
											"    if (getOpportunityPayload) {",
											"        // Parse the stored payload",
											"        const payload = JSON.parse(getOpportunityPayload);",
											"",
											"        // Transform the payload for UpdateOpportunity",
											"        payload.Identifier = payload.Id; // Rename \"Id\" to \"Identifier\"",
											"        delete payload.Id; // Remove the original \"Id\" field",
											"        payload.LifeCycle.ReviewStatus = \"Approved\"; // Update to Approved",
											"",
											"        // Set the modified payload as the request body",
											"        pm.request.body.raw = JSON.stringify(payload);",
											"        console.log(`[Pre-req ${pm.info.requestName}] Transformed payload for UpdateOpportunity:`, payload);",
											"",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No payload found from GetOpportunity. Ensure the previous request executed successfully.`);",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during payload transformation",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request payload:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5c056d04-28f1-4c8f-a6db-3c5128f2103f",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{opportunityPayload}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/UpdateOpportunity"
							},
							"response": []
						},
						{
							"name": "GetOpportunity check stage",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        const responseBody = pm.response.json();",
											"",
											"        // Perform basic validation on the response",
											"        pm.test(\"Response has the correct structure\", function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"            pm.expect(responseBody).to.have.property('Id');",
											"            pm.expect(responseBody).to.have.property('LifeCycle');",
											"        });",
											"",
											"        // Store the complete response in a collection variable",
											"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored response payload for ID: ${responseBody.Id}`);",
											"",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "b15cc49a-c66b-418d-9c96-f49e9da4ca00",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the start of the action with the Identifier",
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "81ab8ddd-289a-49ad-ad6b-07aed5ae89a9",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
							},
							"response": []
						}
					],
					"id": "a5825086-ea2d-4d11-bfa1-ad73f5505f87"
				}
			],
			"id": "39c38399-8536-425c-943d-0ebb42fa29f2",
			"description": "Partners can manage opportunities created within their CRM systems and synchronize them with AWS Partner Central using the AWS Partner Central Selling API. This allows partners to track and manage opportunities from initiation to closure.\n\nHere is the workflow of working with [partner originated opportunities](https://docs.aws.amazon.com/partner-central/latest/APIReference/working-with-your-opportunities.html):\n\n<img src=\"https://content.pstmn.io/2893af2a-7554-432e-b852-9c8677b3e74d/U2NyZWVuc2hvdCAyMDI1LTAyLTEwIGF0IDUuMTQuNTLigK9QTS5wbmc=\" alt=\"Partner%20Originated%20Opportunity\" width=\"1647\" height=\"921\">"
		},
		{
			"name": "Working with Multipartner Opportunities",
			"item": [
				{
					"name": "Inviting Partner - CreateOpportunity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e9bce14-d7ed-4a18-93c1-8fbb4b78273e",
								"exec": [
									"try {",
									"     opportunityId = pm.response.json().Id;",
									"",
									"    // Save the opportunityId to a collection variable",
									"    pm.collectionVariables.set('opportunityId', opportunityId);",
									"",
									"    // Log the opportunity creation",
									"    console.log(`Created opportunity with ID ${opportunityId}`);",
									"",
									"    // Add a test to validate the opportunityId extraction",
									"    pm.test(`[Post-res ${pm.info.requestName}] Validate opportunity ID extraction`, function () {",
									"        pm.response.to.have.status(200); // Ensure the response status is 200",
									"        pm.expect(opportunityId).to.exist; // Ensure opportunityId exists",
									"        pm.expect(opportunityId).to.not.be.empty; // Ensure opportunityId is not empty",
									"        console.log(`[Post-res ${pm.info.requestName}] Opportunity ID ${opportunityId} successfully extracted and stored.`);",
									"    });",
									"",
									"} catch (error) {",
									"    // Handle any additional errors",
									"    console.error(`[${pm.info.requestName}] Failed to extract response data:`, error);",
									"",
									"    // Add a test to capture the error",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
									"        throw error; // Fail the test if an error occurs",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "0f3a39db-eb57-42fc-aab0-14ad9007da60",
								"exec": [
									"try {",
									"    // Step 1: Generate Client Token",
									"    const clientToken = pm.variables.replaceIn('{{$randomUUID}}')",
									"",
									"    // Save the generated client token as a local variable",
									"    pm.variables.set('clientToken', pm.variables.replaceIn('{{$randomUUID}}'));",
									"    console.log(`[${pm.info.requestName}] Generated Client Token: ${clientToken}`);",
									"",
									"    // Step 2: Generate Opportunity Details",
									"    const requestTitle = \"New Business Deal\"; // Base title for the opportunity",
									"    const opportunityAmount = Math.floor(Math.random() * (32000 - 12000 + 1)) + 12000; // Random amount between 12000 and 32000",
									"    const randomSuffix = Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000; // Random 4-digit number",
									"    const opportunityTitle = `${requestTitle} - ${randomSuffix}`;",
									"    console.log(`amount ${opportunityAmount} random suffix ${randomSuffix} opportunity title ${opportunityTitle}`);",
									"",
									"    // Save the generated opportunity details as local variables",
									"    pm.variables.set('opportunityTitle', opportunityTitle);",
									"    pm.variables.set('opportunityAmount', opportunityAmount);",
									"    console.log(`[${pm.info.requestName}] Generated Opportunity Title: ${opportunityTitle}`);",
									"    console.log(`[${pm.info.requestName}] Generated Opportunity Amount: ${opportunityAmount}`);",
									"} catch (error) {",
									"    // Handle any errors during token generation or opportunity detail generation",
									"    console.error(`[${pm.info.requestName}] Error occurred:`, error);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "43008241-cbbc-46ac-84ef-1d95b32e3bc8",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ClientToken\": \"{{clientToken}}\",\n    \"Catalog\": \"{{catalog}}\",\n    \"Origin\": \"Partner Referral\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": null,\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": null\n            },\n            \"AwsAccountId\": \"111111111111\",\n            \"CompanyName\": \"ValidAWSCreate\",\n            \"Duns\": \"111100111\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": null,\n            \"WebsiteUrl\": \"www.test.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Executive\",\n                \"Email\": \"test@test.com\",\n                \"FirstName\": \"TestContact011\",\n                \"LastName\": \"MLastName001\",\n                \"Phone\": \"+14444444444\"\n            }\n        ]\n    },\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Pending Submission\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Prospect\",\n        \"TargetCloseDate\": \"2029-10-05\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": \"Yes\",\n        \"CampaignName\": \"TestCampaignName01\",\n        \"Channels\": [\n            \"Content Syndication\"\n        ],\n        \"Source\": \"Marketing Activity\",\n        \"UseCases\": [\n            \"Analytics\"\n        ]\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"testemail@test.com\",\n            \"FirstName\": \"TestContact001\",\n            \"LastName\": \"CLastName001\",\n            \"Phone\": \"+14444444444\"\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Architectural Validation\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": \"On-Prem\",\n        \"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n        \"CustomerUseCase\": \"Security & Compliance\",\n        \"DeliveryModels\": [\n            \"SaaS or PaaS\"\n        ],\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"12500\",\n                \"CurrencyCode\": \"USD\",\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": \"TestSolution\",\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Conducted POC / Demo\"\n        ],\n        \"Title\": \"{{opportunityTitle}}\"\n    },\n    \"SoftwareRevenue\": {}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/CreateOpportunity"
					},
					"response": [
						{
							"id": "c0e963ec-f35a-419e-8d85-a20a3e227344",
							"name": "Inviting Partner - CreateOpportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ClientToken\": \"{{clientToken}}\",\n    \"Catalog\": \"{{catalog}}\",\n    \"Origin\": \"Partner Referral\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": null,\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": null\n            },\n            \"AwsAccountId\": \"111111111111\",\n            \"CompanyName\": \"ValidAWSCreate\",\n            \"Duns\": \"111100111\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": null,\n            \"WebsiteUrl\": \"www.test.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Executive\",\n                \"Email\": \"test@test.com\",\n                \"FirstName\": \"TestContact011\",\n                \"LastName\": \"MLastName001\",\n                \"Phone\": \"+14444444444\"\n            }\n        ]\n    },\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Pending Submission\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Prospect\",\n        \"TargetCloseDate\": \"2029-10-05\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": \"Yes\",\n        \"CampaignName\": \"TestCampaignName01\",\n        \"Channels\": [\n            \"Content Syndication\"\n        ],\n        \"Source\": \"Marketing Activity\",\n        \"UseCases\": [\n            \"Analytics\"\n        ]\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"testemail@test.com\",\n            \"FirstName\": \"TestContact001\",\n            \"LastName\": \"CLastName001\",\n            \"Phone\": \"+14444444444\"\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Architectural Validation\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": \"On-Prem\",\n        \"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n        \"CustomerUseCase\": \"Security & Compliance\",\n        \"DeliveryModels\": [\n            \"SaaS or PaaS\"\n        ],\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"12500\",\n                \"CurrencyCode\": \"USD\",\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": \"TestSolution\",\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Conducted POC / Demo\"\n        ],\n        \"Title\": \"{{opportunityTitle}}\"\n    },\n    \"SoftwareRevenue\": {}\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/CreateOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 15 Feb 2025 17:54:41 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "95",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "95c238c9-50c7-41c9-8d5e-bd7f1c659f17",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Id\": \"O5408941\",\n    \"LastModifiedDate\": \"2025-02-15T17:54:40Z\",\n    \"PartnerOpportunityIdentifier\": null\n}"
						}
					]
				},
				{
					"name": "Inviting Partner - StartEngagementFromOpportunityTask",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "93bcb54d-874f-4263-9f7a-daefe147409d",
								"exec": [
									"try {",
									"    // Parse the response JSON",
									"    const response = pm.response.json();",
									"",
									"    // Extract response attributes",
									"    const opportunityId = response.OpportunityId || \"Unknown Opportunity\";",
									"    const taskDetails = {",
									"        TaskId: response.TaskId || \"N/A\",",
									"        TaskArn: response.TaskArn || \"N/A\",",
									"        TaskStatus: response.TaskStatus || \"N/A\"",
									"    };",
									"    pm.collectionVariables.set(\"engagementId\", response.EngagementId);",
									"    pm.collectionVariables.set(\"taskId\", response.TaskId);",
									"",
									"    let taskStatus = response.TaskStatus; ",
									"    if ( taskStatus == \"COMPLETE\") {",
									"        console.log(\"TaskStatu is COMPLETE. Continue on next request.\")",
									"    } else if (status == \"FAILED\") {",
									"        console.log(\"TaskStatu is FAILED. Stopping the RUN.\");",
									"            pm.execution.setNextRequest(null);",
									"    } else {",
									"        console.log(\"TaskStatu is not COMPLETE. Waiting for \" + retryInterval/1000 + \" seconds to re-check.\")",
									"        setTimeout(() => {",
									"            pm.execution.setNextRequest(pm.info.requestName);",
									"        }, retryInterval);",
									"    }",
									"    ",
									"    // Add tests for response validation",
									"    pm.test(`[Post-res ${pm.info.requestName}] Response structure validation`, function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(response).to.have.property(\"OpportunityId\");",
									"        pm.expect(taskDetails.TaskStatus).to.not.equal(\"FAILED\");",
									"    });",
									"",
									"    // Add tests for individual fields",
									"    pm.test(`[Post-res ${pm.info.requestName}] Task details validation`, function () {",
									"        pm.expect(taskDetails.TaskId).to.not.equal(\"N/A\");",
									"        pm.expect(taskDetails.TaskArn).to.not.equal(\"N/A\");",
									"        pm.expect(taskDetails.TaskStatus).to.not.equal(\"N/A\");",
									"    });",
									"",
									"    // Log the action execution and task details",
									"    console.log(",
									"        `[Post-res ${pm.info.requestName}] ${pm.info.requestName} executed. Started engagement on ${opportunityId}. Task details: TaskId=${taskDetails.TaskId}, TaskArn=${taskDetails.TaskArn}, TaskStatus=${taskDetails.TaskStatus}.`",
									"    );",
									"} catch (error) {",
									"    // Handle errors during response parsing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
									"        throw error;",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4db7d91b-a44b-45ab-9067-32caff4d0918",
								"exec": [
									"try {",
									"    // Step 1: Generate a truly unique Client Token",
									"    const clientToken = `${Date.now()}-${Math.random().toString(36).substring(2, 15)}`;",
									"",
									"    // Save the generated client token as a local variable",
									"    pm.variables.set('clientToken', clientToken);",
									"    console.log(`[Pre-req ${pm.info.requestName}] Generated Client Token: ${clientToken}`);",
									"",
									"    // Step 2: Retrieve opportunityId for logging",
									"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
									"",
									"    if (opportunityId) {",
									"        // Log the action details for starting the engagement",
									"        console.log(`[Pre-req ${pm.info.requestName}] Starting engagement with AWS using opportunity: ${opportunityId}`);",
									"    } else {",
									"        console.warn(`[Pre-req ${pm.info.requestName}] No opportunityId found. Ensure it has been set before executing this action.`);",
									"    }",
									"",
									"    // Log the action start",
									"    console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
									"",
									"} catch (error) {",
									"    // Handle any errors during client token generation or retrieving variables",
									"    console.error(`[Pre-req ${pm.info.requestName}] Error occurred:`, error);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "352cf23a-992e-48e5-9fe9-f4df4f3cea79",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{opportunityId}}\",\n    \"ClientToken\": \"{{clientToken}}\",\n    \"AwsSubmission\": {\n        \"InvolvementType\": \"Co-Sell\",\n        \"Visibility\": \"Full\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/StartEngagementFromOpportunityTask"
					},
					"response": [
						{
							"id": "4a52dc73-4745-4ef1-9f2c-55b42458d730",
							"name": "Inviting Partner - StartEngagementFromOpportunityTask",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{opportunityId}}\",\n    \"ClientToken\": \"{{clientToken}}\",\n    \"AwsSubmission\": {\n        \"InvolvementType\": \"Co-Sell\",\n        \"Visibility\": \"Full\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/StartEngagementFromOpportunityTask"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 15 Feb 2025 20:37:17 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "399",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "75a46e8f-b4dc-4ad4-b107-69d0ecf3e9d5",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"EngagementId\": \"eng-aw5093t842oqqt\",\n    \"EngagementInvitationId\": \"engi-fiqoy0awyqun2\",\n    \"Message\": null,\n    \"OpportunityId\": \"O5408941\",\n    \"ReasonCode\": null,\n    \"ResourceSnapshotJobId\": \"job-tb8lusn41h2eb\",\n    \"StartTime\": \"2025-02-15T20:37:10.90592938Z\",\n    \"TaskArn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-from-opportunity-task/task-1z5yaau8pu5k8\",\n    \"TaskId\": \"task-1z5yaau8pu5k8\",\n    \"TaskStatus\": \"COMPLETE\"\n}"
						}
					]
				},
				{
					"name": "Inviting Partner - ListEngagementResourceAssociations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71531857-ca03-45c3-8739-7a7593585860",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
									"    const firstEngagement = response.EngagementResourceAssociationSummaries[0];",
									"        let engagementId = firstEngagement.EngagementId;",
									"",
									"        // Save the Id to a Postman variable",
									"        pm.collectionVariables.set(\"engagementId\", engagementId);",
									"",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e7362e5-c729-4346-8307-61e370d79817",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "147ac083-57ec-4fbb-8eb6-3e976d4c1b71",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"ResourceType\": \"Opportunity\",\n\t\"ResourceIdentifier\": \"{{opportunityId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListEngagementResourceAssociations",
						"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html)"
					},
					"response": [
						{
							"id": "af16c50a-1e55-49dc-9ba5-b3b82320e8dd",
							"name": "Inviting Partner - ListEngagementResourceAssociations",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"ResourceType\": \"Opportunity\",\n\t\"ResourceIdentifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagementResourceAssociations"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 15 Feb 2025 20:37:51 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "199",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "742157dc-c31c-4062-b6a4-262ac681f477",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"EngagementResourceAssociationSummaries\": [\n        {\n            \"Catalog\": \"Sandbox\",\n            \"CreatedBy\": \"6969696969\",\n            \"EngagementId\": \"eng-aw5093t842oqqt\",\n            \"ResourceId\": \"O5408941\",\n            \"ResourceType\": \"Opportunity\"\n        }\n    ],\n    \"NextToken\": null\n}"
						}
					]
				},
				{
					"name": "Inviting Partner - ListEngagementFromOpportunityTasks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71531857-ca03-45c3-8739-7a7593585860",
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
									"    const firstEngagement = response.TaskSummaries[0];",
									"        let engagementId = firstEngagement.EngagementId;",
									"",
									"        // Save the Id to a Postman variable",
									"        pm.collectionVariables.set(\"engagementId\", engagementId);",
									"",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e7362e5-c729-4346-8307-61e370d79817",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e3dbaf4a-c94d-45f2-a7cc-189be302e8ad",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"OpportunityIdentifier\": [\"{{opportunityId}}\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListEngagementFromOpportunityTasks",
						"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html)"
					},
					"response": [
						{
							"id": "511377f1-4ee1-4a31-a8e5-979cb530fe87",
							"name": "Inviting Partner - ListEngagementOpportunityTasks",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"TaskIdentifier\": [\"{{taskId}}\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagementFromOpportunityTasks"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Mon, 17 Feb 2025 19:17:59 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "1066",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "d1f4d51c-aa73-405f-875f-c83ff3fbe50e",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"NextToken\": \"AAMA-EFRSURBSGd3UFpqL0JaWWd5TFQ2RHRwRTc1QmVLM\",\n    \"TaskSummaries\": [\n        {\n            \"EngagementId\": \"eng-aw5093t842oqqt\",\n            \"EngagementInvitationId\": \"engi-fiqoy0awyqun2\",\n            \"Message\": null,\n            \"OpportunityId\": \"O5408941\",\n            \"ReasonCode\": null,\n            \"ResourceSnapshotJobId\": \"job-tb8lusn41h2eb\",\n            \"StartTime\": \"2025-02-15T20:37:10.89115219Z\",\n            \"TaskArn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-from-opportunity-task/task-1z5yaau8pu5k8\",\n            \"TaskId\": \"task-1z5yaau8pu5k8\",\n            \"TaskStatus\": \"COMPLETE\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Inviting Partner - CreateEngagementInvitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c1e283f-a239-4d0c-b293-eee8f88e5bd0",
								"exec": [
									"try {",
									"   ",
									"    let acceptingEngagementInvitationID =  pm.response.json().Id;",
									"",
									"    // Save the opportunityId to a collection variable",
									"    pm.collectionVariables.set(\"acceptingEngagementInvitationID\", acceptingEngagementInvitationID);",
									"",
									"    // Log the opportunity creation",
									"    console.log(`Created engagementInvitation with ID ${acceptingEngagementInvitationID}`);",
									"",
									"    // Add a test to validate the opportunityId extraction",
									"    pm.test(`[Post-res ${pm.info.requestName}] Validate engagementInvitation ID extraction`, function () {",
									"        pm.response.to.have.status(200); // Ensure the response status is 200",
									"        pm.expect(acceptingEngagementInvitationID).to.exist; // Ensure engagementInvitationId exists",
									"        pm.expect(acceptingEngagementInvitationID).to.not.be.empty; // Ensure engagementInvitationId is not empty",
									"        console.log(`[Post-res ${pm.info.requestName}] Engagement Invitation ID ${acceptingEngagementInvitationID} successfully extracted and stored.`);",
									"    });",
									"",
									"} catch (error) {",
									"    // Handle any additional errors",
									"    console.error(`[${pm.info.requestName}] Failed to extract response data:`, error);",
									"",
									"    // Add a test to capture the error",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
									"        throw error; // Fail the test if an error occurs",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "e8811bb5-c353-42bd-862f-a4e9b227d1b6",
								"exec": [
									"try {",
									"    // Step 1: Generate Client Token",
									"    const clientToken = pm.variables.replaceIn('{{$randomUUID}}')",
									"",
									"    // Save the generated client token as a local variable",
									"    pm.variables.set('clientToken', pm.variables.replaceIn('{{$randomUUID}}'));",
									"    console.log(`[${pm.info.requestName}] Generated Client Token: ${clientToken}`);",
									"",
									"    // Step 2: Generate Opportunity Details",
									"    const requestTitle = \"New Business Deal\"; // Base title for the opportunity",
									"    const opportunityAmount = Math.floor(Math.random() * (32000 - 12000 + 1)) + 12000; // Random amount between 12000 and 32000",
									"    const randomSuffix = Math.floor(Math.random() * (9999 - 1000 + 1)) + 1000; // Random 4-digit number",
									"    const opportunityTitle = `${requestTitle} - ${randomSuffix}`;",
									"    console.log(`amount ${opportunityAmount} random suffix ${randomSuffix} opportunity title ${opportunityTitle}`);",
									"",
									"    // Save the generated opportunity details as local variables",
									"    pm.variables.set('opportunityTitle', opportunityTitle);",
									"    pm.variables.set('opportunityAmount', opportunityAmount);",
									"} catch (error) {",
									"    // Handle any errors during token generation or opportunity detail generation",
									"    console.error(`[${pm.info.requestName}] Error occurred:`, error);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "485dcd34-eefa-4d6e-8b4d-6864c35de108",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"ClientToken\": \"{{$guid}}\",\n    \"Catalog\": \"{{catalog}}\",\n    \"EngagementIdentifier\": \"{{engagementId}}\",\n    \"Invitation\": { \n        \"Message\": \"My Test Message\",\n        \"Receiver\": {\n            \"Account\": {\n                \"Alias\": \"Test20\",\n                \"AwsAccountId\": \"{{vault:aws.receiver.accountId}}\"\n            }\n        },\n        \"Payload\": {\n            \"OpportunityInvitation\": {\n                \"SenderContacts\": [{\n                    \"Email\": \"test20@mytest.com\",\n                    \"FirstName\": \"Test\",\n                    \"LastName\": \"Testlast1\",\n                    \"BusinessTitle\": \"Regional Manager\",\n                    \"Phone\": \"+14151231234\"\n                }],\n                \"ReceiverResponsibilities\": [\"Distributor\"],\n                \"Customer\": {\n                    \"Industry\": \"Agriculture\",\n                    \"CompanyName\": \"Company20\",\n                    \"WebsiteUrl\": \"{{$randomDomainName}}\",\n                    \"CountryCode\": \"US\"\n                },\n                \"Project\": {\n                    \"Title\": \"Project32\",\n                    \"BusinessProblem\": \"This is a very important problem\",\n                    \"TargetCompletionDate\": \"2025-10-04\",\n                    \"ExpectedCustomerSpend\": [{\n                        \"Amount\": \"10000.00\",\n\t\t\t\t\t\t\"TargetCompany\": \"AWS\",\n                        \"CurrencyCode\": \"USD\",\n\t\t\t\t\t    \"Frequency\": \"Monthly\",\n                        \"EstimationUrl\": \"www.amazon.com\"\n                    }]\n                }\n            }\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/CreateEngagementInvitation",
						"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_CreateOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_CreateOpportunity.html)"
					},
					"response": [
						{
							"id": "e27a6384-533e-4af1-b51b-841d63233c93",
							"name": "Inviting Partner - CreateEngagementInvitation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"ClientToken\": \"{{$guid}}\",\n    \"Catalog\": \"{{catalog}}\",\n    \"EngagementIdentifier\": \"{{engagementId}}\",\n    \"Invitation\": { \n        \"Message\": \"My Test Message\",\n        \"Receiver\": {\n            \"Account\": {\n                \"Alias\": \"Test20\",\n                \"AwsAccountId\": \"{{vault:aws.receiver.accountId}}\"\n            }\n        },\n        \"Payload\": {\n            \"OpportunityInvitation\": {\n                \"SenderContacts\": [{\n                    \"Email\": \"test20@mytest.com\",\n                    \"FirstName\": \"Test\",\n                    \"LastName\": \"Testlast1\",\n                    \"BusinessTitle\": \"Regional Manager\",\n                    \"Phone\": \"+14151231234\"\n                }],\n                \"ReceiverResponsibilities\": [\"Distributor\"],\n                \"Customer\": {\n                    \"Industry\": \"Agriculture\",\n                    \"CompanyName\": \"Company20\",\n                    \"WebsiteUrl\": \"{{$randomDomainName}}\",\n                    \"CountryCode\": \"US\"\n                },\n                \"Project\": {\n                    \"Title\": \"Project32\",\n                    \"BusinessProblem\": \"This is a very important problem\",\n                    \"TargetCompletionDate\": \"2025-10-04\",\n                    \"ExpectedCustomerSpend\": [{\n                        \"Amount\": \"10000.00\",\n\t\t\t\t\t\t\"TargetCompany\": \"AWS\",\n                        \"CurrencyCode\": \"USD\",\n\t\t\t\t\t    \"Frequency\": \"Monthly\",\n                        \"EstimationUrl\": \"www.amazon.com\"\n                    }]\n                }\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/CreateEngagementInvitation"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 15 Feb 2025 20:39:07 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "126",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "07af36f5-5eae-4051-be44-de614a3a6903",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-invitation/engi-qdvrneda1ll71\",\n    \"Id\": \"engi-qdvrneda1ll71\"\n}"
						}
					]
				},
				{
					"name": "Receiving Partner - ListEngagementInvitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71531857-ca03-45c3-8739-7a7593585860",
								"exec": [
									"try {",
									"    // Parse the response JSON",
									"    const response = pm.response.json();",
									"",
									"    // Check if EngagementInvitationSummaries array exists and has at least one item",
									"    if (response.EngagementInvitationSummaries && response.EngagementInvitationSummaries.length > 0) {",
									"        // Get the first invitation (last incoming invitation based on descending order)",
									"        const firstInvitation = response.EngagementInvitationSummaries[0];",
									"        const acceptingEngagementInvitationID = firstInvitation.Arn;",
									"",
									"        // Save the ARN to a Postman collection variable",
									"        pm.collectionVariables.set(\"acceptingEngagementInvitationID\", acceptingEngagementInvitationID);",
									"",
									"        // Log the details",
									"        console.log(`[Post-res ${pm.info.requestName}] Found engagement invitation to accept. ARN: ${acceptingEngagementInvitationID}`);",
									"",
									"        // Add a test to validate the success of setting the ARN",
									"        pm.test(`[Post-res ${pm.info.requestName}] Status is 200. ARN set for acceptance: ${acceptingEngagementInvitationID}`, function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"    } else {",
									"        // Log a warning if no invitations are found",
									"        console.warn(`[Post-res ${pm.info.requestName}] No engagement invitations found.`);",
									"        pm.test(`[Post-res ${pm.info.requestName}] No engagement invitations found`, function () {",
									"            pm.expect(response.EngagementInvitationSummaries).to.have.lengthOf(0);",
									"        });",
									"    }",
									"} catch (error) {",
									"    // Log the error and fail the test if JSON parsing or other issues occur",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
									"        throw error; // Ensure the test fails if an error occurs",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3e7362e5-c729-4346-8307-61e370d79817",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c4677c7e-7fec-49fc-bb56-ab6bc20c901b",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": {
								"sessionToken": "{{vault:aws.sessionToken.receiving}}",
								"secretKey": "{{vault:aws.secretKey.receiving}}",
								"accessKey": "{{vault:aws.accessKey.receiving}}",
								"service": "partnercentral-selling",
								"addAuthDataToQuery": false,
								"region": "us-east-1"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"MaxResults\": 20,\n    \"NextToken\": null,\n    \"ParticipantType\": \"RECEIVER\",\n    \"PayloadType\": [\n        \"OpportunityInvitation\"\n    ],\n    \"Sort\": {\n        \"SortBy\": \"InvitationDate\",\n        \"SortOrder\": \"DESCENDING\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListEngagementInvitations",
						"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html)"
					},
					"response": [
						{
							"id": "8ad56c07-7080-41c8-8440-9191246a7b57",
							"name": "Receiving Partner - ListEngagementInvitations",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"MaxResults\": 20,\n    \"NextToken\": null,\n    \"ParticipantType\": \"RECEIVER\",\n    \"PayloadType\": [\n        \"OpportunityInvitation\"\n    ],\n    \"Sort\": {\n        \"SortBy\": \"InvitationDate\",\n        \"SortOrder\": \"DESCENDING\"\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagementInvitations"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 15 Feb 2025 21:19:44 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "1659",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "59b7e113-3740-4459-8f13-8874d7658796",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"EngagementInvitationSummaries\": [\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-invitation/engi-qdvrneda1ll71\",\n            \"Catalog\": \"Sandbox\",\n            \"EngagementId\": \"eng-aw5093t842oqqt\",\n            \"EngagementTitle\": \"New Business Deal - 6118\",\n            \"ExpirationDate\": null,\n            \"Id\": \"engi-qdvrneda1ll71\",\n            \"InvitationDate\": \"2025-02-15T20:39:07.44407913Z\",\n            \"ParticipantType\": \"RECEIVER\",\n            \"PayloadType\": \"OpportunityInvitation\",\n            \"Receiver\": {\n                \"Account\": {\n                    \"Alias\": \"Test20\",\n                    \"AwsAccountId\": \"959595959595\"\n                }\n            },\n            \"SenderAwsAccountId\": \"696969696969\",\n            \"SenderCompanyName\": \"Test Account\",\n            \"Status\": \"ACCEPTED\"\n        },\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-invitation/engi-4wlv3hb2a5509\",\n            \"Catalog\": \"Sandbox\",\n            \"EngagementId\": \"eng-4iubhqz81itxzu\",\n            \"EngagementTitle\": \"New Business Deal - 4711\",\n            \"ExpirationDate\": null,\n            \"Id\": \"engi-4wlv3hb2a5509\",\n            \"InvitationDate\": \"2025-02-12T17:26:28.721210549Z\",\n            \"ParticipantType\": \"RECEIVER\",\n            \"PayloadType\": \"OpportunityInvitation\",\n            \"Receiver\": {\n                \"Account\": {\n                    \"Alias\": \"Test20\",\n                    \"AwsAccountId\": \"959595959595\"\n                }\n            },\n            \"SenderAwsAccountId\": \"696969696969\",\n            \"SenderCompanyName\": \"Test Account\",\n            \"Status\": \"ACCEPTED\"\n        },\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-invitation/engi-zu1f5iovz517l\",\n            \"Catalog\": \"Sandbox\",\n            \"EngagementId\": \"eng-0i7vjf9c4bs2of\",\n            \"EngagementTitle\": \"New Business Deal - 1660\",\n            \"ExpirationDate\": null,\n            \"Id\": \"engi-zu1f5iovz517l\",\n            \"InvitationDate\": \"2025-02-12T16:40:41.385001401Z\",\n            \"ParticipantType\": \"RECEIVER\",\n            \"PayloadType\": \"OpportunityInvitation\",\n            \"Receiver\": {\n                \"Account\": {\n                    \"Alias\": \"Test20\",\n                    \"AwsAccountId\": \"959595959595\"\n                }\n            },\n            \"SenderAwsAccountId\": \"696969696969\",\n            \"SenderCompanyName\": \"Test Account\",\n            \"Status\": \"ACCEPTED\"\n        }\n    ],\n    \"NextToken\": null\n}"
						}
					]
				},
				{
					"name": "Receiving Partner - GetEngagementInvitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4dce1163-9537-49a8-abea-1433bfcfe899",
								"exec": [
									"try {",
									"    // Parse the request payload to extract the Identifier",
									"    const requestPayload = JSON.parse(pm.request.body.raw);",
									"    const identifier = requestPayload.Identifier || \"Unknown Identifier\";",
									"    const acceptingEngagementInvitationID = pm.collectionVariables.get(\"acceptingEngagementInvitationID\");",
									"",
									"    // Check the response status and log accordingly",
									"    if (pm.response.code === 200) {",
									"        pm.test(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded for Identifier: ${identifier}`, function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"        console.log(`[Post-res ${pm.info.requestName}] Successfully accepted engagement invitation with ARN: ${acceptingEngagementInvitationID}`);",
									"    } else {",
									"        pm.test(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed for Identifier: ${identifier}`, function () {",
									"            pm.response.to.not.have.status(200);",
									"        });",
									"        console.error(`[Post-res ${pm.info.requestName}] Failed to accept engagement invitation with ARN: ${acceptingEngagementInvitationID}. Status Code: ${pm.response.code}`);",
									"    }",
									"} catch (error) {",
									"    // Handle errors during response parsing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
									"        throw error;",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "45df17b5-cb5d-47ee-807d-09c15026e925",
								"exec": [
									"// Parse the request payload to extract the Identifier",
									"const requestPayload = JSON.parse(pm.request.body.raw);",
									"const identifier = requestPayload.Identifier || \"Unknown Identifier\";",
									"",
									"// Log the start of the action with the Identifier",
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${identifier}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "842cd758-e92a-47cc-a63e-e3a73d1ef53f",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": {
								"sessionToken": "{{vault:aws.sessionToken.receiving}}",
								"secretKey": "{{vault:aws.secretKey.receiving}}",
								"accessKey": "{{vault:aws.accessKey.receiving}}",
								"service": "partnercentral-selling",
								"addAuthDataToQuery": false,
								"region": "us-east-1"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{acceptingEngagementInvitationID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetEngagementInvitation"
					},
					"response": [
						{
							"id": "a8e1395f-1f55-4c9e-8a40-b971dc816e04",
							"name": "Receiving Partner - GetEngagementInvitation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{acceptingEngagementInvitationID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetEngagementInvitation"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 15 Feb 2025 20:42:02 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "1354",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "67b2d7dd-7d5a-45cf-bc0b-415ff67fd6c8",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-invitation/engi-qdvrneda1ll71\",\n    \"Catalog\": \"Sandbox\",\n    \"EngagementDescription\": \"A very important problem goes here ValidAWSCreate\",\n    \"EngagementId\": \"eng-aw5093t842oqqt\",\n    \"EngagementTitle\": \"New Business Deal - 6118\",\n    \"ExistingMembers\": [\n        {\n            \"CompanyName\": \"Test Account\",\n            \"WebsiteUrl\": \"null\"\n        }\n    ],\n    \"ExpirationDate\": \"2025-03-02T20:39:07.44407913Z\",\n    \"Id\": \"engi-qdvrneda1ll71\",\n    \"InvitationDate\": \"2025-02-15T20:39:07.44407913Z\",\n    \"InvitationMessage\": \"My Test Message\",\n    \"Payload\": {\n        \"OpportunityInvitation\": {\n            \"Customer\": {\n                \"CompanyName\": \"Company20\",\n                \"CountryCode\": \"US\",\n                \"Industry\": \"Agriculture\",\n                \"WebsiteUrl\": \"marcelina.org\"\n            },\n            \"Project\": {\n                \"BusinessProblem\": \"This is a very important problem\",\n                \"ExpectedCustomerSpend\": [\n                    {\n                        \"Amount\": \"10000.00\",\n                        \"CurrencyCode\": \"USD\",\n                        \"EstimationUrl\": \"www.amazon.com\",\n                        \"Frequency\": \"Monthly\",\n                        \"TargetCompany\": \"AWS\"\n                    }\n                ],\n                \"TargetCompletionDate\": \"2025-10-04\",\n                \"Title\": \"Project32\"\n            },\n            \"ReceiverResponsibilities\": [\n                \"Distributor\"\n            ],\n            \"SenderContacts\": [\n                {\n                    \"BusinessTitle\": \"Regional Manager\",\n                    \"Email\": \"test20@mytest.com\",\n                    \"FirstName\": \"Test\",\n                    \"LastName\": \"Testlast1\",\n                    \"Phone\": \"+14151231234\"\n                }\n            ]\n        }\n    },\n    \"PayloadType\": \"OpportunityInvitation\",\n    \"Receiver\": {\n        \"Account\": {\n            \"Alias\": \"Test20\",\n            \"AwsAccountId\": \"959595959595\"\n        }\n    },\n    \"RejectionReason\": null,\n    \"SenderAwsAccountId\": \"696969696969\",\n    \"SenderCompanyName\": \"Test Account\",\n    \"Status\": \"PENDING\"\n}"
						}
					]
				},
				{
					"name": "Receiving Partner - StartEngagementByAcceptingInvitationTask",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bcc3dd-c5ba-46e7-8271-0bd93d6d59cd",
								"exec": [
									"try {",
									"    // Parse the response JSON",
									"    const response = pm.response.json();",
									"",
									"    // Extract response attributes",
									"    const opportunityId = response.OpportunityId || \"Unknown Opportunity\";",
									"    const taskDetails = {",
									"        TaskId: response.TaskId || \"N/A\",",
									"        TaskArn: response.TaskArn || \"N/A\",",
									"        TaskStatus: response.TaskStatus || \"N/A\"",
									"    };",
									"",
									"    pm.collectionVariables.set(\"acceptedEngagementOpportunityID\", opportunityId);",
									"",
									"    // Add tests for response validation",
									"    pm.test(`[Post-res ${pm.info.requestName}] Response structure validation`, function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(response).to.have.property(\"OpportunityId\");",
									"        pm.expect(taskDetails.TaskStatus).to.not.equal(\"FAILED\");",
									"    });",
									"",
									"    // Add tests for individual fields",
									"    pm.test(`[Post-res ${pm.info.requestName}] Task details validation`, function () {",
									"        pm.expect(taskDetails.TaskId).to.not.equal(\"N/A\");",
									"        pm.expect(taskDetails.TaskArn).to.not.equal(\"N/A\");",
									"        pm.expect(taskDetails.TaskStatus).to.not.equal(\"N/A\");",
									"    });",
									"",
									"    // Log the action execution and task details",
									"    console.log(",
									"        `[Post-res ${pm.info.requestName}] ${pm.info.requestName} executed. Started engagement on ${opportunityId}. Task details: TaskId=${taskDetails.TaskId}, TaskArn=${taskDetails.TaskArn}, TaskStatus=${taskDetails.TaskStatus}.`",
									"    );",
									"} catch (error) {",
									"    // Handle errors during response parsing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
									"        throw error;",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc229de6-5890-4c2b-8302-ed678150cd25",
								"exec": [
									"try {",
									"    /// Step 1: Generate Client Token",
									"    const clientToken = pm.variables.replaceIn('{{$randomUUID}}')",
									"",
									"    // Save the generated client token as a local variable",
									"    pm.variables.set('clientToken', pm.variables.replaceIn('{{$randomUUID}}'));",
									"    console.log(`[${pm.info.requestName}] Generated Client Token: ${clientToken}`);",
									"    ",
									"    // Step 2: Retrieve acceptingEngagementInvitationID",
									"    const acceptingEngagementInvitationID = pm.collectionVariables.get(\"acceptingEngagementInvitationID\");",
									"",
									"    if (acceptingEngagementInvitationID) {",
									"        // Log the action details for accepting the engagement invitation",
									"        console.log(`[Pre-req ${pm.info.requestName}] Accepting engagement invitation with ARN: ${acceptingEngagementInvitationID}`);",
									"    } else {",
									"        console.warn(`[Pre-req ${pm.info.requestName}] No acceptingEngagementInvitationID found. Ensure it has been set before executing this action.`);",
									"    }",
									"",
									"    // Log the action start",
									"    console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
									"",
									"} catch (error) {",
									"    // Handle any errors during token generation or retrieving engagement ID",
									"    console.error(`[Pre-req ${pm.info.requestName}] Error occurred:`, error);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "484fcb1f-0149-4797-9875-79a76faf0885",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": {
								"sessionToken": "{{vault:aws.sessionToken.receiving}}",
								"secretKey": "{{vault:aws.secretKey.receiving}}",
								"accessKey": "{{vault:aws.accessKey.receiving}}",
								"service": "partnercentral-selling",
								"addAuthDataToQuery": false,
								"region": "us-east-1"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"Catalog\": \"{{catalog}}\",\n\t\"Identifier\": \"{{acceptingEngagementInvitationID}}\",\n\t\"ClientToken\": \"{{clientToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/StartEngagementByAcceptingInvitationTask"
					},
					"response": [
						{
							"id": "e308b782-9480-4c88-b5d6-f8f075193ac7",
							"name": "Receiving Partner - StartEngagementByAcceptingInvitationTask",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Catalog\": \"{{catalog}}\",\n\t\"Identifier\": \"{{acceptingEngagementInvitationID}}\",\n\t\"ClientToken\": \"{{clientToken}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/StartEngagementByAcceptingInvitationTask"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 15 Feb 2025 20:43:22 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "371",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "88a65211-7ad6-4ce4-9692-ab345f2ec1aa",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"EngagementInvitationId\": \"engi-qdvrneda1ll71\",\n    \"Message\": null,\n    \"OpportunityId\": \"O5410879\",\n    \"ReasonCode\": null,\n    \"ResourceSnapshotJobId\": \"job-2kycnktfdndqq\",\n    \"StartTime\": \"2025-02-15T20:43:13.919117033Z\",\n    \"TaskArn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-by-accepting-invitation-task/task-c18ns2bfuky88\",\n    \"TaskId\": \"task-c18ns2bfuky88\",\n    \"TaskStatus\": \"COMPLETE\"\n}"
						}
					]
				},
				{
					"name": "Inviting Partner - GetOpportunity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
								"exec": [
									"try {",
									"    // Retrieve the opportunityId from Postman collection variables",
									"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
									"",
									"    // Check the response status and log accordingly",
									"    if (pm.response.code === 200) {",
									"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        // Parse the response body",
									"        const responseBody = pm.response.json();",
									"",
									"        // Perform basic validation on the response",
									"        pm.test(\"Response has the correct structure\", function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"            pm.expect(responseBody).to.have.property('Id');",
									"            pm.expect(responseBody).to.have.property('LifeCycle');",
									"        });",
									"",
									"        // Store the complete response in a collection variable",
									"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
									"        console.log(`[Post-res ${pm.info.requestName}] Stored response payload for ID: ${responseBody.Id}`);",
									"",
									"    } else {",
									"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
									"",
									"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
									"            pm.expect.fail(`Received status code ${pm.response.code}`);",
									"        });",
									"    }",
									"",
									"} catch (error) {",
									"    // Handle any errors during response processing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
									"        pm.expect.fail(error.message);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b15cc49a-c66b-418d-9c96-f49e9da4ca00",
								"exec": [
									"// Parse the request payload to extract the Identifier",
									"const opportunityId = pm.collectionVariables.get(\"acceptingEngagementInvitationID\");",
									"",
									"// Log the start of the action with the Identifier",
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a6ab1872-3a62-4cd2-b952-8566a21fd10a",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{opportunityId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetOpportunity",
						"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
					},
					"response": [
						{
							"id": "73172982-1853-4d4f-818b-971fadfc22e8",
							"name": "Inviting Partner - GetOpportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 15 Feb 2025 21:21:33 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "2267",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "8b2e4a67-1a0e-47fa-b308-0f7d97bb0cde",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1:696969696969:catalog/Sandbox/opportunity/O5408941\",\n    \"Catalog\": \"Sandbox\",\n    \"CreatedDate\": \"2025-02-15T17:54:40Z\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": null,\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": null\n            },\n            \"AwsAccountId\": \"111111111111\",\n            \"CompanyName\": \"ValidAWSCreate\",\n            \"Duns\": \"111100111\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": null,\n            \"WebsiteUrl\": \"www.test.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Executive\",\n                \"Email\": \"test@test.com\",\n                \"FirstName\": \"TestContact011\",\n                \"LastName\": \"MLastName001\",\n                \"Phone\": \"+14444444444\"\n            }\n        ]\n    },\n    \"Id\": \"O5408941\",\n    \"LastModifiedDate\": \"2025-02-15T20:46:25Z\",\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Submitted\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Prospect\",\n        \"TargetCloseDate\": \"2029-10-05\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": \"Yes\",\n        \"CampaignName\": \"TestCampaignName01\",\n        \"Channels\": [\n            \"Content Syndication\"\n        ],\n        \"Source\": \"Marketing Activity\",\n        \"UseCases\": [\n            \"Analytics\"\n        ]\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"OpportunityOwner\",\n            \"Email\": \"mgztest234@testsandbox-00dva000000xjrrmau.com\",\n            \"FirstName\": \"Test FirstName\",\n            \"LastName\": \"Alliance Lead\",\n            \"Phone\": null\n        },\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"testemail@test.com\",\n            \"FirstName\": \"TestContact001\",\n            \"LastName\": \"CLastName001\",\n            \"Phone\": \"+14444444444\"\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Architectural Validation\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": \"On-Prem\",\n        \"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n        \"CustomerUseCase\": \"Security & Compliance\",\n        \"DeliveryModels\": [\n            \"SaaS or PaaS\"\n        ],\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"12500\",\n                \"CurrencyCode\": \"USD\",\n                \"EstimationUrl\": null,\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": \"TestSolution\",\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Conducted POC / Demo\"\n        ],\n        \"Title\": \"New Business Deal - 6118\"\n    },\n    \"RelatedEntityIdentifiers\": {\n        \"AwsMarketplaceOffers\": [],\n        \"AwsProducts\": [],\n        \"Solutions\": []\n    },\n    \"SoftwareRevenue\": null\n}"
						}
					]
				},
				{
					"name": "[Simulate] Approval from AWS for Inviting Partner Opportunity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d083d5cb-5484-4b42-b239-459d88e448b4",
								"exec": [
									"try {",
									"    // Check the response status",
									"    if (pm.response.code === 200) {",
									"        // Log success and add a test for status 200",
									"        console.log(`[Post-res ${pm.info.requestName}] UpdateOpportunity action succeeded.`);",
									"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"    } else {",
									"        // Log failure and add a test for non-200 status",
									"        console.error(`[Post-res ${pm.info.requestName}] UpdateOpportunity action failed. Status Code: ${pm.response.code}`);",
									"        pm.test(`[Post-res ${pm.info.requestName}] Status code is not 200`, function () {",
									"            pm.response.to.not.have.status(200);",
									"        });",
									"    }",
									"} catch (error) {",
									"    // Handle any errors during response processing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"",
									"    // Add a test to capture the error",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
									"        throw error; // Ensure the test fails if an error occurs",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "04127e8e-4299-4a8b-84a0-aa8e1aa90973",
								"exec": [
									"try {",
									"    // Retrieve the stored payload from the GetOpportunity action",
									"    const getOpportunityPayload = pm.collectionVariables.get(\"getOpportunityPayload\");",
									"",
									"    if (getOpportunityPayload) {",
									"        // Parse the stored payload",
									"        const payload = JSON.parse(getOpportunityPayload);",
									"",
									"        // Transform the payload for UpdateOpportunity",
									"        payload.Identifier = payload.Id; // Rename \"Id\" to \"Identifier\"",
									"        delete payload.Id; // Remove the original \"Id\" field",
									"        payload.LifeCycle.ReviewStatus = \"Approved\"; // Update to Approved",
									"",
									"        // Set the modified payload as the request body",
									"        pm.request.body.raw = JSON.stringify(payload);",
									"        console.log(`[Pre-req ${pm.info.requestName}] Transformed payload for UpdateOpportunity:`, payload);",
									"",
									"    } else {",
									"        console.warn(`[Pre-req ${pm.info.requestName}] No payload found from GetOpportunity. Ensure the previous request executed successfully.`);",
									"    }",
									"",
									"} catch (error) {",
									"    // Handle any errors during payload transformation",
									"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request payload:`, error);",
									"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
									"        pm.expect.fail(error.message);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "7a32b480-9384-4f30-be28-40395c39f49a",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+14444444444\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": null,\n    \"ReviewStatus\": \"Approved\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Qualified\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/UpdateOpportunity"
					},
					"response": [
						{
							"id": "f6338865-dd5c-42b2-aed5-bfa7cc5b1eec",
							"name": "[Simulate] Approval from AWS for Inviting Partner Opportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+14444444444\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": null,\n    \"ReviewStatus\": \"Approved\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Qualified\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/UpdateOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 12 Feb 2025 18:28:36 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "59",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "f3014d4b-fbc3-4ddd-8f6b-9cd5e6783385",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Id\": \"O5408941\",\n    \"LastModifiedDate\": \"2025-02-15T17:58:40Z\"\n}"
						}
					]
				},
				{
					"name": "Inviting Partner - GetOpportunity check status",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
								"exec": [
									"try {",
									"    // Retrieve the opportunityId from Postman collection variables",
									"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
									"",
									"    // Check the response status and log accordingly",
									"    if (pm.response.code === 200) {",
									"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        // Parse the response body",
									"        const responseBody = pm.response.json();",
									"",
									"        // Perform basic validation on the response",
									"        pm.test(\"Response has the correct structure\", function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"            pm.expect(responseBody).to.have.property('Id');",
									"            pm.expect(responseBody).to.have.property('LifeCycle');",
									"        });",
									"",
									"        // Store the complete response in a collection variable",
									"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
									"        console.log(`[Post-res ${pm.info.requestName}] Stored response payload for ID: ${responseBody.Id}`);",
									"",
									"    } else {",
									"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
									"",
									"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
									"            pm.expect.fail(`Received status code ${pm.response.code}`);",
									"        });",
									"    }",
									"",
									"} catch (error) {",
									"    // Handle any errors during response processing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
									"        pm.expect.fail(error.message);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b15cc49a-c66b-418d-9c96-f49e9da4ca00",
								"exec": [
									"// Parse the request payload to extract the Identifier",
									"const opportunityId = pm.collectionVariables.get(\"acceptingEngagementInvitationID\");",
									"",
									"// Log the start of the action with the Identifier",
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4c5c1364-dcbc-4914-b39b-98d23d0d4140",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{opportunityId}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetOpportunity",
						"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
					},
					"response": [
						{
							"id": "c4bf967b-df56-463d-9f94-5214b1dcce44",
							"name": "Inviting Partner - GetOpportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 15 Feb 2025 21:21:33 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "2267",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "8b2e4a67-1a0e-47fa-b308-0f7d97bb0cde",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1:696969696969:catalog/Sandbox/opportunity/O5408941\",\n    \"Catalog\": \"Sandbox\",\n    \"CreatedDate\": \"2025-02-15T17:54:40Z\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": null,\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": null\n            },\n            \"AwsAccountId\": \"111111111111\",\n            \"CompanyName\": \"ValidAWSCreate\",\n            \"Duns\": \"111100111\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": null,\n            \"WebsiteUrl\": \"www.test.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Executive\",\n                \"Email\": \"test@test.com\",\n                \"FirstName\": \"TestContact011\",\n                \"LastName\": \"MLastName001\",\n                \"Phone\": \"+14444444444\"\n            }\n        ]\n    },\n    \"Id\": \"O5408941\",\n    \"LastModifiedDate\": \"2025-02-15T20:46:25Z\",\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Approved\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Prospect\",\n        \"TargetCloseDate\": \"2029-10-05\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": \"Yes\",\n        \"CampaignName\": \"TestCampaignName01\",\n        \"Channels\": [\n            \"Content Syndication\"\n        ],\n        \"Source\": \"Marketing Activity\",\n        \"UseCases\": [\n            \"Analytics\"\n        ]\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"OpportunityOwner\",\n            \"Email\": \"mgztest234@testsandbox-00dva000000xjrrmau.com\",\n            \"FirstName\": \"Test FirstName\",\n            \"LastName\": \"Alliance Lead\",\n            \"Phone\": null\n        },\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"testemail@test.com\",\n            \"FirstName\": \"TestContact001\",\n            \"LastName\": \"CLastName001\",\n            \"Phone\": \"+14444444444\"\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Architectural Validation\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": \"On-Prem\",\n        \"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n        \"CustomerUseCase\": \"Security & Compliance\",\n        \"DeliveryModels\": [\n            \"SaaS or PaaS\"\n        ],\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"12500\",\n                \"CurrencyCode\": \"USD\",\n                \"EstimationUrl\": null,\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": \"TestSolution\",\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Conducted POC / Demo\"\n        ],\n        \"Title\": \"New Business Deal - 6118\"\n    },\n    \"RelatedEntityIdentifiers\": {\n        \"AwsMarketplaceOffers\": [],\n        \"AwsProducts\": [],\n        \"Solutions\": []\n    },\n    \"SoftwareRevenue\": null\n}"
						}
					]
				},
				{
					"name": "Receiving Partner - GetOpportunity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
								"exec": [
									"try {",
									"    // Retrieve the opportunityId from Postman collection variables",
									"    const opportunityId = pm.collectionVariables.get(\"acceptedEngagementOpportunityID\");",
									"",
									"    // Check the response status and log accordingly",
									"    if (pm.response.code === 200) {",
									"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        // Parse the response body",
									"        const responseBody = pm.response.json();",
									"",
									"        // Perform basic validation on the response",
									"        pm.test(\"Response has the correct structure\", function () {",
									"            pm.expect(responseBody).to.be.an('object');",
									"            pm.expect(responseBody).to.have.property('Id');",
									"            pm.expect(responseBody).to.have.property('LifeCycle');",
									"        });",
									"",
									"        // Store the complete response in a collection variable",
									"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
									"        console.log(`[Post-res ${pm.info.requestName}] Stored response payload for ID: ${responseBody.Id}`);",
									"",
									"    } else {",
									"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
									"",
									"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
									"            pm.expect.fail(`Received status code ${pm.response.code}`);",
									"        });",
									"    }",
									"",
									"} catch (error) {",
									"    // Handle any errors during response processing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
									"        pm.expect.fail(error.message);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "b15cc49a-c66b-418d-9c96-f49e9da4ca00",
								"exec": [
									"// Parse the request payload to extract the Identifier",
									"const opportunityId = pm.collectionVariables.get(\"acceptingEngagementInvitationID\");",
									"",
									"// Log the start of the action with the Identifier",
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "0952cd77-1853-45db-b3ac-34066b07901d",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": {
								"sessionToken": "{{vault:aws.sessionToken.receiving}}",
								"secretKey": "{{vault:aws.secretKey.receiving}}",
								"accessKey": "{{vault:aws.accessKey.receiving}}",
								"service": "partnercentral-selling",
								"addAuthDataToQuery": false,
								"region": "us-east-1"
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{acceptedEngagementOpportunityID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetOpportunity",
						"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
					},
					"response": [
						{
							"id": "b5e99d20-e135-4f5b-bbc3-c16df3ccb0cf",
							"name": "Receiving Partner - GetOpportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{acceptedEngagementOpportunityID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 15 Feb 2025 21:24:00 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "1712",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "660e7ebc-87a3-4f5d-b6c5-2a3b30122940",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1:959595959595:catalog/Sandbox/opportunity/O5410879\",\n    \"Catalog\": \"Sandbox\",\n    \"CreatedDate\": \"2025-02-15T20:43:17Z\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": null,\n                \"CountryCode\": \"US\",\n                \"PostalCode\": null,\n                \"StateOrRegion\": null,\n                \"StreetAddress\": null\n            },\n            \"AwsAccountId\": null,\n            \"CompanyName\": \"Company20\",\n            \"Duns\": null,\n            \"Industry\": \"Agriculture\",\n            \"OtherIndustry\": null,\n            \"WebsiteUrl\": \"marcelina.org\"\n        },\n        \"Contacts\": []\n    },\n    \"Id\": \"O5410879\",\n    \"LastModifiedDate\": \"2025-02-15T20:43:28Z\",\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": null,\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Approved\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Prospect\",\n        \"TargetCloseDate\": \"2025-10-04\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": null,\n        \"CampaignName\": \"TestCampaignName01\",\n        \"Channels\": null,\n        \"Source\": \"None\",\n        \"UseCases\": null\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"OpportunityOwner\",\n            \"Email\": \"2000001testal@testsandbox-00dva000000xjrrmau.com\",\n            \"FirstName\": \"Test Acc\",\n            \"LastName\": \"Alliance Lead\",\n            \"Phone\": null\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Do Not Need Support from AWS Sales Rep\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": null,\n        \"CustomerBusinessProblem\": \"This is a very important problem\",\n        \"CustomerUseCase\": null,\n        \"DeliveryModels\": null,\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"10000\",\n                \"CurrencyCode\": \"USD\",\n                \"EstimationUrl\": null,\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": null,\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": null,\n        \"Title\": \"Project32\"\n    },\n    \"RelatedEntityIdentifiers\": {\n        \"AwsMarketplaceOffers\": [],\n        \"AwsProducts\": [],\n        \"Solutions\": []\n    },\n    \"SoftwareRevenue\": null\n}"
						}
					]
				},
				{
					"name": "[Simulate] Approval from AWS for Inviting Partner Opportunity Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d083d5cb-5484-4b42-b239-459d88e448b4",
								"exec": [
									"try {",
									"    // Check the response status",
									"    if (pm.response.code === 200) {",
									"        // Log success and add a test for status 200",
									"        console.log(`[Post-res ${pm.info.requestName}] UpdateOpportunity action succeeded.`);",
									"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"    } else {",
									"        // Log failure and add a test for non-200 status",
									"        console.error(`[Post-res ${pm.info.requestName}] UpdateOpportunity action failed. Status Code: ${pm.response.code}`);",
									"        pm.test(`[Post-res ${pm.info.requestName}] Status code is not 200`, function () {",
									"            pm.response.to.not.have.status(200);",
									"        });",
									"    }",
									"} catch (error) {",
									"    // Handle any errors during response processing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"",
									"    // Add a test to capture the error",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
									"        throw error; // Ensure the test fails if an error occurs",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "04127e8e-4299-4a8b-84a0-aa8e1aa90973",
								"exec": [
									"try {",
									"    // Retrieve the stored payload from the GetOpportunity action",
									"    const getOpportunityPayload = pm.collectionVariables.get(\"getOpportunityPayload\");",
									"",
									"    if (getOpportunityPayload) {",
									"        // Parse the stored payload",
									"        const payload = JSON.parse(getOpportunityPayload);",
									"",
									"        // Transform the payload for UpdateOpportunity",
									"        payload.Identifier = payload.Id; // Rename \"Id\" to \"Identifier\"",
									"        delete payload.Id; // Remove the original \"Id\" field",
									"        //need to set marketing.source and AwsFundingUsed in order to update",
									"        payload.Marketing.Source=\"Marketing Activity\";",
									"        payload.Marketing.AwsFundingUsed=\"Yes\";",
									"        payload.LifeCycle.ReviewStatus = \"Approved\"; // Update to Approved",
									"",
									"        // Set the modified payload as the request body",
									"        pm.request.body.raw = JSON.stringify(payload);",
									"        console.log(`[Pre-req ${pm.info.requestName}] Transformed payload for UpdateOpportunity:`, payload);",
									"",
									"    } else {",
									"        console.warn(`[Pre-req ${pm.info.requestName}] No payload found from GetOpportunity. Ensure the previous request executed successfully.`);",
									"    }",
									"",
									"} catch (error) {",
									"    // Handle any errors during payload transformation",
									"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request payload:`, error);",
									"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
									"        pm.expect.fail(error.message);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "4e246bd2-30f2-4f0a-8031-8c215df1b5df",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": {
								"region": "{{aws.region}}",
								"service": "{{aws.partnercentral.service}}",
								"sessionToken": "{{vault:aws.sessionToken.receiving}}",
								"secretKey": "{{vault:aws.secretKey.receiving}}",
								"accessKey": "{{vault:aws.accessKey.receiving}}",
								"addAuthDataToQuery": false
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+14444444444\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": null,\n    \"ReviewStatus\": \"Approved\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Qualified\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/UpdateOpportunity"
					},
					"response": [
						{
							"id": "056b4678-0704-4dab-83b5-b254739b052d",
							"name": "[Simulate] Approval from AWS for Inviting Partner Opportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+14444444444\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": null,\n    \"ReviewStatus\": \"Approved\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Qualified\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/UpdateOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Wed, 12 Feb 2025 18:28:36 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "59",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "f3014d4b-fbc3-4ddd-8f6b-9cd5e6783385",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Id\": \"O5408941\",\n    \"LastModifiedDate\": \"2025-02-15T17:58:40Z\"\n}"
						}
					]
				},
				{
					"name": "Receiving Partner - GetAwsOpportunitySummary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a125b8e-6852-4243-a96a-23b44e1c9c1f",
								"exec": [
									"// Parse the request payload to extract the Identifier",
									"const requestPayload = JSON.parse(pm.request.body.raw);",
									"const identifier = requestPayload.Identifier || \"Unknown Identifier\";",
									"",
									"// Check the response status and log accordingly",
									"if (pm.response.code === 200) {",
									"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded for Identifier: ${identifier}`);",
									"} else {",
									"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed for Identifier: ${identifier}. Status Code: ${pm.response.code}`);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c779b3b1-2d66-4c0a-b440-b7d9a0e73ab0",
								"exec": [
									"// Parse the request payload to extract the Identifier",
									"const requestPayload = JSON.parse(pm.request.body.raw);",
									"const identifier = requestPayload.Identifier || \"Unknown Identifier\";",
									"",
									"// Log the start of the action with the Identifier",
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${identifier}`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d67e5392-53ce-4d35-b119-13124e35af5b",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "awsv4",
							"awsv4": {
								"region": "{{aws.region}}",
								"service": "{{aws.partnercentral.service}}",
								"sessionToken": "{{vault:aws.sessionToken.receiving}}",
								"secretKey": "{{vault:aws.secretKey.receiving}}",
								"accessKey": "{{vault:aws.accessKey.receiving}}",
								"addAuthDataToQuery": false
							}
						},
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"RelatedOpportunityIdentifier\": \"{{acceptedEngagementOpportunityID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetAwsOpportunitySummary",
						"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetAwsOpportunitySummary.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetAwsOpportunitySummary.html)"
					},
					"response": [
						{
							"id": "52b79806-beb6-4a7e-9fe0-9c583258b27a",
							"name": "Receiving Partner - GetAwsOpportunitySummary",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"RelatedOpportunityIdentifier\": \"{{acceptedEngagementOpportunityID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetAwsOpportunitySummary"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Sat, 15 Feb 2025 21:13:18 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "895",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "4f1c8e43-98aa-4e97-8bd2-31226a4b8130",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Catalog\": \"Sandbox\",\n    \"Customer\": {\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Executive\",\n                \"Email\": \"test@test.com\",\n                \"FirstName\": \"TestContact011\",\n                \"LastName\": \"MLastName001\",\n                \"Phone\": \"+14444444444\"\n            }\n        ]\n    },\n    \"Insights\": null,\n    \"InvolvementType\": \"Co-Sell\",\n    \"InvolvementTypeChangeReason\": null,\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n        \"NextStepsHistory\": null,\n        \"Stage\": null,\n        \"TargetCloseDate\": null\n    },\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"PDM\",\n            \"Email\": \"pdm-35@sec.dmk.a1x8w00000tizy6uaa\",\n            \"FirstName\": \"NAMER\",\n            \"LastName\": \"SI Partner Manager\"\n        }\n    ],\n    \"Origin\": \"Partner Referral\",\n    \"Project\": {\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"12500\",\n                \"CurrencyCode\": \"USD\",\n                \"EstimationUrl\": null,\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ]\n    },\n    \"RelatedEntityIds\": {\n        \"AwsProducts\": [],\n        \"Solutions\": []\n    },\n    \"RelatedOpportunityId\": \"O5410879\",\n    \"Visibility\": \"Full\"\n}"
						}
					]
				}
			],
			"id": "2d81f6e3-5b44-484f-8a82-e5a605e4983a",
			"description": "Complete workflow of working with Multipartner opportunities\n\n<img src=\"https://content.pstmn.io/2b7c635b-4a34-4194-9e64-8e95e5e38cfd/bXVsdGlwYXJ0eS5wbmc=\" alt=\"\" height=\"908\" width=\"1653\">",
			"auth": {
				"type": "awsv4",
				"awsv4": {
					"sessionToken": "{{vault:aws.sessionToken.inviting}}",
					"service": "{{aws.partnercentral.service}}",
					"region": "{{aws.region}}",
					"secretKey": "{{vault:aws.secretKey.inviting}}",
					"accessKey": "{{vault:aws.accessKey.inviting}}"
				}
			}
		},
		{
			"name": "Managing a multipartner opportunity",
			"item": [
				{
					"name": "Receive partner updates on a multi-partner opportunity",
					"item": [
						{
							"name": "Partner 1 - GetOpportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse and validate the response",
											"        const responseBody = pm.response.json();",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Validate Opportunity attributes`, function () {",
											"            pm.expect(responseBody).to.have.property('Id');",
											"            pm.expect(responseBody).to.have.property('LifeCycle');",
											"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewStatus', 'Action Required');",
											"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewComments').that.is.not.empty;",
											"        });",
											"",
											"        // Store the complete response for subsequent requests",
											"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored updated Opportunity payload for ID: ${responseBody.Id}`);",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve updated Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f926d538-8031-4f26-bcce-8a09fa162897",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse and validate the response",
											"        const responseBody = pm.response.json();",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Validate Opportunity attributes`, function () {",
											"            pm.expect(responseBody).to.have.property('Id');",
											"            pm.expect(responseBody).to.have.property('LifeCycle');",
											"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewStatus', 'Action Required');",
											"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewComments').that.is.not.empty;",
											"        });",
											"",
											"        // Store the complete response for subsequent requests",
											"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored updated Opportunity payload for ID: ${responseBody.Id}`);",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve updated Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "60f4acf2-d9bd-4bb6-8670-639f0ae77c3c",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
							},
							"response": [
								{
									"id": "171da611-705d-4491-a071-5a685d55b7ec",
									"name": "Partner 1 - GetOpportunity",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BASE_URL}}/GetOpportunity"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 18 Mar 2025 00:19:22 GMT",
											"enabled": true
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										},
										{
											"key": "Content-Length",
											"value": "2267",
											"enabled": true
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"enabled": true
										},
										{
											"key": "x-amzn-RequestId",
											"value": "eddec4b9-ac1f-4a82-8870-5cf2f0f0da02",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1:691709974417:catalog/Sandbox/opportunity/O5843005\",\n    \"Catalog\": \"Sandbox\",\n    \"CreatedDate\": \"2025-03-17T23:55:22Z\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": null,\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": null\n            },\n            \"AwsAccountId\": \"111111111111\",\n            \"CompanyName\": \"ValidAWSCreate\",\n            \"Duns\": \"111100111\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": null,\n            \"WebsiteUrl\": \"www.test.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Executive\",\n                \"Email\": \"test@test.com\",\n                \"FirstName\": \"TestContact011\",\n                \"LastName\": \"MLastName001\",\n                \"Phone\": \"+14444444444\"\n            }\n        ]\n    },\n    \"Id\": \"O5843005\",\n    \"LastModifiedDate\": \"2025-03-17T23:58:26Z\",\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Approved\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Prospect\",\n        \"TargetCloseDate\": \"2029-10-05\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": \"Yes\",\n        \"CampaignName\": \"TestCampaignName01\",\n        \"Channels\": [\n            \"Content Syndication\"\n        ],\n        \"Source\": \"Marketing Activity\",\n        \"UseCases\": [\n            \"Analytics\"\n        ]\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"OpportunityOwner\",\n            \"Email\": \"mgztest234@testsandbox-00dva000000xjrrmau.com\",\n            \"FirstName\": \"Ming Test\",\n            \"LastName\": \"Alliance Lead\",\n            \"Phone\": null\n        },\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"testemail@test.com\",\n            \"FirstName\": \"TestContact001\",\n            \"LastName\": \"CLastName001\",\n            \"Phone\": \"+14444444444\"\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Architectural Validation\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": \"On-Prem\",\n        \"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n        \"CustomerUseCase\": \"Security & Compliance\",\n        \"DeliveryModels\": [\n            \"SaaS or PaaS\"\n        ],\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"12500\",\n                \"CurrencyCode\": \"USD\",\n                \"EstimationUrl\": null,\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": \"TestSolution\",\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Conducted POC / Demo\"\n        ],\n        \"Title\": \"New Business Deal - 7248\"\n    },\n    \"RelatedEntityIdentifiers\": {\n        \"AwsMarketplaceOffers\": [],\n        \"AwsProducts\": [],\n        \"Solutions\": []\n    },\n    \"SoftwareRevenue\": null\n}"
								}
							]
						},
						{
							"name": "Partner 1 - UpdateOpportunity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3f66b338-4d44-4084-9f9a-cd06ae71bb28",
										"exec": [
											"try {",
											"    // Retrieve the stored Opportunity payload",
											"    const getOpportunityPayload = pm.collectionVariables.get(\"getOpportunityPayload\");",
											"",
											"    if (getOpportunityPayload) {",
											"        // Parse the payload",
											"        const payload = JSON.parse(getOpportunityPayload);",
											"",
											"        // Update the necessary fields",
											"        payload.Identifier = payload.Id; // Rename \"Id\" to \"Identifier\"",
											"        delete payload.Id; // Remove the original \"Id\" field",
											"        //payload.Customer.Account.Address.PostalCode = null;",
											"        //payload.Project.DeliveryModels = [\"Other\"];",
											"        payload.Project = payload.Project || {}; // Ensure Project exists",
											"        payload.Marketing.CampaignName = \"TestCampaignName02\";",
											"        // Set the modified payload as the request body",
											"        pm.request.body.raw = JSON.stringify(payload);",
											"        console.log(`[Pre-req ${pm.info.requestName}] Transformed payload for UpdateOpportunity:`, payload);",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No payload found from GetOpportunity. Ensure the previous request executed successfully.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during payload preparation",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request payload:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ea1198a-5e78-4ca6-b255-83f9b2000c04",
										"exec": [
											"try {",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] UpdateOpportunity action succeeded`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Log success",
											"        console.log(`[Post-res ${pm.info.requestName}] Successfully updated Opportunity.`);",
											"    } else {",
											"        // Log failure",
											"        console.error(`[Post-res ${pm.info.requestName}] UpdateOpportunity action failed. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Update failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "41826bf8-233a-4d02-a30e-2fd48d00889d",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+14444444444\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": null,\n    \"ReviewStatus\": \"Action Required\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Prospect\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/UpdateOpportunity"
							},
							"response": [
								{
									"id": "cc33af67-01ac-47a1-949b-8f316019a14a",
									"name": "Partner 1 - UpdateOpportunity",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+14444444444\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": null,\n    \"ReviewStatus\": \"Action Required\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Prospect\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BASE_URL}}/UpdateOpportunity"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 18 Mar 2025 00:38:47 GMT",
											"enabled": true
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										},
										{
											"key": "Content-Length",
											"value": "59",
											"enabled": true
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"enabled": true
										},
										{
											"key": "x-amzn-RequestId",
											"value": "9d9332c9-7639-4b13-b1ea-896958941b4d",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"Id\": \"O5843005\",\n    \"LastModifiedDate\": \"2025-03-18T00:38:47Z\"\n}"
								}
							]
						},
						{
							"name": "Partner 1 - GetOpportunity Check",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse and validate the response",
											"        const responseBody = pm.response.json();",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Validate Opportunity attributes`, function () {",
											"            pm.expect(responseBody).to.have.property('Id');",
											"            pm.expect(responseBody).to.have.property('LifeCycle');",
											"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewStatus', 'Action Required');",
											"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewComments').that.is.not.empty;",
											"        });",
											"",
											"        // Store the complete response for subsequent requests",
											"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored updated Opportunity payload for ID: ${responseBody.Id}`);",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve updated Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f926d538-8031-4f26-bcce-8a09fa162897",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    if (opportunityId) {",
											"        console.log(`[Pre-req ${pm.info.requestName}] Fetching updated Opportunity with ID: ${opportunityId}`);",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No opportunityId found. Ensure it has been set before executing this action.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during pre-request execution",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8657cd58-0cf5-424a-a94d-9ed4fe7690c8",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
							},
							"response": [
								{
									"id": "0c05fb15-1bb3-480d-aa2d-0318633c6186",
									"name": "Partner 1 - GetOpportunity Check",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BASE_URL}}/GetOpportunity"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 18 Mar 2025 00:20:08 GMT",
											"enabled": true
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										},
										{
											"key": "Content-Length",
											"value": "2267",
											"enabled": true
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"enabled": true
										},
										{
											"key": "x-amzn-RequestId",
											"value": "4165d828-433d-4968-8c43-02e05b940f81",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1:691709974417:catalog/Sandbox/opportunity/O5843005\",\n    \"Catalog\": \"Sandbox\",\n    \"CreatedDate\": \"2025-03-17T23:55:22Z\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": null,\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": null\n            },\n            \"AwsAccountId\": \"111111111111\",\n            \"CompanyName\": \"ValidAWSCreate\",\n            \"Duns\": \"111100111\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": null,\n            \"WebsiteUrl\": \"www.test.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Executive\",\n                \"Email\": \"test@test.com\",\n                \"FirstName\": \"TestContact011\",\n                \"LastName\": \"MLastName001\",\n                \"Phone\": \"+14444444444\"\n            }\n        ]\n    },\n    \"Id\": \"O5843005\",\n    \"LastModifiedDate\": \"2025-03-18T00:19:47Z\",\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Approved\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Prospect\",\n        \"TargetCloseDate\": \"2029-10-05\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": \"Yes\",\n        \"CampaignName\": \"TestCampaignName02\",\n        \"Channels\": [\n            \"Content Syndication\"\n        ],\n        \"Source\": \"Marketing Activity\",\n        \"UseCases\": [\n            \"Analytics\"\n        ]\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"OpportunityOwner\",\n            \"Email\": \"mgztest234@testsandbox-00dva000000xjrrmau.com\",\n            \"FirstName\": \"Ming Test\",\n            \"LastName\": \"Alliance Lead\",\n            \"Phone\": null\n        },\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"testemail@test.com\",\n            \"FirstName\": \"TestContact001\",\n            \"LastName\": \"CLastName001\",\n            \"Phone\": \"+14444444444\"\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Architectural Validation\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": \"On-Prem\",\n        \"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n        \"CustomerUseCase\": \"Security & Compliance\",\n        \"DeliveryModels\": [\n            \"SaaS or PaaS\"\n        ],\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"12500\",\n                \"CurrencyCode\": \"USD\",\n                \"EstimationUrl\": null,\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": \"TestSolution\",\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Conducted POC / Demo\"\n        ],\n        \"Title\": \"New Business Deal - 7248\"\n    },\n    \"RelatedEntityIdentifiers\": {\n        \"AwsMarketplaceOffers\": [],\n        \"AwsProducts\": [],\n        \"Solutions\": []\n    },\n    \"SoftwareRevenue\": null\n}"
								}
							]
						},
						{
							"name": "Partner 2 - ListEngagementResourceAssociations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71531857-ca03-45c3-8739-7a7593585860",
										"exec": [
											"if (pm.response.code === 200) {",
											"    const response = pm.response.json();",
											"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
											"    const firstEngagement = response.EngagementResourceAssociationSummaries[0];",
											"        let engagementId = firstEngagement.EngagementId;",
											"",
											"        // Save the Id to a Postman variable",
											"        pm.collectionVariables.set(\"engagementId\", engagementId);",
											"",
											"} else {",
											"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3e7362e5-c729-4346-8307-61e370d79817",
										"exec": [
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "b2de2d25-7242-44fc-b0ce-0bd98783fd32",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "awsv4",
									"awsv4": {
										"sessionToken": "{{vault:aws.sessionToken.receiving}}",
										"secretKey": "{{vault:aws.secretKey.receiving}}",
										"accessKey": "{{vault:aws.accessKey.receiving}}",
										"service": "partnercentral-selling",
										"region": "us-east-1"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"ResourceType\": \"Opportunity\",\n\t\"ResourceIdentifier\": \"{{acceptedEngagementOpportunityID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagementResourceAssociations",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html)"
							},
							"response": [
								{
									"id": "61abb5c4-6263-423a-8d28-404568d07e26",
									"name": "Partner 2 - ListEngagementResourceAssociations",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"ResourceType\": \"Opportunity\",\n\t\"ResourceIdentifier\": \"{{acceptedEngagementOpportunityID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BASE_URL}}/ListEngagementResourceAssociations"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Tue, 18 Mar 2025 01:12:20 GMT",
											"enabled": true
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										},
										{
											"key": "Content-Length",
											"value": "199",
											"enabled": true
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"enabled": true
										},
										{
											"key": "x-amzn-RequestId",
											"value": "b82b9b50-85ec-4f7d-8020-df4d2cc91069",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"EngagementResourceAssociationSummaries\": [\n        {\n            \"Catalog\": \"Sandbox\",\n            \"CreatedBy\": \"950857913199\",\n            \"EngagementId\": \"eng-m35fa313n134fa\",\n            \"ResourceId\": \"O5843044\",\n            \"ResourceType\": \"Opportunity\"\n        }\n    ],\n    \"NextToken\": null\n}"
								}
							]
						},
						{
							"name": "Partner 2 - ListResourceSnapshots",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9154c78-a3e6-41a0-a5a7-2d409df018ce",
										"exec": [
											"if (pm.response.code === 200) {",
											"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
											"} else {",
											"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "368b59f2-0081-4886-ba7c-819201c5af53",
										"exec": [
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "fa3d3a1d-430f-4b8e-b463-4e8716197d43",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "X-Amzn-User-Agent",
										"value": "{{companyName}}|PostmanCollection|{{crm}}|v1",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"EngagementIdentifier\": \"{{engagementId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListResourceSnapshots"
							},
							"response": []
						},
						{
							"name": "Partner 2 - GetResourceSnapshot",
							"id": "3adb02a0-74ce-42ff-bded-d1c583be5eae",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "awsv4",
									"awsv4": {
										"region": "{{aws.region}}",
										"service": "{{aws.partnercentral.service}}",
										"sessionToken": "{{vault:aws.sessionToken.receiving}}",
										"secretKey": "{{vault:aws.secretKey.receiving}}",
										"accessKey": "{{vault:aws.accessKey.receiving}}",
										"addAuthDataToQuery": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"EngagementIdentifier\": \"{{engagementId}}\",\n   \"ResourceType\": \"Opportunity\",\n   \"ResourceIdentifier\": \"{{acceptedEngagementOpportunityID}}\",\n   \"ResourceSnapshotTemplateIdentifier\": \"Opportunity\",\n   \"Revision\": 1\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetResourceSnapshot"
							},
							"response": []
						},
						{
							"name": "Partner 2 - GetOpportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse and validate the response",
											"        const responseBody = pm.response.json();",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Validate Opportunity attributes`, function () {",
											"            pm.expect(responseBody).to.have.property('Id');",
											"            pm.expect(responseBody).to.have.property('LifeCycle');",
											"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewStatus', 'Action Required');",
											"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewComments').that.is.not.empty;",
											"        });",
											"",
											"        // Store the complete response for subsequent requests",
											"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored updated Opportunity payload for ID: ${responseBody.Id}`);",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve updated Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "f926d538-8031-4f26-bcce-8a09fa162897",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    if (opportunityId) {",
											"        console.log(`[Pre-req ${pm.info.requestName}] Fetching updated Opportunity with ID: ${opportunityId}`);",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No opportunityId found. Ensure it has been set before executing this action.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during pre-request execution",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "f8ba55be-a64f-41c5-801b-17d3171a3f61",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "awsv4",
									"awsv4": {
										"region": "{{aws.region}}",
										"service": "{{aws.partnercentral.service}}",
										"sessionToken": "{{vault:aws.sessionToken.receiving}}",
										"secretKey": "{{vault:aws.secretKey.receiving}}",
										"accessKey": "{{vault:aws.accessKey.receiving}}",
										"addAuthDataToQuery": false
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{acceptedEngagementOpportunityID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
							},
							"response": []
						},
						{
							"name": "Partner 2 - UpdateOpportunity",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "3f66b338-4d44-4084-9f9a-cd06ae71bb28",
										"exec": [
											"try {",
											"    // Retrieve the stored Opportunity payload",
											"    const getOpportunityPayload = pm.collectionVariables.get(\"getOpportunityPayload\");",
											"",
											"    if (getOpportunityPayload) {",
											"        // Parse the payload",
											"        const payload = JSON.parse(getOpportunityPayload);",
											"",
											"        // Update the necessary fields",
											"        payload.Identifier = payload.Id; // Rename \"Id\" to \"Identifier\"",
											"        delete payload.Id; // Remove the original \"Id\" field",
											"        //payload.Customer.Account.Address.PostalCode = null;",
											"        //payload.Project.DeliveryModels = [\"Other\"];",
											"        payload.Project = payload.Project || {}; // Ensure Project exists",
											"        payload.Marketing.CampaignName = \"TestCampaignName02\";",
											"        // Set the modified payload as the request body",
											"        pm.request.body.raw = JSON.stringify(payload);",
											"        console.log(`[Pre-req ${pm.info.requestName}] Transformed payload for UpdateOpportunity:`, payload);",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No payload found from GetOpportunity. Ensure the previous request executed successfully.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during payload preparation",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request payload:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "7ea1198a-5e78-4ca6-b255-83f9b2000c04",
										"exec": [
											"try {",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] UpdateOpportunity action succeeded`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Log success",
											"        console.log(`[Post-res ${pm.info.requestName}] Successfully updated Opportunity.`);",
											"    } else {",
											"        // Log failure",
											"        console.error(`[Post-res ${pm.info.requestName}] UpdateOpportunity action failed. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Update failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "dfb0b807-17ef-433a-ab69-40802e28ca70",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+14444444444\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": null,\n    \"ReviewStatus\": \"Action Required\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Prospect\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/UpdateOpportunity"
							},
							"response": []
						}
					],
					"id": "986c10e5-6482-4a03-8ce2-7198e5eee5c0"
				},
				{
					"name": "Track partners in a multi-partner opportunity",
					"item": [
						{
							"name": "Receiving Partner - StartEngagementByAcceptingInvitationTask",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9bcc3dd-c5ba-46e7-8271-0bd93d6d59cd",
										"exec": [
											"try {",
											"    // Parse the response JSON",
											"    const response = pm.response.json();",
											"",
											"    // Extract response attributes",
											"    const opportunityId = response.OpportunityId || \"Unknown Opportunity\";",
											"    const taskDetails = {",
											"        TaskId: response.TaskId || \"N/A\",",
											"        TaskArn: response.TaskArn || \"N/A\",",
											"        TaskStatus: response.TaskStatus || \"N/A\"",
											"    };",
											"",
											"    pm.collectionVariables.set(\"acceptedEngagementOpportunityID\", opportunityId);",
											"",
											"    // Add tests for response validation",
											"    pm.test(`[Post-res ${pm.info.requestName}] Response structure validation`, function () {",
											"        pm.response.to.have.status(200);",
											"        pm.expect(response).to.have.property(\"OpportunityId\");",
											"        pm.expect(taskDetails.TaskStatus).to.not.equal(\"FAILED\");",
											"    });",
											"",
											"    // Add tests for individual fields",
											"    pm.test(`[Post-res ${pm.info.requestName}] Task details validation`, function () {",
											"        pm.expect(taskDetails.TaskId).to.not.equal(\"N/A\");",
											"        pm.expect(taskDetails.TaskArn).to.not.equal(\"N/A\");",
											"        pm.expect(taskDetails.TaskStatus).to.not.equal(\"N/A\");",
											"    });",
											"",
											"    // Log the action execution and task details",
											"    console.log(",
											"        `[Post-res ${pm.info.requestName}] ${pm.info.requestName} executed. Started engagement on ${opportunityId}. Task details: TaskId=${taskDetails.TaskId}, TaskArn=${taskDetails.TaskArn}, TaskStatus=${taskDetails.TaskStatus}.`",
											"    );",
											"} catch (error) {",
											"    // Handle errors during response parsing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
											"        throw error;",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "cc229de6-5890-4c2b-8302-ed678150cd25",
										"exec": [
											"try {",
											"    /// Step 1: Generate Client Token",
											"    const clientToken = pm.variables.replaceIn('{{$randomUUID}}')",
											"",
											"    // Save the generated client token as a local variable",
											"    pm.variables.set('clientToken', pm.variables.replaceIn('{{$randomUUID}}'));",
											"    console.log(`[${pm.info.requestName}] Generated Client Token: ${clientToken}`);",
											"",
											"    // Save the generated client token as a local variable",
											"    pm.variables.set('clientToken', clientToken);",
											"    console.log(`[Pre-req ${pm.info.requestName}] Generated Client Token: ${clientToken}`);",
											"    ",
											"    // Step 2: Retrieve acceptingEngagementInvitationID",
											"    const acceptingEngagementInvitationID = pm.collectionVariables.get(\"acceptingEngagementInvitationID\");",
											"",
											"    if (acceptingEngagementInvitationID) {",
											"        // Log the action details for accepting the engagement invitation",
											"        console.log(`[Pre-req ${pm.info.requestName}] Accepting engagement invitation with ARN: ${acceptingEngagementInvitationID}`);",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No acceptingEngagementInvitationID found. Ensure it has been set before executing this action.`);",
											"    }",
											"",
											"    // Log the action start",
											"    console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
											"",
											"} catch (error) {",
											"    // Handle any errors during token generation or retrieving engagement ID",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error occurred:`, error);",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e93a8dc3-ae12-4fd4-b3a7-10834bb16800",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "awsv4",
									"awsv4": {
										"sessionToken": "{{vault:aws.sessionToken.receiving}}",
										"secretKey": "{{vault:aws.secretKey.receiving}}",
										"accessKey": "{{vault:aws.accessKey.receiving}}",
										"service": "{{aws.marketplace.service}}",
										"region": "us-east-1"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Catalog\": \"{{catalog}}\",\n\t\"Identifier\": \"{{acceptingEngagementInvitationID}}\",\n\t\"ClientToken\": \"{{clientToken}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/StartEngagementByAcceptingInvitationTask"
							},
							"response": []
						},
						{
							"name": "ListEngagementResourceAssociations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71531857-ca03-45c3-8739-7a7593585860",
										"exec": [
											"if (pm.response.code === 200) {",
											"    const response = pm.response.json();",
											"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
											"    const firstEngagement = response.EngagementResourceAssociationSummaries[0];",
											"        let engagementId = firstEngagement.EngagementId;",
											"",
											"        // Save the Id to a Postman variable",
											"        pm.collectionVariables.set(\"engagementId\", engagementId);",
											"",
											"} else {",
											"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3e7362e5-c729-4346-8307-61e370d79817",
										"exec": [
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a08ebead-315f-46b5-8e72-9f71685fd181",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"EngagementIdentifier\": \"{{acceptingEngagementInvitationID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagementResourceAssociations",
								"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html)"
							},
							"response": []
						},
						{
							"name": "ListEngagementMembers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71531857-ca03-45c3-8739-7a7593585860",
										"exec": [
											"if (pm.response.code === 200) {",
											"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
											"} else {",
											"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3e7362e5-c729-4346-8307-61e370d79817",
										"exec": [
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "a9cfc9af-ec8d-47c6-960d-5cf6ebc8157a",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{acceptingEngagementInvitationID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagementMembers"
							},
							"response": []
						}
					],
					"id": "960ea402-ccb0-4657-9ac1-658fa2cb9f51"
				},
				{
					"name": "Check status of resouce snapshot jobs associated with a multi-partner opportunity",
					"item": [
						{
							"name": "ListEngagementResourceAssociations",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "71531857-ca03-45c3-8739-7a7593585860",
										"exec": [
											"if (pm.response.code === 200) {",
											"    const response = pm.response.json();",
											"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
											"    const firstEngagement = response.EngagementResourceAssociationSummaries[0];",
											"        let engagementId = firstEngagement.EngagementId;",
											"",
											"        // Save the Id to a Postman variable",
											"        pm.collectionVariables.set(\"engagementId\", engagementId);",
											"",
											"} else {",
											"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "3e7362e5-c729-4346-8307-61e370d79817",
										"exec": [
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "841d4ac3-70a9-4623-a6bd-b2d3f118e163",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"ResourceType\": \"Opportunity\",\n\t\"ResourceIdentifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagementResourceAssociations"
							},
							"response": [
								{
									"id": "9b39700a-302f-4d1e-84ea-001202a94c9d",
									"name": "ListEngagementResourceAssociations",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"ResourceType\": \"Opportunity\",\n\t\"ResourceIdentifier\": \"O5066815\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BASE_URL}}/ListEngagementResourceAssociations"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 15 Jan 2025 19:31:20 GMT",
											"enabled": true
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										},
										{
											"key": "Content-Length",
											"value": "62",
											"enabled": true
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"enabled": true
										},
										{
											"key": "x-amzn-RequestId",
											"value": "05ef3578-c2f8-4618-9776-f0e3c95e9066",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n\t\"EngagementResourceAssociationSummaries\": [\n\t\t{\n\t\t\t\"Catalog\": \"AWS\",\n\t\t\t\"EngagementId\": \"eng-6wq6i74hsqbiwm\",\n\t\t\t\"ResourceArn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/AWS/opportunity/O1111111\",\n\t\t\t\"ResourceId\": \"O1111111\",\n\t\t\t\"ResourceOwner\": \"111111111111\",\n\t\t\t\"ResourceType\": \"Opportunity\"\n\t\t}\n\t],\n\t\"NextToken\": null\n}"
								}
							]
						},
						{
							"name": "ListResourceSnapshotJobs",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a9154c78-a3e6-41a0-a5a7-2d409df018ce",
										"exec": [
											"if (pm.response.code === 200) {",
											"    const response = pm.response.json();",
											"    console.log(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded.`);",
											"    const firstResouceSnapshotJob = response.ResourceSnapshotJobSummaries[0];",
											"        let resourceSnapshotJobIdentifier = firstResouceSnapshotJob.Id;",
											"",
											"        // Save the Id to a Postman variable",
											"        pm.collectionVariables.set(\"resourceSnapshotJobIdentifier\", resourceSnapshotJobIdentifier);",
											"",
											"} else {",
											"    console.error(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed. Status Code: ${pm.response.code}`);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "368b59f2-0081-4886-ba7c-819201c5af53",
										"exec": [
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6afc4f52-543e-43d7-807b-2252b56ae39b",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									},
									{
										"key": "X-Amzn-User-Agent",
										"value": "{{companyName}}|PostmanCollection|{{crm}}|v1",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"EngagementIdentifier\": \"{{engagementId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListResourceSnapshotJobs"
							},
							"response": [
								{
									"id": "2ba5d502-dcec-4fdb-8c59-70e286d34e8f",
									"name": "ListResourceSnapshotJobs",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											},
											{
												"key": "X-Amzn-User-Agent",
												"value": "{{companyName}}|PostmanCollection|{{crm}}|v1",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"EngagementIdentifier\": \"{{engagementId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BASE_URL}}/ListResourceSnapshotJobs"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 12 Feb 2025 00:56:59 GMT",
											"enabled": true
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										},
										{
											"key": "Content-Length",
											"value": "435",
											"enabled": true
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"enabled": true
										},
										{
											"key": "x-amzn-RequestId",
											"value": "cf5f245e-2864-4e70-876c-4c2bf1198ebf",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"NextToken\": null,\n    \"ResourceSnapshotJobSummaries\": [\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/Sandbox/resource-snapshot-job/job-q4keacs03lh22\",\n            \"EngagementId\": \"eng-9eqn01hpy0ydo8\",\n            \"Id\": \"job-q4keacs03lh22\",\n            \"Status\": \"Running\"\n        },\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/Sandbox/resource-snapshot-job/job-o2wlt91pi52sj\",\n            \"EngagementId\": \"eng-9eqn01hpy0ydo8\",\n            \"Id\": \"job-o2wlt91pi52sj\",\n            \"Status\": \"Running\"\n        }\n    ]\n}"
								}
							]
						},
						{
							"name": "GetResourceSnapshotJob",
							"id": "3ddde660-0aff-4cd3-b11b-08285cca62be",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"ResourceSnapshotJobIdentifier\": \"{{resourceSnapshotJobIdentifier}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetResourceSnapshotJob"
							},
							"response": [
								{
									"id": "c88181c9-e4c6-4856-9cc2-85d4303564f5",
									"name": "GetResourceSnapshotJob",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"ResourceSnapshotJobIdentifier\": \"{{resourceSnapshotJobIdentifier}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BASE_URL}}/GetResourceSnapshotJob"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 12 Feb 2025 01:01:04 GMT",
											"enabled": true
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										},
										{
											"key": "Content-Length",
											"value": "546",
											"enabled": true
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"enabled": true
										},
										{
											"key": "x-amzn-RequestId",
											"value": "ec4913cd-ea20-4091-b5f9-b42944ef2967",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1:691709974417:catalog/Sandbox/resource-snapshot-job/job-q4keacs03lh22\",\n    \"Catalog\": \"Sandbox\",\n    \"CreatedAt\": \"2025-02-12T00:16:20.244448744Z\",\n    \"EngagementId\": \"eng-9eqn01hpy0ydo8\",\n    \"Id\": \"job-q4keacs03lh22\",\n    \"LastFailure\": null,\n    \"LastSuccessfulExecutionDate\": \"2025-02-12T00:16:26.420762045Z\",\n    \"ResourceArn\": \"arn:aws:partnercentral:us-east-1:691709974417:catalog/Sandbox/opportunity/O5345867\",\n    \"ResourceId\": \"O5345867\",\n    \"ResourceSnapshotTemplateName\": \"OpportunitySummaryView\",\n    \"ResourceType\": \"Opportunity\",\n    \"Status\": \"Running\"\n}"
								}
							]
						}
					],
					"id": "ff709598-9407-4336-8eb6-325898952be3"
				}
			],
			"id": "315c3d47-b860-4e67-b2d4-b56dac666ac2"
		},
		{
			"name": "Other common opportunity actions",
			"item": [
				{
					"name": "Updating an opportunity",
					"item": [
						{
							"name": "GetOpportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "369ddc8f-9c2e-4abe-b586-c1872793c0f5",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        const responseBody = pm.response.json();",
											"",
											"        // Perform basic validation on the response",
											"        pm.test(\"Response has the correct structure\", function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"            pm.expect(responseBody).to.have.property('Id');",
											"        });",
											"",
											"        // Store the complete response in a collection variable",
											"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored response payload for ID: ${responseBody.Id}`);",
											"",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e20de5e-447e-48a1-b53d-d7811c1d0814",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the start of the action with the Identifier",
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "0d58cc7c-1efa-4f22-a3f6-c4787c1a5313",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity"
							},
							"response": []
						},
						{
							"name": "UpdateOpportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c07283d-b4f0-4ca2-805a-13b7820deab7",
										"exec": [
											"try {",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        // Log success and add a test for status 200",
											"        console.log(`[Post-res ${pm.info.requestName}] UpdateOpportunity action succeeded.`);",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"    } else {",
											"        // Log failure and add a test for non-200 status",
											"        console.error(`[Post-res ${pm.info.requestName}] UpdateOpportunity action failed. Status Code: ${pm.response.code}`);",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is not 200`, function () {",
											"            pm.response.to.not.have.status(200);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"",
											"    // Add a test to capture the error",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
											"        throw error; // Ensure the test fails if an error occurs",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d809d3a0-fd74-412a-bc3e-41133c4ee995",
										"exec": [
											"try {",
											"    // Retrieve the stored payload from the GetOpportunity action",
											"    const getOpportunityPayload = pm.collectionVariables.get(\"getOpportunityPayload\");",
											"",
											"    if (getOpportunityPayload) {",
											"        // Parse the stored payload",
											"        const payload = JSON.parse(getOpportunityPayload);",
											"",
											"        // Transform the payload for UpdateOpportunity",
											"        payload.Identifier = payload.Id; // Rename \"Id\" to \"Identifier\"",
											"        delete payload.Id; // Remove the original \"Id\" field",
											"",
											"        // Update LifeCycle fields",
											"        payload.LifeCycle.NextSteps = \"Finalize the contract and obtain signatures.\"; // Update NextSteps",
											"        payload.LifeCycle.TargetCloseDate = \"2025-12-31\"; // Update TargetCloseDate",
											"        payload.LifeCycle.Stage = \"Business Validation\"; // Update Stage",
											"",
											"        // Set the modified payload as the request body",
											"        pm.request.body.raw = JSON.stringify(payload);",
											"        console.log(`[Pre-req ${pm.info.requestName}] Transformed payload for UpdateOpportunity:`, payload);",
											"",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No payload found from GetOpportunity. Ensure the previous request executed successfully.`);",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during payload transformation",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request payload:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5b1365bb-4c4e-4884-86e9-b3097e406bbb",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+14444444444\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": null,\n    \"ReviewStatus\": \"Approved\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Qualified\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/UpdateOpportunity"
							},
							"response": []
						},
						{
							"name": "GetOpportunityToVerify",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "369ddc8f-9c2e-4abe-b586-c1872793c0f5",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        const responseBody = pm.response.json();",
											"",
											"        // Expected values for validation",
											"        const expectedNextSteps = \"Finalize the contract and obtain signatures.\";",
											"        const expectedTargetCloseDate = \"2025-12-31\";",
											"        const expectedStage = \"Business Validation\";",
											"",
											"        // Validate the updated LifeCycle attributes",
											"        pm.test(`[Post-res ${pm.info.requestName}] Validate updated LifeCycle attributes`, function () {",
											"            pm.expect(responseBody).to.have.property('LifeCycle');",
											"            pm.expect(responseBody.LifeCycle).to.have.property('NextSteps', expectedNextSteps);",
											"            pm.expect(responseBody.LifeCycle).to.have.property('TargetCloseDate', expectedTargetCloseDate);",
											"            pm.expect(responseBody.LifeCycle).to.have.property('Stage', expectedStage);",
											"        });",
											"",
											"        // Log the success",
											"        console.log(`[Post-res ${pm.info.requestName}] Successfully validated updated LifeCycle attributes for Opportunity ID: ${opportunityId}`);",
											"        console.log(`[Post-res ${pm.info.requestName}] Updated LifeCycle:`, {",
											"            NextSteps: responseBody.LifeCycle.NextSteps,",
											"            TargetCloseDate: responseBody.LifeCycle.TargetCloseDate,",
											"            Stage: responseBody.LifeCycle.Stage",
											"        });",
											"    } else {",
											"        // Log the failure",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5e1adcb0-7906-423c-8213-2af34998f479",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    if (opportunityId) {",
											"        console.log(`[Pre-req ${pm.info.requestName}] Fetching updated Opportunity with ID: ${opportunityId}`);",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No opportunityId found. Ensure it has been set before executing this action.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during pre-request execution",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "5220bc78-7ad9-479d-aa82-500dd59a7bec",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity"
							},
							"response": []
						}
					],
					"id": "61c7a1da-7eff-4052-801d-4255dae3dd50",
					"description": "This folder contains APIs to modify existing opportunities. It includes actions to fetch opportunity details, update them, and verify the changes to ensure consistency and correctness."
				},
				{
					"name": "Launching an Opportunity",
					"item": [
						{
							"name": "GetOpportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "369ddc8f-9c2e-4abe-b586-c1872793c0f5",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        const responseBody = pm.response.json();",
											"",
											"        // Perform basic validation on the response",
											"        pm.test(\"Response has the correct structure\", function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"            pm.expect(responseBody).to.have.property('Id');",
											"        });",
											"",
											"        // Store the complete response in a collection variable",
											"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored response payload for ID: ${responseBody.Id}`);",
											"",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e20de5e-447e-48a1-b53d-d7811c1d0814",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the start of the action with the Identifier",
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "40652a92-4a08-4160-8bbd-dfc89a44ca8b",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity"
							},
							"response": []
						},
						{
							"name": "UpdateOpportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c07283d-b4f0-4ca2-805a-13b7820deab7",
										"exec": [
											"try {",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        // Log success and add a test for status 200",
											"        console.log(`[Post-res ${pm.info.requestName}] UpdateOpportunity action succeeded.`);",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"    } else {",
											"        // Log failure and add a test for non-200 status",
											"        console.error(`[Post-res ${pm.info.requestName}] UpdateOpportunity action failed. Status Code: ${pm.response.code}`);",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is not 200`, function () {",
											"            pm.response.to.not.have.status(200);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"",
											"    // Add a test to capture the error",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
											"        throw error; // Ensure the test fails if an error occurs",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "d809d3a0-fd74-412a-bc3e-41133c4ee995",
										"exec": [
											"try {",
											"    // Retrieve the stored payload from the GetOpportunity action",
											"    const getOpportunityPayload = pm.collectionVariables.get(\"getOpportunityPayload\");",
											"",
											"    if (getOpportunityPayload) {",
											"        // Parse the stored payload",
											"        const payload = JSON.parse(getOpportunityPayload);",
											"",
											"        // Transform the payload for UpdateOpportunity",
											"        payload.Identifier = payload.Id; // Rename \"Id\" to \"Identifier\"",
											"        delete payload.Id; // Remove the original \"Id\" field",
											"",
											"        // Update LifeCycle fields",
											"        payload.LifeCycle.Stage = \"Launched\"; // Update Stage",
											"",
											"        // Set the modified payload as the request body",
											"        pm.request.body.raw = JSON.stringify(payload);",
											"        console.log(`[Pre-req ${pm.info.requestName}] Transformed payload for UpdateOpportunity:`, payload);",
											"",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No payload found from GetOpportunity. Ensure the previous request executed successfully.`);",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during payload transformation",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request payload:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "2fcea47f-aaa6-4a95-8ae3-35456f0d3a35",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+3555895148428\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": null,\n    \"ReviewStatus\": \"Approved\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Qualified\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/UpdateOpportunity"
							},
							"response": []
						},
						{
							"name": "GetOpportunityToVerify",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "369ddc8f-9c2e-4abe-b586-c1872793c0f5",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        const responseBody = pm.response.json();",
											"",
											"        // Expected values for validation",
											"        const expectedStage = \"Launched\";",
											"",
											"        // Validate the updated LifeCycle attributes",
											"        pm.test(`[Post-res ${pm.info.requestName}] Validate updated LifeCycle attributes`, function () {",
											"            pm.expect(responseBody).to.have.property('LifeCycle');",
											"            pm.expect(responseBody.LifeCycle).to.have.property('Stage', expectedStage);",
											"        });",
											"",
											"        // Log the success",
											"        console.log(`[Post-res ${pm.info.requestName}] Successfully validated updated LifeCycle attributes for Opportunity ID: ${opportunityId}`);",
											"        console.log(`[Post-res ${pm.info.requestName}] Updated LifeCycle:`, {",
											"            NextSteps: responseBody.LifeCycle.NextSteps,",
											"            TargetCloseDate: responseBody.LifeCycle.TargetCloseDate,",
											"            Stage: responseBody.LifeCycle.Stage",
											"        });",
											"    } else {",
											"        // Log the failure",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5e1adcb0-7906-423c-8213-2af34998f479",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    if (opportunityId) {",
											"        console.log(`[Pre-req ${pm.info.requestName}] Fetching updated Opportunity with ID: ${opportunityId}`);",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No opportunityId found. Ensure it has been set before executing this action.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during pre-request execution",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "e593eacd-5a97-43f5-8290-ce6d9a46a4cd",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity"
							},
							"response": []
						}
					],
					"id": "26e9d94f-bb25-405f-8981-5deb1effb205",
					"description": "This folder contains APIs to modify existing opportunities. It includes actions to fetch opportunity details, update them, and verify the changes to ensure consistency and correctness."
				},
				{
					"name": "Associating an AWS Marketplace offer",
					"item": [
						{
							"name": "GetOpportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "369ddc8f-9c2e-4abe-b586-c1872793c0f5",
										"exec": [
											"try {",
											"    // Parse the response body",
											"    const responseBody = pm.response.json();",
											"",
											"    // Check the response status",
											"    pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    // Validate that RelatedEntityIdentifiers.AwsMarketplaceOffers is an empty array",
											"    pm.test(`[Post-res ${pm.info.requestName}] Validate AwsMarketplaceOffers is an empty array`, function () {",
											"        pm.expect(responseBody).to.have.property('RelatedEntityIdentifiers');",
											"        pm.expect(responseBody.RelatedEntityIdentifiers).to.have.property('AwsMarketplaceOffers');",
											"        pm.expect(responseBody.RelatedEntityIdentifiers.AwsMarketplaceOffers).to.be.an('array').that.is.empty;",
											"    });",
											"",
											"    // Log success",
											"    console.log(`[Post-res ${pm.info.requestName}] AwsMarketplaceOffers is an empty array as expected.`);",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "ac4811d7-0e52-4b36-86f9-633a06ac1bc5",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the start of the action with the Identifier",
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "d2e176ac-77c4-495a-b01c-f2b303859ec1",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity"
							},
							"response": [
								{
									"id": "cf4b28bc-71b8-4808-b494-e90d69169ec3",
									"name": "GetOpportunity",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BASE_URL}}/GetOpportunity"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 12 Feb 2025 23:08:45 GMT",
											"enabled": true
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										},
										{
											"key": "Content-Length",
											"value": "2267",
											"enabled": true
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"enabled": true
										},
										{
											"key": "x-amzn-RequestId",
											"value": "99856f97-ca31-477f-bb22-f468962724d9",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/Sandbox/opportunity/O1111111\",\n    \"Catalog\": \"Sandbox\",\n    \"CreatedDate\": \"2025-02-12T17:25:49Z\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": null,\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": null\n            },\n            \"AwsAccountId\": \"111111111111\",\n            \"CompanyName\": \"ValidAWSCreate\",\n            \"Duns\": \"111100111\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": null,\n            \"WebsiteUrl\": \"www.test.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Executive\",\n                \"Email\": \"test@test.com\",\n                \"FirstName\": \"TestContact011\",\n                \"LastName\": \"MLastName001\",\n                \"Phone\": \"+14444444444\"\n            }\n        ]\n    },\n    \"Id\": \"O1111111\",\n    \"LastModifiedDate\": \"2025-02-12T23:03:38Z\",\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Approved\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Prospect\",\n        \"TargetCloseDate\": \"2029-10-05\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": \"Yes\",\n        \"CampaignName\": \"TestCampaignName02\",\n        \"Channels\": [\n            \"Content Syndication\"\n        ],\n        \"Source\": \"Marketing Activity\",\n        \"UseCases\": [\n            \"Analytics\"\n        ]\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"OpportunityOwner\",\n            \"Email\": \"mgztest234@testsandbox-00dva000000xjrrmau.com\",\n            \"FirstName\": \"Ming Test\",\n            \"LastName\": \"Alliance Lead\",\n            \"Phone\": null\n        },\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"testemail@test.com\",\n            \"FirstName\": \"TestContact001\",\n            \"LastName\": \"CLastName001\",\n            \"Phone\": \"+14444444444\"\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Architectural Validation\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": \"On-Prem\",\n        \"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n        \"CustomerUseCase\": \"Security & Compliance\",\n        \"DeliveryModels\": [\n            \"SaaS or PaaS\"\n        ],\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"12500\",\n                \"CurrencyCode\": \"USD\",\n                \"EstimationUrl\": null,\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": \"TestSolution\",\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Conducted POC / Demo\"\n        ],\n        \"Title\": \"New Business Deal - 4711\"\n    },\n    \"RelatedEntityIdentifiers\": {\n        \"AwsMarketplaceOffers\": [],\n        \"AwsProducts\": [],\n        \"Solutions\": []\n    },\n    \"SoftwareRevenue\": null\n}"
								}
							]
						},
						{
							"name": "List AWS Marketplace Offers",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09273b28-c68d-43e0-9c30-e1074b818053",
										"exec": [
											"try {",
											"    // Parse the response body",
											"    const responseBody = pm.response.json();",
											"",
											"    // Check if the response indicates an asynchronous operation",
											"    if (responseBody.ChangeSetId || responseBody.RequestId) {",
											"        const changeSetId = responseBody.ChangeSetId || responseBody.RequestId;",
											"",
											"        // Save the ChangeSetId/RequestId for polling",
											"        pm.collectionVariables.set(\"pollingId\", changeSetId);",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored polling ID: ${changeSetId}. Waiting for results.`);",
											"    } else if (responseBody.EntitySummaryList && responseBody.EntitySummaryList.length > 0) {",
											"        // Extract the AwsMarketplaceOffer ID when results are ready",
											"        const awsMarketplaceOfferId = responseBody.EntitySummaryList[0].EntityArn; // Assuming you need the first Offer ID",
											"",
											"        // Store the AwsMarketplaceOffer ID for subsequent requests",
											"        pm.collectionVariables.set(\"awsMarketplaceOfferId\", awsMarketplaceOfferId);",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored AwsMarketplaceOffer ID: ${awsMarketplaceOfferId}`);",
											"    } else {",
											"        console.warn(`[Post-res ${pm.info.requestName}] No EntitySummaryList or ChangeSetId/RequestId found in the response.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in response processing`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "69f2631a-9d96-445b-9831-c2b00e98300f",
										"exec": [
											"console.log(`[Pre-req ${pm.info.requestName}] Executing ${pm.info.requestName} action.`);",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "57f70a90-8a6a-453e-a5fb-9feeb899949c",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "awsv4",
									"awsv4": {
										"sessionToken": "{{vault:aws.sessionToken.inviting}}",
										"service": "{{aws.marketplace.service}}",
										"secretKey": "{{vault:aws.secretKey.inviting}}",
										"accessKey": "{{vault:aws.accessKey.inviting}}",
										"region": "us-east-1"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"AWSMarketplace\",\n    \"EntityType\": \"Offer\",\n    \"MaxResults\": 1\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{_.CAPI_PROD}}/ListEntities"
							},
							"response": [
								{
									"id": "b55fba24-ceb2-48fb-82c7-11cc940939aa",
									"name": "List AWS Marketplace Offers",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"Catalog\": \"AWSMarketplace\",\n    \"EntityType\": \"Offer\",\n    \"MaxResults\": 1\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{_.CAPI_PROD}}/ListEntities"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 12 Feb 2025 23:51:23 GMT",
											"enabled": true
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										},
										{
											"key": "Content-Length",
											"value": "910",
											"enabled": true
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"enabled": true
										},
										{
											"key": "x-amzn-RequestId",
											"value": "b045c3ad-3f83-4cab-9504-f5117f09c9ca",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"EntitySummaryList\": [\n        {\n            \"AmiProductSummary\": null,\n            \"ContainerProductSummary\": null,\n            \"DataProductSummary\": null,\n            \"EntityArn\": \"arn:aws:aws-marketplace:us-east-1:111111111111:AWSMarketplace/Offer/offer-vvk7ddmg2tt2i\",\n            \"EntityId\": \"offer-vvk7ddmg2tt2i\",\n            \"EntityType\": \"Offer\",\n            \"LastModifiedDate\": \"2025-01-28T23:48:06Z\",\n            \"Name\": \"Demo Private Offer\",\n            \"OfferSummary\": {\n                \"AvailabilityEndDate\": \"2025-02-12T23:59:59Z\",\n                \"BuyerAccounts\": [\n                    \"222222222222\",\n                    \"333333333333\"\n                ],\n                \"Name\": \"Demo Private Offer\",\n                \"ProductId\": \"prod-uxaz6zgh52ooa\",\n                \"ReleaseDate\": null,\n                \"ResaleAuthorizationId\": null,\n                \"State\": \"Draft\",\n                \"Targeting\": [\n                    \"BuyerAccounts\"\n                ]\n            },\n            \"ResaleAuthorizationSummary\": null,\n            \"SaaSProductSummary\": null,\n            \"TypeAttributes\": null,\n            \"Visibility\": \"Private\"\n        }\n    ],\n    \"NextToken\": \"rO0ABXVyABNbTGphdmEubGFuZy5PYmplY3Q7kM5YnxBzKWwCAAB4cAAAAAJzcgAOamF2YS5sYW5nLkxvbm\"\n}"
								}
							]
						},
						{
							"name": "AssociateOpportunity - AWS Marketplace Offer",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e784582-58cc-4aee-aece-98065aab311a",
										"exec": [
											"try {",
											"    // Retrieve the awsMarketplaceOfferId and opportunityId from Postman collection variables",
											"    let awsMarketplaceOfferId = pm.collectionVariables.get(\"awsMarketplaceOfferId\");",
											"    let opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Add a test to validate the status code",
											"    pm.test(\"Status code is 200\", function () {",
											"        pm.response.to.have.status(200);",
											"    });",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        console.log(`[Post-res ${pm.info.requestName}] Successfully associated AWS MP Offer ID: ${awsMarketplaceOfferId} with Opportunity ID: ${opportunityId}`);",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to associate AWS MP Offer ID: ${awsMarketplaceOfferId} with Opportunity ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"    }",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "38dc73d2-2383-44c4-af2b-7732779ce840",
										"exec": [
											"// Retrieve the awsMarketplaceOfferId and opportunityId from Postman collection variables",
											"const awsMarketplaceOfferId = pm.collectionVariables.get(\"awsMarketplaceOfferId\");",
											"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the action with the awsMarketplaceOfferId and opportunityId",
											"if (awsMarketplaceOfferId && opportunityId) {",
											"    console.log(`[Pre-req ${pm.info.requestName}] Associating AWS MP Offer ID: ${awsMarketplaceOfferId} with Opportunity ID: ${opportunityId}`);",
											"    ",
											"} else {",
											"    console.warn(`[Pre-req ${pm.info.requestName}] Missing awsMarketplaceOfferId or opportunityId. Ensure both have been set before executing this action.`);",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "278cb92f-49ed-4773-95ba-56e1dc9bffd5",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"OpportunityIdentifier\": \"{{opportunityId}}\",\n   \"RelatedEntityIdentifier\": \"{{awsMarketplaceOfferId}}\",\n   \"RelatedEntityType\": \"AwsMarketplaceOffers\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/AssociateOpportunity"
							},
							"response": [
								{
									"id": "6fff066a-eb79-43c7-919c-3420af575410",
									"name": "AssociateOpportunity - AWS Marketplace Offer",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"OpportunityIdentifier\": \"{{opportunityId}}\",\n   \"RelatedEntityIdentifier\": \"{{awsMarketplaceOfferId}}\",\n   \"RelatedEntityType\": \"AwsMarketplaceOffers\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BASE_URL}}/AssociateOpportunity"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 12 Feb 2025 23:55:14 GMT",
											"enabled": true
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										},
										{
											"key": "Content-Length",
											"value": "0",
											"enabled": true
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"enabled": true
										},
										{
											"key": "x-amzn-RequestId",
											"value": "5d4aef28-e83c-4d7f-b15d-504818b15d20",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": null
								}
							]
						},
						{
							"name": "GetOpportunityToVerify",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "369ddc8f-9c2e-4abe-b586-c1872793c0f5",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId and AwsMarketplaceOfferId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"    const awsMarketplaceOfferId = pm.collectionVariables.get(\"awsMarketplaceOfferId\");",
											"",
											"    // Check the response status",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        const responseBody = pm.response.json();",
											"",
											"        // Validate that the Offer is correctly associated",
											"        pm.test(`[Post-res ${pm.info.requestName}] Validate associated Offer`, function () {",
											"            pm.expect(responseBody).to.have.property('RelatedEntityIdentifiers');",
											"            pm.expect(responseBody.RelatedEntityIdentifiers).to.have.property('AwsMarketplaceOffers');",
											"            pm.expect(responseBody.RelatedEntityIdentifiers.AwsMarketplaceOffers).to.be.an('array').that.includes(awsMarketplaceOfferId);",
											"        });",
											"",
											"        // Log the success",
											"        console.log(`[Post-res ${pm.info.requestName}] Successfully validated associated Offer ID: ${awsMarketplaceOfferId} for Opportunity ID: ${opportunityId}`);",
											"    } else {",
											"        // Log the failure",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"} catch (error) {",
											"    // Handle errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1ebe62bb-ed0f-4f5d-af9d-cbea5042f0cc",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    if (opportunityId) {",
											"        console.log(`[Pre-req ${pm.info.requestName}] Fetching updated Opportunity with ID: ${opportunityId}`);",
											"    } else {",
											"        console.warn(`[Pre-req ${pm.info.requestName}] No opportunityId found. Ensure it has been set before executing this action.`);",
											"    }",
											"} catch (error) {",
											"    // Handle errors during pre-request execution",
											"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request:`, error);",
											"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "be41472c-9213-4236-a0f6-5b0183144d25",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity"
							},
							"response": [
								{
									"id": "cf0b9695-ae89-4a07-884c-db1c51f3ce72",
									"name": "GetOpportunityToVerify",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "Content-Type",
												"value": "application/json; charset=UTF-8"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{BASE_URL}}/GetOpportunity"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Date",
											"value": "Wed, 12 Feb 2025 23:30:03 GMT",
											"enabled": true
										},
										{
											"key": "Content-Type",
											"value": "application/json",
											"enabled": true
										},
										{
											"key": "Content-Length",
											"value": "2288",
											"enabled": true
										},
										{
											"key": "Connection",
											"value": "keep-alive",
											"enabled": true
										},
										{
											"key": "x-amzn-RequestId",
											"value": "6608ff79-137f-481c-95bf-fb8d0c36eab1",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1:222222222222:catalog/Sandbox/opportunity/O1111111\",\n    \"Catalog\": \"Sandbox\",\n    \"CreatedDate\": \"2025-02-12T17:25:49Z\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": null,\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": null\n            },\n            \"AwsAccountId\": \"111111111111\",\n            \"CompanyName\": \"ValidAWSCreate\",\n            \"Duns\": \"111100111\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": null,\n            \"WebsiteUrl\": \"www.test.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Executive\",\n                \"Email\": \"test@test.com\",\n                \"FirstName\": \"TestContact011\",\n                \"LastName\": \"MLastName001\",\n                \"Phone\": \"+14444444444\"\n            }\n        ]\n    },\n    \"Id\": \"O1111111\",\n    \"LastModifiedDate\": \"2025-02-12T23:28:33Z\",\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Approved\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Prospect\",\n        \"TargetCloseDate\": \"2029-10-05\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": \"Yes\",\n        \"CampaignName\": \"TestCampaignName02\",\n        \"Channels\": [\n            \"Content Syndication\"\n        ],\n        \"Source\": \"Marketing Activity\",\n        \"UseCases\": [\n            \"Analytics\"\n        ]\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"OpportunityOwner\",\n            \"Email\": \"mgztest234@testsandbox-00dva000000xjrrmau.com\",\n            \"FirstName\": \"Ming Test\",\n            \"LastName\": \"Alliance Lead\",\n            \"Phone\": null\n        },\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"testemail@test.com\",\n            \"FirstName\": \"TestContact001\",\n            \"LastName\": \"CLastName001\",\n            \"Phone\": \"+14444444444\"\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Architectural Validation\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": \"On-Prem\",\n        \"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n        \"CustomerUseCase\": \"Security & Compliance\",\n        \"DeliveryModels\": [\n            \"SaaS or PaaS\"\n        ],\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"12500\",\n                \"CurrencyCode\": \"USD\",\n                \"EstimationUrl\": null,\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": \"TestSolution\",\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Conducted POC / Demo\"\n        ],\n        \"Title\": \"New Business Deal - 4711\"\n    },\n    \"RelatedEntityIdentifiers\": {\n        \"AwsMarketplaceOffers\": [\n            \"offer-vvk7ddmg2tt2i\"\n        ],\n        \"AwsProducts\": [],\n        \"Solutions\": []\n    },\n    \"SoftwareRevenue\": null\n}"
								}
							]
						}
					],
					"id": "13b4f8ba-f101-4f1c-ba76-1a0219153f25",
					"description": "Use these APIs to link an opportunity with an AWS Marketplace offer. The workflow includes fetching the opportunity details, associating it with a marketplace offer, and verifying the association."
				},
				{
					"name": "Assigning an opportunity to an ACE User",
					"item": [
						{
							"name": "GetOpportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "369ddc8f-9c2e-4abe-b586-c1872793c0f5",
										"exec": [
											" // Import the aws-partner-central-api package",
											"const awsPartnerCentralApi = pm.require('@aws-partners/aws-partner-central-api');",
											"",
											"try {",
											"    // Call the handleApiResponse function to extract the \"Id\" attribute",
											"    let opportunityId = awsPartnerCentralApi.handleApiResponse(pm, \"Id\", \"opportunityId\");",
											"    opportunityId = pm.response.json().Id;",
											"    lastModifiedDate = pm.response.json().LastModifiedDate;",
											"    pm.collectionVariables.set('opportunityId', opportunityId);",
											"    pm.collectionVariables.set('lastModifiedDate', lastModifiedDate);",
											"    console.log(`opportunity ID ${opportunityId} with lastModifiedDate ${lastModifiedDate}`)",
											"} catch (error) {",
											"    // Handle any additional errors",
											"    console.error(`[${pm.info.requestName}] Failed to extract response data:`, error);",
											"}"
										],
										"type": "text/javascript",
										"packages": {
											"@aws-partners/aws-partner-central-api": {
												"id": "01935c27-ea94-724d-9d6b-8ec242d119b1"
											}
										}
									}
								}
							],
							"id": "7f2c561e-71be-4f2f-8018-cfed14fb08a6",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity"
							},
							"response": []
						},
						{
							"name": "AssignOpportunity",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bd6cbe72-742b-420f-84ae-3c8119e3e61e",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "ec5c2990-771c-4fd3-9e04-99366a97368f",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n\t \"Identifier\": \"{{opportunityId}}\",\n   \"Assignee\": { \n   \t  \"BusinessTitle\": \"PartnerAccountManager\",\n      \"Email\": \"test@test.com\",\n      \"FirstName\": \"John\",\n      \"LastName\": \"Doe\"\n   }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/AssignOpportunity",
								"description": "Enables you to reassign an existing `Opportunity` to another user within your Partner Central account. The specified user receives the opportunity, and it appears on their Partner Central dashboard, allowing them to take necessary actions or proceed with the opportunity.\n\nThis is useful for distributing opportunities to the appropriate team members or departments within your organization, ensuring that each opportunity is handled by the right person. By default, the opportunity owner is the one who creates it. Currently, there's no API to enumerate the list of available users."
							},
							"response": []
						},
						{
							"name": "GetOpportunityToVerify",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "369ddc8f-9c2e-4abe-b586-c1872793c0f5",
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "cf1e9521-f672-4c3e-89ff-c4ebd77fef8c",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{opportunityId}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity"
							},
							"response": []
						}
					],
					"id": "99942cda-0298-4419-84a4-2155d34a2d23",
					"description": "This section facilitates the assignment of opportunities to specific ACE users. APIs in this folder allow you to retrieve opportunity details, assign it to an ACE user, and validate the assignment."
				},
				{
					"name": "Amazon EventBridge Actions",
					"item": [
						{
							"name": "Checking EventBridge Events from CloudWatch",
							"item": [
								{
									"name": "GetLogGroup",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "369ddc8f-9c2e-4abe-b586-c1872793c0f5",
												"exec": [
													"try {",
													"    // Retrieve the opportunityId from Postman collection variables",
													"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
													"",
													"    // Check the response status and log accordingly",
													"    if (pm.response.code === 200) {",
													"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
													"            pm.response.to.have.status(200);",
													"        });",
													"",
													"        // Parse the response body",
													"        const responseBody = pm.response.json();",
													"",
													"        // Perform basic validation on the response",
													"        pm.test(\"Response has the correct structure\", function () {",
													"            pm.expect(responseBody).to.be.an('object');",
													"            pm.expect(responseBody).to.have.property('Id');",
													"        });",
													"",
													"        // Store the complete response in a collection variable",
													"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
													"        console.log(`[Post-res ${pm.info.requestName}] Stored response payload for ID: ${responseBody.Id}`);",
													"",
													"    } else {",
													"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
													"",
													"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
													"            pm.expect.fail(`Received status code ${pm.response.code}`);",
													"        });",
													"    }",
													"",
													"} catch (error) {",
													"    // Handle any errors during response processing",
													"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
													"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
													"        pm.expect.fail(error.message);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2e20de5e-447e-48a1-b53d-d7811c1d0814",
												"exec": [
													"// Parse the request payload to extract the Identifier",
													"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
													"",
													"// Log the start of the action with the Identifier",
													"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "1607900c-2938-4cd9-a5f4-871d750d1cc7",
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false,
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "awsv4",
											"awsv4": {
												"sessionToken": "{{vault:aws.sessionToken.inviting}}",
												"service": "logs",
												"secretKey": "{{vault:aws.secretKey.inviting}}",
												"accessKey": "{{vault:aws.accessKey.inviting}}",
												"addAuthDataToQuery": false,
												"region": "us-east-1"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "X-Amz-Target",
												"value": "Logs_20140328.DescribeLogGroups"
											},
											{
												"key": "Content-Type",
												"value": "application/x-amz-json-1.1"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"limit\": 2,\n    \"logGroupNamePattern\": \"/aws/events/\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "https://logs.us-east-1.amazonaws.com"
									},
									"response": [
										{
											"id": "7d01384b-abd1-43ab-9d40-49d5295670d5",
											"name": "GetLogGroup",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json, text/javascript, */*; q=0.01"
													},
													{
														"key": "X-Amz-Target",
														"value": "Logs_20140328.DescribeLogGroups"
													},
													{
														"key": "Content-Type",
														"value": "application/x-amz-json-1.1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"limit\": 2\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "https://logs.us-east-1.amazonaws.com"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "x-amzn-RequestId",
													"value": "0f7c4ff4-bf23-4277-a440-a2dea2a04d0f",
													"enabled": true
												},
												{
													"key": "Content-Type",
													"value": "application/x-amz-json-1.1",
													"enabled": true
												},
												{
													"key": "Content-Length",
													"value": "762",
													"enabled": true
												},
												{
													"key": "Date",
													"value": "Thu, 13 Feb 2025 00:07:32 GMT",
													"enabled": true
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"logGroups\": [\n        {\n            \"arn\": \"arn:aws:logs:us-east-1:111111111111:log-group:/aws/events/partnercentral01202024:*\",\n            \"creationTime\": 1737401653068,\n            \"logGroupArn\": \"arn:aws:logs:us-east-1:111111111111:log-group:/aws/events/partnercentral01202024\",\n            \"logGroupClass\": \"STANDARD\",\n            \"logGroupName\": \"/aws/events/partnercentral01202024\",\n            \"metricFilterCount\": 0,\n            \"storedBytes\": 99612\n        }\n    ],\n    \"nextToken\": \"/aws/events/partnercentral01202024-dfefrgererud\"\n}"
										}
									]
								},
								{
									"name": "QueryLogGroupsForOpportunity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "369ddc8f-9c2e-4abe-b586-c1872793c0f5",
												"exec": [
													"try {",
													"    // Check the response status and log accordingly",
													"    if (pm.response.code === 200) {",
													"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved query`, function () {",
													"            pm.response.to.have.status(200);",
													"        });",
													"",
													"        // Parse the response body",
													"        const responseBody = pm.response.json();",
													"",
													"        // Store the complete response in a collection variable",
													"        pm.collectionVariables.set(\"queryId\", responseBody.queryId);",
													"        console.log(`[Post-res ${pm.info.requestName}] Stored queryId: ${responseBody.queryId}`);",
													"",
													"    } else {",
													"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve queryId. Status Code: ${pm.response.code}`);",
													"",
													"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
													"            pm.expect.fail(`Received status code ${pm.response.code}`);",
													"        });",
													"    }",
													"",
													"} catch (error) {",
													"    // Handle any errors during response processing",
													"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
													"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
													"        pm.expect.fail(error.message);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2e20de5e-447e-48a1-b53d-d7811c1d0814",
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "af10d21f-0aba-4e5d-8f5c-c76e0b7b695f",
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false,
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "awsv4",
											"awsv4": {
												"sessionToken": "{{vault:aws.sessionToken.inviting}}",
												"service": "logs",
												"secretKey": "{{vault:aws.secretKey.inviting}}",
												"accessKey": "{{vault:aws.accessKey.inviting}}",
												"addAuthDataToQuery": false,
												"region": "us-east-1"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "X-Amz-Target",
												"value": "Logs_20140328.StartQuery"
											},
											{
												"key": "Content-Type",
												"value": "application/x-amz-json-1.1"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"logGroupName\": \"/aws/events/partnercentral01202024\",\n  \"startTime\": 1739232000,\n  \"endTime\": 1749404800,\n  \"queryString\": \"fields @timestamp, @message | filter @message like \\\"O5465588\\\" | sort @timestamp desc | limit 20\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "https://logs.us-east-1.amazonaws.com"
									},
									"response": [
										{
											"id": "64451d95-a599-4384-959b-c7f40bc06e68",
											"name": "GetEventsIdForOpportunity",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json, text/javascript, */*; q=0.01"
													},
													{
														"key": "X-Amz-Target",
														"value": "Logs_20140328.StartQuery"
													},
													{
														"key": "Content-Type",
														"value": "application/x-amz-json-1.1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"logGroupName\": \"/aws/events/partnercentral01202024\",\n  \"startTime\": 1739232000,\n  \"endTime\": 1739404800,\n  \"queryString\": \"fields @timestamp, @message | filter @message like \\\"O1111111\\\" | sort @timestamp desc | limit 20\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "https://logs.us-east-1.amazonaws.com"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "x-amzn-RequestId",
													"value": "de0d3a59-32cc-4a9e-9711-aae59fe31a7d",
													"enabled": true
												},
												{
													"key": "Content-Type",
													"value": "application/x-amz-json-1.1",
													"enabled": true
												},
												{
													"key": "Content-Length",
													"value": "50",
													"enabled": true
												},
												{
													"key": "Date",
													"value": "Wed, 19 Feb 2025 22:31:24 GMT",
													"enabled": true
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"queryId\": \"9ef716ca-7df4-4947-8919-e5404f4ef767\"\n}"
										}
									]
								},
								{
									"name": "GetEventDetail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "369ddc8f-9c2e-4abe-b586-c1872793c0f5",
												"exec": [
													"try {",
													"    // Retrieve the opportunityId from Postman collection variables",
													"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
													"",
													"    // Check the response status and log accordingly",
													"    if (pm.response.code === 200) {",
													"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
													"            pm.response.to.have.status(200);",
													"        });",
													"",
													"        // Parse the response body",
													"        const responseBody = pm.response.json();",
													"",
													"        // Perform basic validation on the response",
													"        pm.test(\"Response has the correct structure\", function () {",
													"            pm.expect(responseBody).to.be.an('object');",
													"            pm.expect(responseBody).to.have.property('Id');",
													"        });",
													"",
													"        // Store the complete response in a collection variable",
													"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
													"        console.log(`[Post-res ${pm.info.requestName}] Stored response payload for ID: ${responseBody.Id}`);",
													"",
													"    } else {",
													"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
													"",
													"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
													"            pm.expect.fail(`Received status code ${pm.response.code}`);",
													"        });",
													"    }",
													"",
													"} catch (error) {",
													"    // Handle any errors during response processing",
													"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
													"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
													"        pm.expect.fail(error.message);",
													"    });",
													"}",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "2e20de5e-447e-48a1-b53d-d7811c1d0814",
												"exec": [
													"// Parse the request payload to extract the Identifier",
													"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
													"",
													"// Log the start of the action with the Identifier",
													"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"id": "70da74c0-d7b0-4d3c-a52e-ceb9d6a7b5be",
									"protocolProfileBehavior": {
										"followRedirects": true,
										"disableUrlEncoding": false,
										"disableCookies": false,
										"disableBodyPruning": true,
										"disabledSystemHeaders": {
											"content-type": true
										}
									},
									"request": {
										"auth": {
											"type": "awsv4",
											"awsv4": {
												"sessionToken": "{{vault:aws.sessionToken.inviting}}",
												"service": "logs",
												"secretKey": "{{vault:aws.secretKey.inviting}}",
												"accessKey": "{{vault:aws.accessKey.inviting}}",
												"addAuthDataToQuery": false,
												"region": "us-east-1"
											}
										},
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "X-Amz-Target",
												"value": "Logs_20140328.GetQueryResults"
											},
											{
												"key": "Content-Type",
												"value": "application/x-amz-json-1.1"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"queryId\": \"51e09394-7f6a-4f39-8bed-567891ebbecd\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "https://logs.us-east-1.amazonaws.com"
									},
									"response": [
										{
											"id": "4e7c59d3-1d5f-450c-b1c6-9b36965dc723",
											"name": "GetEventDetail",
											"originalRequest": {
												"method": "POST",
												"header": [
													{
														"key": "Accept",
														"value": "application/json, text/javascript, */*; q=0.01"
													},
													{
														"key": "X-Amz-Target",
														"value": "Logs_20140328.GetQueryResults"
													},
													{
														"key": "Content-Type",
														"value": "application/x-amz-json-1.1"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"queryId\": \"45d8db59-3540-433f-8a3f-09bcfa2a67a3\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": "https://logs.us-east-1.amazonaws.com"
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "x-amzn-RequestId",
													"value": "66b4977a-412f-483d-a765-6cf141b3261a",
													"enabled": true
												},
												{
													"key": "Content-Encoding",
													"value": "gzip",
													"enabled": true
												},
												{
													"key": "Content-Type",
													"value": "application/x-amz-json-1.1",
													"enabled": true
												},
												{
													"key": "Content-Length",
													"value": "1769",
													"enabled": true
												},
												{
													"key": "Date",
													"value": "Wed, 19 Feb 2025 22:35:28 GMT",
													"enabled": true
												}
											],
											"cookie": [],
											"responseTime": null,
											"body": "{\n    \"queryLanguage\": \"CWLI\",\n    \"results\": [\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 04:20:25.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"f0edf36a-f707-225c-5847-59c4d8cb2750\\\",\\\"detail-type\\\":\\\"Engagement Resource Snapshot Created\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T04:20:25Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[\\\"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement/eng-t1mfgo4bsg73e0\\\"],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"resourceSnapshot\\\":{\\\"arn\\\":\\\"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement/eng-t1mfgo4bsg73e0/resource/Opportunity/O5465588/template/OpportunitySummaryView/snapshot/4\\\",\\\"engagementId\\\":\\\"eng-t1mfgo4bsg73e0\\\",\\\"resourceId\\\":\\\"O5465588\\\",\\\"resourceType\\\":\\\"Opportunity\\\",\\\"createdBy\\\":\\\"691709974417\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAAiDgiA8LiSzzIQ56+bhfUyEjUaGAIGd4uX8AAAAAB2/Tl9AAZ7Vb8QAAACAiABKNj2vePRMjCohr7j0TI4AkCYCEi0F1DNDRgAIAEQARgB\"\n            }\n        ],\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 04:20:25.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"c2c5ea82-cad0-3624-9c54-516b91fc8dcf\\\",\\\"detail-type\\\":\\\"Opportunity Updated\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T04:20:25Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"opportunity\\\":{\\\"identifier\\\":\\\"O5465588\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAIiDgiA8LiSzzIQ56+bhfUyEjUaGAIGd3V2CAAAAAB2shT4AAZ7VbugAAAEgiABKKiGvuPRMjCohr7j0TI4AUDaAkjbDVCHBxgAIAEQABgB\"\n            }\n        ],\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 04:20:23.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"d8e5c94b-a3aa-886b-3501-a9cdeb7f65cc\\\",\\\"detail-type\\\":\\\"Opportunity Updated\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T04:20:23Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"opportunity\\\":{\\\"identifier\\\":\\\"O5465588\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAAiDgiA8LiSzzIQ56+bhfUyEjUaGAIGd4uX8AAAAAB2/Tl9AAZ7Vb8QAAACAiABKNj2vePRMjCohr7j0TI4AkCYCEi0F1DNDRgAIAEQABgB\"\n            }\n        ],\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 04:06:04.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"a22b1754-2ff2-d6f7-60e6-7a723239d718\\\",\\\"detail-type\\\":\\\"Engagement Resource Snapshot Created\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T04:06:04Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[\\\"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement/eng-t1mfgo4bsg73e0\\\"],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"resourceSnapshot\\\":{\\\"arn\\\":\\\"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement/eng-t1mfgo4bsg73e0/resource/Opportunity/O5465588/template/OpportunitySummaryView/snapshot/3\\\",\\\"engagementId\\\":\\\"eng-t1mfgo4bsg73e0\\\",\\\"resourceId\\\":\\\"O5465588\\\",\\\"resourceType\\\":\\\"Opportunity\\\",\\\"createdBy\\\":\\\"691709974417\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAciDgiA8LiSzzIQ56+bhfUyEjUaGAIGdtYOFwAAAABK3PDcAAZ7VYVwAAAEciABKOC/iePRMjDgv4nj0TI4AUC+BUjZE1DkChgAIAEQABgB\"\n            }\n        ],\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 04:06:03.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"d983b84f-4cf9-343f-a036-074369c65424\\\",\\\"detail-type\\\":\\\"Opportunity Updated\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T04:06:03Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"opportunity\\\":{\\\"identifier\\\":\\\"O5465588\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAEiDgiA8LiSzzIQ56+bhfUyEjUaGAIGes5dMQAAAABJJBfVAAZ7VYdwAAAEEiABKPi3iePRMjD4t4nj0TI4AUDaAkjaDVCGBxgAIAEQABgB\"\n            }\n        ],\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 04:06:03.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"7b111974-2722-5111-9855-d5e1ba50c9be\\\",\\\"detail-type\\\":\\\"Opportunity Updated\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T04:06:03Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"opportunity\\\":{\\\"identifier\\\":\\\"O5465588\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAUiDgiA8LiSzzIQ56+bhfUyEjUaGAIGdyK0NQAAAACeglT7AAZ7VYewAAAFUiABKPi3iePRMjD4t4nj0TI4AUDaAkjbDVCHBxgAIAEQABgB\"\n            }\n        ],\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 03:24:51.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"1b75fc45-f5a6-f2ec-2092-d113623a43cf\\\",\\\"detail-type\\\":\\\"Opportunity Updated\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T03:24:51Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"opportunity\\\":{\\\"identifier\\\":\\\"O5465588\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAUiDgiA8LiSzzIQ56+bhfUyEjUaGAIGdyK0NQAAAACebiYVAAZ7VOzQAAAFUiABKOi38uHRMjC4x/Lh0TI4AkCYCEi1F1DODRgAIAEQARgB\"\n            }\n        ],\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 03:24:51.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"36391718-e251-1921-690b-1af933deceb9\\\",\\\"detail-type\\\":\\\"Opportunity Updated\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T03:24:51Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"opportunity\\\":{\\\"identifier\\\":\\\"O5465588\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAQiDgiA8LiSzzIQ56+bhfUyEjUaGAIGeny3QwAAAAApckDsAAZ7VO0QAAAEMiABKLjH8uHRMjC4x/Lh0TI4AUDaAkjdDVCJBxgAIAEQABgB\"\n            }\n        ],\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 03:24:49.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"b59cb2e4-b1c3-9b8e-11c2-8ef3061fc451\\\",\\\"detail-type\\\":\\\"Engagement Resource Snapshot Created\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T03:24:49Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[\\\"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement/eng-t1mfgo4bsg73e0\\\"],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"resourceSnapshot\\\":{\\\"arn\\\":\\\"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement/eng-t1mfgo4bsg73e0/resource/Opportunity/O5465588/template/OpportunitySummaryView/snapshot/2\\\",\\\"engagementId\\\":\\\"eng-t1mfgo4bsg73e0\\\",\\\"resourceId\\\":\\\"O5465588\\\",\\\"resourceType\\\":\\\"Opportunity\\\",\\\"createdBy\\\":\\\"691709974417\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAUiDgiA8LiSzzIQ56+bhfUyEjUaGAIGdyK0NQAAAACebiYVAAZ7VOzQAAAFUiABKOi38uHRMjC4x/Lh0TI4AkCYCEi1F1DODRgAIAEQABgB\"\n            }\n        ],\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 03:24:48.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"11087e0c-d141-3e2d-5a1f-cf27d91d43ba\\\",\\\"detail-type\\\":\\\"Opportunity Updated\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T03:24:48Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"opportunity\\\":{\\\"identifier\\\":\\\"O5465588\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAMiDgiA8LiSzzIQ56+bhfUyEjUaGAIGevNaIwAAAACMJ+sQAAZ7VO/AAAAFMiABKICw8uHRMjCAsPLh0TI4AUDaAkjbDVCHBxgAIAEQABgB\"\n            }\n        ],\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 03:24:48.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"40dd27fd-d162-d374-f22e-f0527647b823\\\",\\\"detail-type\\\":\\\"Opportunity Updated\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T03:24:48Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"opportunity\\\":{\\\"identifier\\\":\\\"O5465588\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAIiDgiA8LiSzzIQ56+bhfUyEjUaGAIGd3V2CAAAAAB2oSt2AAZ7VO1gAAAEgiABKPiI8uHRMjCAsPLh0TI4AkDdBkivFFDfCxgAIAEQARgB\"\n            }\n        ],\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 03:24:42.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"1827fafc-7b7a-65b2-c3d5-4522e129affd\\\",\\\"detail-type\\\":\\\"Engagement Resource Snapshot Created\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T03:24:42Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[\\\"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement/eng-t1mfgo4bsg73e0\\\"],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"resourceSnapshot\\\":{\\\"arn\\\":\\\"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement/eng-t1mfgo4bsg73e0/resource/Opportunity/O5465588/template/OpportunitySummaryView/snapshot/1\\\",\\\"engagementId\\\":\\\"eng-t1mfgo4bsg73e0\\\",\\\"resourceId\\\":\\\"O5465588\\\",\\\"resourceType\\\":\\\"Opportunity\\\",\\\"createdBy\\\":\\\"691709974417\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAAiDgiA8LiSzzIQ56+bhfUyEjUaGAIGd4uX8AAAAAB24W8rAAZ7VOxwAAACAiABKJCB8uHRMjCQgfLh0TI4AUC+BUjaE1DlChgAIAEQABgB\"\n            }\n        ],\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 03:21:35.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"1a256727-a211-d71e-79cf-825210e5922d\\\",\\\"detail-type\\\":\\\"Opportunity Updated\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T03:21:35Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"opportunity\\\":{\\\"identifier\\\":\\\"O5465588\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAYiDgiA8LiSzzIQ56+bhfUyEjUaGAIGeoT+LQAAAAA/gzbiAAZ7VN0QAAAC0iABKJjM5uHRMjCYzObh0TI4AUDaAkjbDVCHBxgAIAEQABgB\"\n            }\n        ],\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 03:21:26.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"40188ee3-b852-bf47-e277-013b3c07577f\\\",\\\"detail-type\\\":\\\"Opportunity Updated\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T03:21:26Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"opportunity\\\":{\\\"identifier\\\":\\\"O5465588\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAEiDgiA8LiSzzIQ56+bhfUyEjUaGAIGes5dMQAAAABJFAIKAAZ7VNxAAAAEEiABKPCF5uHRMjDwhebh0TI4AUDaAkjbDVCHBxgAIAEQABgB\"\n            }\n        ],\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 03:11:25.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"8c56be05-c9ef-2191-1b08-aca30e48fe5e\\\",\\\"detail-type\\\":\\\"Opportunity Created\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T03:11:25Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"opportunity\\\":{\\\"identifier\\\":\\\"O5465588\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAUiDgiA8LiSzzIQ56+bhfUyEjUaGAIGdyK0NQAAAACeZSlCAAZ7VLqAAAAFUiABKMiuweHRMjDIrsHh0TI4AUDaAkjaDVCGBxgAIAEQABgB\"\n            }\n        ],\n        [\n            {\n                \"field\": \"@timestamp\",\n                \"value\": \"2025-02-19 03:11:10.000\"\n            },\n            {\n                \"field\": \"@message\",\n                \"value\": \"{\\\"version\\\":\\\"0\\\",\\\"id\\\":\\\"d1e009b9-fc4e-19e8-a273-30895b0c8f3f\\\",\\\"detail-type\\\":\\\"Opportunity Created\\\",\\\"source\\\":\\\"aws.partnercentral-selling\\\",\\\"account\\\":\\\"691709974417\\\",\\\"time\\\":\\\"2025-02-19T03:11:10Z\\\",\\\"region\\\":\\\"us-east-1\\\",\\\"resources\\\":[],\\\"detail\\\":{\\\"schemaVersion\\\":\\\"1\\\",\\\"catalog\\\":\\\"Sandbox\\\",\\\"opportunity\\\":{\\\"identifier\\\":\\\"O5465588\\\"}}}\"\n            },\n            {\n                \"field\": \"@ptr\",\n                \"value\": \"CoABCkMKLzY5MTcwOTk3NDQxNzovYXdzL2V2ZW50cy9wYXJ0bmVyY2VudHJhbDAxMjAyMDI0EAYiDgiA8LiSzzIQ56+bhfUyEjUaGAIGeoT+LQAAAAA/gXLRAAZ7VLtwAAAC0iABKLC5wOHRMjCwucDh0TI4AUDaAkjZDVCFBxgAIAEQABgB\"\n            }\n        ]\n    ],\n    \"statistics\": {\n        \"bytesScanned\": 86630,\n        \"estimatedBytesSkipped\": 0,\n        \"estimatedRecordsSkipped\": 0,\n        \"logGroupsScanned\": 1,\n        \"recordsMatched\": 16,\n        \"recordsScanned\": 184\n    },\n    \"status\": \"Complete\"\n}"
										}
									]
								}
							],
							"id": "1edc167e-cfaa-43eb-9217-fea4809f7c6a",
							"description": "Amazon CloudWatch and EventBridge work together to help monitor, log, and react to changes in your AWS environment. This folder walks through how to use CloudWatch to inspect EventBridge events generated by AWS Partner Central API."
						},
						{
							"name": "PutRule",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "369ddc8f-9c2e-4abe-b586-c1872793c0f5",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        const responseBody = pm.response.json();",
											"",
											"        // Perform basic validation on the response",
											"        pm.test(\"Response has the correct structure\", function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"            pm.expect(responseBody).to.have.property('Id');",
											"        });",
											"",
											"        // Store the complete response in a collection variable",
											"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored response payload for ID: ${responseBody.Id}`);",
											"",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e20de5e-447e-48a1-b53d-d7811c1d0814",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the start of the action with the Identifier",
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "6f09186c-2cf8-4d80-bc15-3fa5e04f5916",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "awsv4",
									"awsv4": {
										"service": "events",
										"sessionToken": "{{vault:aws.sessionToken.inviting}}",
										"secretKey": "{{vault:aws.secretKey.inviting}}",
										"accessKey": "{{vault:aws.accessKey.inviting}}",
										"addAuthDataToQuery": false,
										"region": "us-east-1"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "X-Amz-Target",
										"value": "AWSEvents.PutRule"
									},
									{
										"key": "Content-Type",
										"value": "application/x-amz-json-1.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Name\": \"PartnerCentralSandBoxRule\",\n  \"source\": [\"aws.partnercentral-selling\"],\n  \"region\":[\"us-east-1\"],\n  \"EventPattern\": \"{\\\"source\\\":[\\\"aws.partnercentral-selling\\\"],\\\"detail\\\":{\\\"catalog\\\":[\\\"Sandbox\\\"]}}\",\n  \"State\": \"ENABLED\",\n  \"Description\": \"Triggers on Partner Central API events in Sandbox\"\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://events.us-east-1.amazonaws.com"
							},
							"response": [
								{
									"id": "a2693d77-03cf-424d-a96e-764e58ccf215",
									"name": "PutRule",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Accept",
												"value": "application/json, text/javascript, */*; q=0.01"
											},
											{
												"key": "X-Amz-Target",
												"value": "AWSEvents.PutRule"
											},
											{
												"key": "Content-Type",
												"value": "application/x-amz-json-1.1"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"Name\": \"PartnerCentralSandBoxRule\",\n  \"EventPattern\": \"{\\\"source\\\":[\\\"aws.partnercentral-selling\\\"],\\\"detail\\\":{\\\"catalog\\\":[\\\"Sandbox\\\"]}}\",\n  \"State\": \"ENABLED\",\n  \"Description\": \"Triggers on Partner Central API events in Sandbox\"\n}\n",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "https://events.us-east-1.amazonaws.com"
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "x-amzn-RequestId",
											"value": "029a9f35-cec3-41fe-969c-966b82fe87a2",
											"enabled": true
										},
										{
											"key": "Content-Type",
											"value": "application/x-amz-json-1.1",
											"enabled": true
										},
										{
											"key": "Content-Length",
											"value": "82",
											"enabled": true
										},
										{
											"key": "Date",
											"value": "Wed, 19 Feb 2025 22:54:00 GMT",
											"enabled": true
										}
									],
									"cookie": [],
									"responseTime": null,
									"body": "{\n    \"RuleArn\": \"arn:aws:events:us-east-1:691709974417:rule/PartnerCentralSandBoxRule\"\n}"
								}
							]
						},
						{
							"name": "PutTargets-Lambda",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "369ddc8f-9c2e-4abe-b586-c1872793c0f5",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        const responseBody = pm.response.json();",
											"",
											"        // Perform basic validation on the response",
											"        pm.test(\"Response has the correct structure\", function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"            pm.expect(responseBody).to.have.property('Id');",
											"        });",
											"",
											"        // Store the complete response in a collection variable",
											"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored response payload for ID: ${responseBody.Id}`);",
											"",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e20de5e-447e-48a1-b53d-d7811c1d0814",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the start of the action with the Identifier",
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "8c5992fb-87eb-4ced-be61-3878e55b112b",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "awsv4",
									"awsv4": {
										"service": "events",
										"sessionToken": "{{vault:aws.sessionToken.inviting}}",
										"secretKey": "{{vault:aws.secretKey.inviting}}",
										"accessKey": "{{vault:aws.accessKey.inviting}}",
										"addAuthDataToQuery": false,
										"region": "us-east-1"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "X-Amz-Target",
										"value": "AWSEvents.PutTargets"
									},
									{
										"key": "Content-Type",
										"value": "application/x-amz-json-1.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rule\": \"PartnerCentralSandBoxRule\",\n  \"Targets\": [\n    {\n      \"Id\": \"MyLambdaTarget1\",\n      \"Arn\": \"arn:aws:lambda:us-east-1:691709974417:function:MyLambdaFunctionForPC1\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://events.us-east-1.amazonaws.com"
							},
							"response": []
						},
						{
							"name": "PutTargets-CloudWatch",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "369ddc8f-9c2e-4abe-b586-c1872793c0f5",
										"exec": [
											"try {",
											"    // Retrieve the opportunityId from Postman collection variables",
											"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"    // Check the response status and log accordingly",
											"    if (pm.response.code === 200) {",
											"        pm.test(`[Post-res ${pm.info.requestName}] Successfully retrieved Opportunity with ID: ${opportunityId}`, function () {",
											"            pm.response.to.have.status(200);",
											"        });",
											"",
											"        // Parse the response body",
											"        const responseBody = pm.response.json();",
											"",
											"        // Perform basic validation on the response",
											"        pm.test(\"Response has the correct structure\", function () {",
											"            pm.expect(responseBody).to.be.an('object');",
											"            pm.expect(responseBody).to.have.property('Id');",
											"        });",
											"",
											"        // Store the complete response in a collection variable",
											"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
											"        console.log(`[Post-res ${pm.info.requestName}] Stored response payload for ID: ${responseBody.Id}`);",
											"",
											"    } else {",
											"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
											"",
											"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
											"            pm.expect.fail(`Received status code ${pm.response.code}`);",
											"        });",
											"    }",
											"",
											"} catch (error) {",
											"    // Handle any errors during response processing",
											"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
											"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
											"        pm.expect.fail(error.message);",
											"    });",
											"}",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "2e20de5e-447e-48a1-b53d-d7811c1d0814",
										"exec": [
											"// Parse the request payload to extract the Identifier",
											"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
											"",
											"// Log the start of the action with the Identifier",
											"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${opportunityId}`);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"id": "803ede87-3c16-4f67-b9d8-f5140f532e5f",
							"protocolProfileBehavior": {
								"followRedirects": true,
								"disableUrlEncoding": false,
								"disableCookies": false,
								"disableBodyPruning": true,
								"disabledSystemHeaders": {
									"content-type": true
								}
							},
							"request": {
								"auth": {
									"type": "awsv4",
									"awsv4": {
										"service": "events",
										"sessionToken": "{{vault:aws.sessionToken.inviting}}",
										"secretKey": "{{vault:aws.secretKey.inviting}}",
										"accessKey": "{{vault:aws.accessKey.inviting}}",
										"addAuthDataToQuery": false,
										"region": "us-east-1"
									}
								},
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "X-Amz-Target",
										"value": "AWSEvents.PutTargets"
									},
									{
										"key": "Content-Type",
										"value": "application/x-amz-json-1.1"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Rule\": \"PartnerCentralSandBoxRule\",\n  \"Targets\": [\n    {\n      \"Id\": \"MyCloudWatchLogGroupTarget2\",\n      \"Arn\": \"arn:aws:logs:us-east-1:691709974417:log-group:/aws/events/partnercentral01202024\"\n    }\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "https://events.us-east-1.amazonaws.com"
							},
							"response": []
						}
					],
					"id": "5440d631-ff1a-4415-9ac6-7297580d2b33"
				}
			],
			"id": "8ec0e5f5-3a14-4d5d-95dc-e389b024cebb",
			"description": "This folder includes frequently performed actions related to managing opportunities. These actions cover updates, associations, assignments, and launching tasks that are integral to ensuring the lifecycle of an opportunity progresses smoothly. Each sub-folder focuses on a specific category of operations commonly executed in opportunity workflows."
		},
		{
			"name": "Demo Accept AWS-originated Opportunities",
			"item": [
				{
					"name": "ListEngagementInvitations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "71531857-ca03-45c3-8739-7a7593585860",
								"exec": [
									"try {",
									"    // Parse the response JSON",
									"    const response = pm.response.json();",
									"",
									"    // Check if EngagementInvitationSummaries array exists and has at least one item",
									"    if (response.EngagementInvitationSummaries && response.EngagementInvitationSummaries.length > 0) {",
									"        // Get the first invitation (last incoming invitation based on descending order)",
									"        const firstInvitation = response.EngagementInvitationSummaries[0];",
									"        const acceptingEngagementInvitationID = firstInvitation.Arn;",
									"",
									"        // Save the ARN to a Postman collection variable",
									"        pm.collectionVariables.set(\"acceptingEngagementInvitationID\", acceptingEngagementInvitationID);",
									"",
									"        // Log the details",
									"        console.log(`[Post-res ${pm.info.requestName}] Found engagement invitation to accept. ARN: ${acceptingEngagementInvitationID}`);",
									"",
									"        // Add a test to validate the success of setting the ARN",
									"        pm.test(`[Post-res ${pm.info.requestName}] Status is 200. ARN set for acceptance: ${acceptingEngagementInvitationID}`, function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"    } else {",
									"        // Log a warning if no invitations are found",
									"        console.warn(`[Post-res ${pm.info.requestName}] No engagement invitations found.`);",
									"        pm.test(`[Post-res ${pm.info.requestName}] No engagement invitations found`, function () {",
									"            pm.expect(response.EngagementInvitationSummaries).to.have.lengthOf(0);",
									"        });",
									"    }",
									"} catch (error) {",
									"    // Log the error and fail the test if JSON parsing or other issues occur",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
									"        throw error; // Ensure the test fails if an error occurs",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "ff7e603f-be6b-4d82-ad60-3a2ea6ece03c",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Executing ${pm.info.requestName} action with ParticipantType=RECEIVER, sorted by InvitationDate in Descending order.`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9773a406-c61c-406f-a9ce-48acec824461",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"MaxResults\": 20,\n    \"Catalog\": \"{{catalog}}\",\n    \"Status\": [\"PENDING\"],\n    \"Sort\": {\n        \"SortBy\": \"InvitationDate\",\n        \"SortOrder\": \"DESCENDING\"\n    },\n\t\"ParticipantType\": \"RECEIVER\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListEngagementInvitations",
						"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_ListEngagementInvitations.html)"
					},
					"response": [
						{
							"id": "041fe90a-2854-4ae9-b7b0-38199bd9de54",
							"name": "ListEngagementInvitations",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"MaxResults\": 20,\n    \"Catalog\": \"{{catalog}}\",\n    \"Status\": [\"PENDING\"],\n    \"Sort\": {\n        \"SortBy\": \"InvitationDate\",\n        \"SortOrder\": \"DESCENDING\"\n    },\n\t\"ParticipantType\": \"RECEIVER\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListEngagementInvitations"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 24 Jan 2025 20:55:42 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "3474",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "0b027546-0f14-44b4-b81b-aeb031843c2b",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"EngagementInvitationSummaries\": [\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-invitation/engi-zl4chf82zej4r\",\n            \"Catalog\": \"Sandbox\",\n            \"EngagementId\": \"eng-e8pw9uih9e3hqd\",\n            \"EngagementTitle\": \"New Business Deal - 5372\",\n            \"ExpirationDate\": \"2025-02-08T20:48:55.457306587Z\",\n            \"Id\": \"engi-zl4chf82zej4r\",\n            \"InvitationDate\": \"2025-01-24T20:48:55.457306587Z\",\n            \"ParticipantType\": \"RECEIVER\",\n            \"PayloadType\": \"OpportunityInvitation\",\n            \"Receiver\": {\n                \"Account\": {\n                    \"Alias\": \"Test Account\",\n                    \"AwsAccountId\": \"111111111111\"\n                }\n            },\n            \"SenderAwsAccountId\": \"390403897881\",\n            \"SenderCompanyName\": \"AWS\",\n            \"Status\": \"PENDING\"\n        },\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-invitation/engi-aqf2rdmx7xv72\",\n            \"Catalog\": \"Sandbox\",\n            \"EngagementId\": \"eng-opi7688fyw2z94\",\n            \"EngagementTitle\": \"New Business Deal - 5090\",\n            \"ExpirationDate\": \"2025-02-07T20:33:21.336151182Z\",\n            \"Id\": \"engi-aqf2rdmx7xv72\",\n            \"InvitationDate\": \"2025-01-23T20:33:21.336151182Z\",\n            \"ParticipantType\": \"RECEIVER\",\n            \"PayloadType\": \"OpportunityInvitation\",\n            \"Receiver\": {\n                \"Account\": {\n                    \"Alias\": \"MingZ Test Account\",\n                    \"AwsAccountId\": \"691709974417\"\n                }\n            },\n            \"SenderAwsAccountId\": \"390403897881\",\n            \"SenderCompanyName\": \"AWS\",\n            \"Status\": \"PENDING\"\n        },\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-invitation/engi-shscl6r84khza\",\n            \"Catalog\": \"Sandbox\",\n            \"EngagementId\": \"eng-cbrte5jzcwiuob\",\n            \"EngagementTitle\": \"Partner Project Title - this field is no\",\n            \"ExpirationDate\": \"2025-02-07T20:20:39.188851332Z\",\n            \"Id\": \"engi-shscl6r84khza\",\n            \"InvitationDate\": \"2025-01-23T20:20:39.188851332Z\",\n            \"ParticipantType\": \"RECEIVER\",\n            \"PayloadType\": \"OpportunityInvitation\",\n            \"Receiver\": {\n                \"Account\": {\n                    \"Alias\": \"MingZ Test Account\",\n                    \"AwsAccountId\": \"691709974417\"\n                }\n            },\n            \"SenderAwsAccountId\": \"390403897881\",\n            \"SenderCompanyName\": \"AWS\",\n            \"Status\": \"PENDING\"\n        },\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-invitation/engi-oc1rigmgb73uj\",\n            \"Catalog\": \"Sandbox\",\n            \"EngagementId\": \"eng-yxc9ewt714y450\",\n            \"EngagementTitle\": \"Partner Project Title - this field is no\",\n            \"ExpirationDate\": \"2025-02-04T19:35:24.019635047Z\",\n            \"Id\": \"engi-oc1rigmgb73uj\",\n            \"InvitationDate\": \"2025-01-20T19:35:24.019635047Z\",\n            \"ParticipantType\": \"RECEIVER\",\n            \"PayloadType\": \"OpportunityInvitation\",\n            \"Receiver\": {\n                \"Account\": {\n                    \"Alias\": \"MingZ Test Account\",\n                    \"AwsAccountId\": \"691709974417\"\n                }\n            },\n            \"SenderAwsAccountId\": \"390403897881\",\n            \"SenderCompanyName\": \"AWS\",\n            \"Status\": \"PENDING\"\n        },\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-invitation/engi-r5jdep0cvcrb4\",\n            \"Catalog\": \"Sandbox\",\n            \"EngagementId\": \"eng-q573msuzybcybs\",\n            \"EngagementTitle\": \"Partner Project Title - this field is no\",\n            \"ExpirationDate\": \"2025-02-04T19:27:19.51075374Z\",\n            \"Id\": \"engi-r5jdep0cvcrb4\",\n            \"InvitationDate\": \"2025-01-20T19:27:19.51075374Z\",\n            \"ParticipantType\": \"RECEIVER\",\n            \"PayloadType\": \"OpportunityInvitation\",\n            \"Receiver\": {\n                \"Account\": {\n                    \"Alias\": \"MingZ Test Account\",\n                    \"AwsAccountId\": \"691709974417\"\n                }\n            },\n            \"SenderAwsAccountId\": \"390403897881\",\n            \"SenderCompanyName\": \"AWS\",\n            \"Status\": \"PENDING\"\n        },\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-invitation/engi-99rp8wtg6pp0o\",\n            \"Catalog\": \"Sandbox\",\n            \"EngagementId\": \"eng-twn2bmljb9gd5w\",\n            \"EngagementTitle\": \"Partner Project Title - this field is no\",\n            \"ExpirationDate\": \"2025-02-04T19:27:15.485537972Z\",\n            \"Id\": \"engi-99rp8wtg6pp0o\",\n            \"InvitationDate\": \"2025-01-20T19:27:15.485537972Z\",\n            \"ParticipantType\": \"RECEIVER\",\n            \"PayloadType\": \"OpportunityInvitation\",\n            \"Receiver\": {\n                \"Account\": {\n                    \"Alias\": \"MingZ Test Account\",\n                    \"AwsAccountId\": \"691709974417\"\n                }\n            },\n            \"SenderAwsAccountId\": \"390403897881\",\n            \"SenderCompanyName\": \"AWS\",\n            \"Status\": \"PENDING\"\n        }\n    ],\n    \"NextToken\": null\n}"
						}
					]
				},
				{
					"name": "GetEngagementInvitation",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4dce1163-9537-49a8-abea-1433bfcfe899",
								"exec": [
									"try {",
									"    // Parse the request payload to extract the Identifier",
									"    const requestPayload = JSON.parse(pm.request.body.raw);",
									"    const identifier = requestPayload.Identifier || \"Unknown Identifier\";",
									"    const acceptingEngagementInvitationID = pm.collectionVariables.get(\"acceptingEngagementInvitationID\");",
									"",
									"    // Check the response status and log accordingly",
									"    if (pm.response.code === 200) {",
									"        pm.test(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action succeeded for Identifier: ${identifier}`, function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"        console.log(`[Post-res ${pm.info.requestName}] Successfully accepted engagement invitation with ARN: ${acceptingEngagementInvitationID}`);",
									"    } else {",
									"        pm.test(`[Post-res ${pm.info.requestName}] ${pm.info.requestName} action failed for Identifier: ${identifier}`, function () {",
									"            pm.response.to.not.have.status(200);",
									"        });",
									"        console.error(`[Post-res ${pm.info.requestName}] Failed to accept engagement invitation with ARN: ${acceptingEngagementInvitationID}. Status Code: ${pm.response.code}`);",
									"    }",
									"} catch (error) {",
									"    // Handle errors during response parsing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
									"        throw error;",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "45df17b5-cb5d-47ee-807d-09c15026e925",
								"exec": [
									"// Parse the request payload to extract the Identifier",
									"const requestPayload = JSON.parse(pm.request.body.raw);",
									"const identifier = requestPayload.Identifier || \"Unknown Identifier\";",
									"",
									"// Log the start of the action with the Identifier",
									"console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action for Identifier: ${identifier}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a272c2b6-c44d-4aeb-a383-002cee36e869",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{acceptingEngagementInvitationID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetEngagementInvitation"
					},
					"response": [
						{
							"id": "ffe5c311-c815-4620-bd4d-4959799f1af0",
							"name": "GetEngagementInvitation",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"Catalog\": \"{{catalog}}\",\n    \"Identifier\": \"{{acceptingEngagementInvitationID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetEngagementInvitation"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 24 Jan 2025 20:56:57 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "1524",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "ea52cabe-7b49-4ca1-90ce-52ffc607ece4",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-invitation/engi-zl4chf82zej4r\",\n    \"Catalog\": \"Sandbox\",\n    \"EngagementDescription\": \"A very important problem goes here ValidAWSCreate\",\n    \"EngagementId\": \"eng-e8pw9uih9e3hqd\",\n    \"EngagementTitle\": \"New Business Deal - 5372\",\n    \"ExistingMembers\": [\n        {\n            \"CompanyName\": \"AWS\",\n            \"WebsiteUrl\": \"www.aws.com\"\n        }\n    ],\n    \"ExpirationDate\": \"2025-02-08T20:48:55.457306587Z\",\n    \"Id\": \"engi-zl4chf82zej4r\",\n    \"InvitationDate\": \"2025-01-24T20:48:55.457306587Z\",\n    \"InvitationMessage\": \"This invite is for an AWS originated referral. Accepting this invitation will create an AWS originated opportunity in your pipeline.\",\n    \"Payload\": {\n        \"OpportunityInvitation\": {\n            \"Customer\": {\n                \"CompanyName\": \"Test Corp\",\n                \"CountryCode\": \"US\",\n                \"Industry\": \"Financial Services\",\n                \"WebsiteUrl\": \"https://www.test.com\"\n            },\n            \"Project\": {\n                \"BusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n                \"ExpectedCustomerSpend\": [\n                    {\n                        \"Amount\": \"25000\",\n                        \"CurrencyCode\": \"USD\",\n                        \"EstimationUrl\": null,\n                        \"Frequency\": \"Monthly\",\n                        \"TargetCompany\": \"AWS\"\n                    }\n                ],\n                \"TargetCompletionDate\": \"2029-10-05\",\n                \"Title\": \"New Business Deal - 5372\"\n            },\n            \"ReceiverResponsibilities\": [\n                \"Services Partner\",\n                \"Software Partner\"\n            ],\n            \"SenderContacts\": [\n                {\n                    \"BusinessTitle\": \"PDM\",\n                    \"Email\": \"pdm-35@test.com\",\n                    \"FirstName\": \"NAMER\",\n                    \"LastName\": \"SI Partner Manager\",\n                    \"Phone\": null\n                }\n            ]\n        }\n    },\n    \"PayloadType\": \"OpportunityInvitation\",\n    \"Receiver\": {\n        \"Account\": {\n            \"Alias\": \"Test Account\",\n            \"AwsAccountId\": \"111111111111\"\n        }\n    },\n    \"RejectionReason\": null,\n    \"SenderAwsAccountId\": \"222222222222\",\n    \"SenderCompanyName\": \"AWS\",\n    \"Status\": \"PENDING\"\n}"
						}
					]
				},
				{
					"name": "StartEngagementByAcceptingInvitationTask",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9bcc3dd-c5ba-46e7-8271-0bd93d6d59cd",
								"exec": [
									"try {",
									"    // Parse the response JSON",
									"    const response = pm.response.json();",
									"",
									"    // Extract response attributes",
									"    const opportunityId = response.OpportunityId || \"Unknown Opportunity\";",
									"    const taskDetails = {",
									"        TaskId: response.TaskId || \"N/A\",",
									"        TaskArn: response.TaskArn || \"N/A\",",
									"        TaskStatus: response.TaskStatus || \"N/A\"",
									"    };",
									"",
									"    pm.collectionVariables.set(\"acceptedEngagementOpportunityID\", opportunityId);",
									"",
									"    // Add tests for response validation",
									"    pm.test(`[Post-res ${pm.info.requestName}] Response structure validation`, function () {",
									"        pm.response.to.have.status(200);",
									"        pm.expect(response).to.have.property(\"OpportunityId\");",
									"        pm.expect(taskDetails.TaskStatus).to.not.equal(\"FAILED\");",
									"    });",
									"",
									"    // Add tests for individual fields",
									"    pm.test(`[Post-res ${pm.info.requestName}] Task details validation`, function () {",
									"        pm.expect(taskDetails.TaskId).to.not.equal(\"N/A\");",
									"        pm.expect(taskDetails.TaskArn).to.not.equal(\"N/A\");",
									"        pm.expect(taskDetails.TaskStatus).to.not.equal(\"N/A\");",
									"    });",
									"",
									"    // Log the action execution and task details",
									"    console.log(",
									"        `[Post-res ${pm.info.requestName}] ${pm.info.requestName} executed. Started engagement on ${opportunityId}. Task details: TaskId=${taskDetails.TaskId}, TaskArn=${taskDetails.TaskArn}, TaskStatus=${taskDetails.TaskStatus}.`",
									"    );",
									"} catch (error) {",
									"    // Handle errors during response parsing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error occurred while processing response`, function () {",
									"        throw error;",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "cc229de6-5890-4c2b-8302-ed678150cd25",
								"exec": [
									"try {",
									"    // Step 1: Generate Client Token",
									"    const clientToken = pm.variables.replaceIn('{{$randomUUID}}')",
									"",
									"    // Save the generated client token as a local variable",
									"    pm.variables.set('clientToken', pm.variables.replaceIn('{{$randomUUID}}'));",
									"    console.log(`[${pm.info.requestName}] Generated Client Token: ${clientToken}`);",
									"    ",
									"    // Step 2: Retrieve acceptingEngagementInvitationID",
									"    const acceptingEngagementInvitationID = pm.collectionVariables.get(\"acceptingEngagementInvitationID\");",
									"",
									"    if (acceptingEngagementInvitationID) {",
									"        // Log the action details for accepting the engagement invitation",
									"        console.log(`[Pre-req ${pm.info.requestName}] Accepting engagement invitation with ARN: ${acceptingEngagementInvitationID}`);",
									"    } else {",
									"        console.warn(`[Pre-req ${pm.info.requestName}] No acceptingEngagementInvitationID found. Ensure it has been set before executing this action.`);",
									"    }",
									"",
									"    // Log the action start",
									"    console.log(`[Pre-req ${pm.info.requestName}] Starting ${pm.info.requestName} action.`);",
									"",
									"} catch (error) {",
									"    // Handle any errors during token generation or retrieving engagement ID",
									"    console.error(`[Pre-req ${pm.info.requestName}] Error occurred:`, error);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1b365996-b9ab-4241-851c-ac5316b9ec9c",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"Catalog\": \"{{catalog}}\",\n\t\"Identifier\": \"{{acceptingEngagementInvitationID}}\",\n\t\"ClientToken\": \"{{clientToken}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/StartEngagementByAcceptingInvitationTask"
					},
					"response": [
						{
							"id": "74f3726a-f001-49ef-882c-9e07e10048cf",
							"name": "StartEngagementByAcceptingInvitationTask",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"Catalog\": \"{{catalog}}\",\n\t\"Identifier\": \"{{acceptingEngagementInvitationID}}\",\n\t\"ClientToken\": \"{{clientToken}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/StartEngagementByAcceptingInvitationTask"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 24 Jan 2025 20:57:16 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "371",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "7da6b577-baa4-45f5-bd50-af1793df0729",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"EngagementInvitationId\": \"engi-zl4chf82zej4r\",\n    \"Message\": null,\n    \"OpportunityId\": \"O1111111\",\n    \"ReasonCode\": null,\n    \"ResourceSnapshotJobId\": \"job-xjiklmcyuqik4\",\n    \"StartTime\": \"2025-01-24T20:57:12.499191892Z\",\n    \"TaskArn\": \"arn:aws:partnercentral:us-east-1::catalog/Sandbox/engagement-by-accepting-invitation-task/task-nyxzjonp1xk1u\",\n    \"TaskId\": \"task-nyxzjonp1xk1u\",\n    \"TaskStatus\": \"COMPLETE\"\n}"
						}
					]
				},
				{
					"name": "GetOpportunity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
								"exec": [
									"try {",
									"    // Retrieve the opportunityId from Postman collection variables",
									"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
									"",
									"    // Check the response status",
									"    if (pm.response.code === 200) {",
									"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        // Parse and validate the response",
									"        const responseBody = pm.response.json();",
									"",
									"        pm.test(`[Post-res ${pm.info.requestName}] Validate Opportunity attributes`, function () {",
									"            pm.expect(responseBody).to.have.property('Id');",
									"            pm.expect(responseBody).to.have.property('LifeCycle');",
									"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewStatus', 'Action Required');",
									"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewComments').that.is.not.empty;",
									"        });",
									"",
									"        // Store the complete response for subsequent requests",
									"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
									"        console.log(`[Post-res ${pm.info.requestName}] Stored updated Opportunity payload for ID: ${responseBody.Id}`);",
									"    } else {",
									"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve updated Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
									"",
									"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
									"            pm.expect.fail(`Received status code ${pm.response.code}`);",
									"        });",
									"    }",
									"} catch (error) {",
									"    // Handle errors during response processing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
									"        pm.expect.fail(error.message);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f926d538-8031-4f26-bcce-8a09fa162897",
								"exec": [
									"try {",
									"    // Retrieve the opportunityId from Postman collection variables",
									"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
									"",
									"    if (opportunityId) {",
									"        console.log(`[Pre-req ${pm.info.requestName}] Fetching updated Opportunity with ID: ${opportunityId}`);",
									"    } else {",
									"        console.warn(`[Pre-req ${pm.info.requestName}] No opportunityId found. Ensure it has been set before executing this action.`);",
									"    }",
									"} catch (error) {",
									"    // Handle errors during pre-request execution",
									"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request:`, error);",
									"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
									"        pm.expect.fail(error.message);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "dd9ce025-87ba-4902-875e-8e6e6e0215ba",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{acceptedEngagementOpportunityID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetOpportunity",
						"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
					},
					"response": [
						{
							"id": "91e28f7f-a3af-4f83-9d88-02494519f855",
							"name": "GetOpportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{acceptedEngagementOpportunityID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 24 Jan 2025 20:57:32 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "2405",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "40916d20-6104-41e2-a8de-74d248be9b5e",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/Sandbox/opportunity/O1111111\",\n    \"Catalog\": \"Sandbox\",\n    \"CreatedDate\": \"2025-01-24T20:48:50Z\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": \"New York\",\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": \"123 Wall Street\"\n            },\n            \"AwsAccountId\": \"123456789012\",\n            \"CompanyName\": \"Test Corp\",\n            \"Duns\": \"123456789\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": \"Investment Banking\",\n            \"WebsiteUrl\": \"https://www.test.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Chief Financial Officer\",\n                \"Email\": \"jane.doe@test.com\",\n                \"FirstName\": \"Jane\",\n                \"LastName\": \"Doe\",\n                \"Phone\": \"+12125551234\"\n            }\n        ]\n    },\n    \"Id\": \"O1111111\",\n    \"LastModifiedDate\": \"2025-01-24T20:57:14Z\",\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": \"Review the opportunity and update documentation before finalizing rejection.\",\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Approved\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Prospect\",\n        \"TargetCloseDate\": \"2029-10-05\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": \"Yes\",\n        \"CampaignName\": \"MKTG-Q1NY\",\n        \"Channels\": [\n            \"Content Syndication\"\n        ],\n        \"Source\": \"Marketing Activity\",\n        \"UseCases\": [\n            \"Analytics\"\n        ]\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"OpportunityOwner\",\n            \"Email\": \"mgztest234@test.com\",\n            \"FirstName\": \"Just Test\",\n            \"LastName\": \"Alliance Lead\",\n            \"Phone\": null\n        },\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"johndoe@test.com\",\n            \"FirstName\": \"John\",\n            \"LastName\": \"Doe\",\n            \"Phone\": \"+14155559876\"\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Architectural Validation\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": \"On-Prem\",\n        \"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n        \"CustomerUseCase\": \"Security & Compliance\",\n        \"DeliveryModels\": [\n            \"SaaS or PaaS\"\n        ],\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"25000\",\n                \"CurrencyCode\": \"USD\",\n                \"EstimationUrl\": null,\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": \"Acme Data Lake\",\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Conducted POC / Demo\"\n        ],\n        \"Title\": \"New Business Deal - 5372\"\n    },\n    \"RelatedEntityIdentifiers\": {\n        \"AwsMarketplaceOffers\": [],\n        \"AwsProducts\": [],\n        \"Solutions\": []\n    },\n    \"SoftwareRevenue\": {\n        \"DeliveryModel\": \"Pay-as-you-go\",\n        \"EffectiveDate\": \"2023-10-31\",\n        \"ExpirationDate\": \"2024-03-31\",\n        \"Value\": {\n            \"Amount\": \"10000.0\",\n            \"CurrencyCode\": \"USD\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "ListSolutions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09273b28-c68d-43e0-9c30-e1074b818053",
								"exec": [
									"try {",
									"    // Parse the response JSON",
									"    const response = pm.response.json();",
									"",
									"    // Check if SolutionSummaries array exists and has at least one item",
									"    if (response.SolutionSummaries && response.SolutionSummaries.length > 0) {",
									"        // Get the first solution (latest solution based on descending order)",
									"        const firstSolution = response.SolutionSummaries[0];",
									"        let solutionId = firstSolution.Id;",
									"",
									"        // Save the Id to a Postman variable",
									"        pm.collectionVariables.set(\"solutionId\", solutionId);",
									"",
									"        // Log the details",
									"",
									"        pm.test(`${pm.info.requestName} Status is 200. Set ${solutionId} to be active solution to associate`, function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"    } else {",
									"        console.warn(`[Post-res ${pm.info.requestName}] No active solution found.`);",
									"    }",
									"} catch (error) {",
									"    // Handle errors during response parsing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "69f2631a-9d96-445b-9831-c2b00e98300f",
								"exec": [
									"console.log(`[Pre-req ${pm.info.requestName}] Executing ${pm.info.requestName} action with Status=Active, sorted by CreatedDate in Descending order.`);",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "e394da6e-9cf3-4976-b612-4745f359f0d0",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"MaxResults\": 20,\n    \"Catalog\" : \"{{catalog}}\",\n    \"Sort\": {\n        \"SortBy\": \"CreatedDate\",\n        \"SortOrder\": \"DESCENDING\"\n    },\n    \"Status\": [\"Active\"]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/ListSolutions"
					},
					"response": [
						{
							"id": "128eafa6-2c97-426d-8502-3906b7cf18f3",
							"name": "ListSolutions",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n\t\"MaxResults\": 20,\n    \"Catalog\" : \"{{catalog}}\",\n    \"Sort\": {\n        \"SortBy\": \"CreatedDate\",\n        \"SortOrder\": \"DESCENDING\"\n    },\n    \"Status\": [\"Active\"]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/ListSolutions"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 24 Jan 2025 20:57:46 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "727",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "6e4c9eaf-29bb-4fb6-a221-2832d28d31dc",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"NextToken\": null,\n    \"SolutionSummaries\": [\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/Sandbox/solution/S-0055555\",\n            \"Catalog\": \"Sandbox\",\n            \"Category\": \"Software Product\",\n            \"CreatedDate\": \"2025-01-21T19:16:18Z\",\n            \"Id\": \"S-0055555\",\n            \"Name\": \"X10003\",\n            \"Status\": \"Active\"\n        },\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/Sandbox/solution/S-0066666\",\n            \"Catalog\": \"Sandbox\",\n            \"Category\": \"Software Product\",\n            \"CreatedDate\": \"2025-01-20T19:20:35Z\",\n            \"Id\": \"S-0066666\",\n            \"Name\": \"X10002\",\n            \"Status\": \"Active\"\n        },\n        {\n            \"Arn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/Sandbox/solution/S-0077777\",\n            \"Catalog\": \"Sandbox\",\n            \"Category\": \"Software Product\",\n            \"CreatedDate\": \"2025-01-20T19:20:10Z\",\n            \"Id\": \"S-0077777\",\n            \"Name\": \"X10001\",\n            \"Status\": \"Active\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "AssociateOpportunity",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7e784582-58cc-4aee-aece-98065aab311a",
								"exec": [
									"try {",
									"    // Retrieve the solutionId and opportunityId from Postman collection variables",
									"    let solutionId = pm.collectionVariables.get(\"solutionId\");",
									"    let opportunityId = pm.collectionVariables.get(\"opportunityId\");",
									"",
									"    // Check the response status and log accordingly",
									"    if (pm.response.code === 200) {",
									"        pm.test(`[Post-res ${pm.info.requestName}] Successfully associated Opportunity ID: ${opportunityId} with Solution ID: ${solutionId}`, function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"    } else {",
									"        console.error(`[Post-res ${pm.info.requestName}] Failed to associate Opportunity ID: ${opportunityId} with Solution ID: ${solutionId}. Status Code: ${pm.response.code}`);        ",
									"    }",
									"",
									"} catch (error) {",
									"    // Handle any errors during response processing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "9f38fef7-0866-4228-916d-c68abab42b10",
								"exec": [
									"// Retrieve the solutionId and opportunityId from Postman collection variables",
									"const solutionId = pm.collectionVariables.get(\"solutionId\");",
									"const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
									"",
									"// Log the action with the solutionId and opportunityId",
									"if (solutionId && opportunityId) {",
									"    console.log(`[Pre-req ${pm.info.requestName}] Associating Opportunity with Solution ID: ${solutionId} and Opportunity ID: ${opportunityId}`);",
									"} else {",
									"    console.warn(`[Pre-req ${pm.info.requestName}] Missing solutionId or opportunityId. Ensure both have been set before executing this action.`);",
									"}",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "c839f5a0-7674-4240-b09c-92960a268dcb",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"OpportunityIdentifier\": \"{{acceptedEngagementOpportunityID}}\",\n   \"RelatedEntityIdentifier\": \"{{solutionId}}\",\n   \"RelatedEntityType\": \"Solutions\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/AssociateOpportunity"
					},
					"response": [
						{
							"id": "6c0092cf-fa58-47aa-b3fd-561fdaa7415e",
							"name": "AssociateOpportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"OpportunityIdentifier\": \"{{acceptedEngagementOpportunityID}}\",\n   \"RelatedEntityIdentifier\": \"{{solutionId}}\",\n   \"RelatedEntityType\": \"Solutions\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/AssociateOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 24 Jan 2025 20:58:10 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "0",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "7d912ce8-e724-4bf1-be08-5f7eb3066710",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": null
						}
					]
				},
				{
					"name": "GetOpportunity Check Solution",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
								"exec": [
									"try {",
									"    // Retrieve the opportunityId from Postman collection variables",
									"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
									"",
									"    // Check the response status",
									"    if (pm.response.code === 200) {",
									"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        // Parse and validate the response",
									"        const responseBody = pm.response.json();",
									"",
									"        pm.test(`[Post-res ${pm.info.requestName}] Validate Opportunity attributes`, function () {",
									"            pm.expect(responseBody).to.have.property('Id');",
									"            pm.expect(responseBody).to.have.property('LifeCycle');",
									"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewStatus', 'Action Required');",
									"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewComments').that.is.not.empty;",
									"        });",
									"",
									"        // Store the complete response for subsequent requests",
									"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
									"        console.log(`[Post-res ${pm.info.requestName}] Stored updated Opportunity payload for ID: ${responseBody.Id}`);",
									"    } else {",
									"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve updated Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
									"",
									"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
									"            pm.expect.fail(`Received status code ${pm.response.code}`);",
									"        });",
									"    }",
									"} catch (error) {",
									"    // Handle errors during response processing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
									"        pm.expect.fail(error.message);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f926d538-8031-4f26-bcce-8a09fa162897",
								"exec": [
									"try {",
									"    // Retrieve the opportunityId from Postman collection variables",
									"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
									"",
									"    if (opportunityId) {",
									"        console.log(`[Pre-req ${pm.info.requestName}] Fetching updated Opportunity with ID: ${opportunityId}`);",
									"    } else {",
									"        console.warn(`[Pre-req ${pm.info.requestName}] No opportunityId found. Ensure it has been set before executing this action.`);",
									"    }",
									"} catch (error) {",
									"    // Handle errors during pre-request execution",
									"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request:`, error);",
									"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
									"        pm.expect.fail(error.message);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6e1e6f24-bc72-4dd5-b8d0-93546ca4e924",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{acceptedEngagementOpportunityID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetOpportunity",
						"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
					},
					"response": [
						{
							"id": "fba98e6b-d8d4-4d04-b499-147366e61f6c",
							"name": "GetOpportunity Check Solution",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{acceptedEngagementOpportunityID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 24 Jan 2025 20:59:39 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "2404",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "562739d5-0325-44f5-829d-f108fd59e7b0",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/Sandbox/opportunity/O5555555\",\n    \"Catalog\": \"Sandbox\",\n    \"CreatedDate\": \"2025-01-24T20:48:50Z\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": \"New York\",\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": \"123 Wall Street\"\n            },\n            \"AwsAccountId\": \"123456789012\",\n            \"CompanyName\": \"Test Corp\",\n            \"Duns\": \"987654321\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": \"Investment Banking\",\n            \"WebsiteUrl\": \"https://www.test.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Chief Financial Officer\",\n                \"Email\": \"jane.doe@test.com\",\n                \"FirstName\": \"Jane\",\n                \"LastName\": \"Doe\",\n                \"Phone\": \"+12125551234\"\n            }\n        ]\n    },\n    \"Id\": \"O5037173\",\n    \"LastModifiedDate\": \"2025-01-24T20:58:10Z\",\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": \"Review the opportunity and update documentation before finalizing rejection.\",\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Approved\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Prospect\",\n        \"TargetCloseDate\": \"2029-10-05\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": \"Yes\",\n        \"CampaignName\": \"MKTG-Q1NYC20\",\n        \"Channels\": [\n            \"Content Syndication\"\n        ],\n        \"Source\": \"Marketing Activity\",\n        \"UseCases\": [\n            \"Analytics\"\n        ]\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"OpportunityOwner\",\n            \"Email\": \"mgztest234@test.com\",\n            \"FirstName\": \"Just Test\",\n            \"LastName\": \"Alliance Lead\",\n            \"Phone\": null\n        },\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"johndoe@test.com\",\n            \"FirstName\": \"John\",\n            \"LastName\": \"Doe\",\n            \"Phone\": \"+14155559876\"\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Architectural Validation\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": \"On-Prem\",\n        \"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n        \"CustomerUseCase\": \"Security & Compliance\",\n        \"DeliveryModels\": [\n            \"SaaS or PaaS\"\n        ],\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"25000\",\n                \"CurrencyCode\": \"USD\",\n                \"EstimationUrl\": null,\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": null,\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Conducted POC / Demo\"\n        ],\n        \"Title\": \"New Business Deal - 5372\"\n    },\n    \"RelatedEntityIdentifiers\": {\n        \"AwsMarketplaceOffers\": [],\n        \"AwsProducts\": [],\n        \"Solutions\": [\n            \"S-0055555\"\n        ]\n    },\n    \"SoftwareRevenue\": {\n        \"DeliveryModel\": \"Pay-as-you-go\",\n        \"EffectiveDate\": \"2023-10-31\",\n        \"ExpirationDate\": \"2024-03-31\",\n        \"Value\": {\n            \"Amount\": \"10000.0\",\n            \"CurrencyCode\": \"USD\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "UpdateOpportunity",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3f66b338-4d44-4084-9f9a-cd06ae71bb28",
								"exec": [
									"try {",
									"    // Retrieve the stored Opportunity payload",
									"    const getOpportunityPayload = pm.collectionVariables.get(\"getOpportunityPayload\");",
									"",
									"    if (getOpportunityPayload) {",
									"        // Parse the payload",
									"        const payload = JSON.parse(getOpportunityPayload);",
									"",
									"        // Update the necessary fields",
									"        payload.Identifier = payload.Id; // Rename \"Id\" to \"Identifier\"",
									"        delete payload.Id; // Remove the original \"Id\" field",
									"        //payload.Customer.Account.Address.PostalCode = null;",
									"        //payload.Project.DeliveryModels = [\"Other\"];",
									"        payload.Project = payload.Project || {}; // Ensure Project exists",
									"        payload.LifeCycle.Stage = \"Technical Validation\";",
									"        // Set the modified payload as the request body",
									"        pm.request.body.raw = JSON.stringify(payload);",
									"        console.log(`[Pre-req ${pm.info.requestName}] Transformed payload for UpdateOpportunity:`, payload);",
									"    } else {",
									"        console.warn(`[Pre-req ${pm.info.requestName}] No payload found from GetOpportunity. Ensure the previous request executed successfully.`);",
									"    }",
									"} catch (error) {",
									"    // Handle errors during payload preparation",
									"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request payload:`, error);",
									"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
									"        pm.expect.fail(error.message);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "7ea1198a-5e78-4ca6-b255-83f9b2000c04",
								"exec": [
									"try {",
									"    // Check the response status",
									"    if (pm.response.code === 200) {",
									"        pm.test(`[Post-res ${pm.info.requestName}] UpdateOpportunity action succeeded`, function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        // Log success",
									"        console.log(`[Post-res ${pm.info.requestName}] Successfully updated Opportunity.`);",
									"    } else {",
									"        // Log failure",
									"        console.error(`[Post-res ${pm.info.requestName}] UpdateOpportunity action failed. Status Code: ${pm.response.code}`);",
									"",
									"        pm.test(`[Post-res ${pm.info.requestName}] Update failed`, function () {",
									"            pm.expect.fail(`Received status code ${pm.response.code}`);",
									"        });",
									"    }",
									"} catch (error) {",
									"    // Handle errors during response processing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
									"        pm.expect.fail(error.message);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "2db7dc4e-09a7-447d-9abe-f54b4f9dfaec",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+14444444444\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": null,\n    \"ReviewStatus\": \"Action Required\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Prospect\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/UpdateOpportunity"
					},
					"response": [
						{
							"id": "9f129562-04b4-4b70-acc4-da88e8b9c59d",
							"name": "UpdateOpportunity",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"Catalog\": \"{{catalog}}\",\n  \"Customer\": {\n    \"Account\": {\n      \"Address\": {\n        \"City\": null,\n        \"CountryCode\": \"AL\",\n        \"PostalCode\": \"9931\",\n        \"StateOrRegion\": \"New York\",\n        \"StreetAddress\": null\n      },\n      \"AwsAccountId\": \"111111111111\",\n      \"CompanyName\": \"TestAssignEditable1\",\n      \"Duns\": \"111100111\",\n      \"Industry\": \"Financial Services\",\n      \"OtherIndustry\": null,\n      \"WebsiteUrl\": \"www.TestAssignEditable1.com\"\n    },\n    \"Contacts\": [\n      {\n        \"BusinessTitle\": \"Executive\",\n        \"Email\": \"testnamelast09@test.com\",\n        \"FirstName\": \"TestContact011\",\n        \"LastName\": \"MLastName001\",\n        \"Phone\": \"+14444444444\"\n      }\n    ]\n  },\n  \"Identifier\": \"{{opportunityId}}\",\n  \"LastModifiedDate\": \"{{lastModifiedDate}}\",\n  \"LifeCycle\": {\n    \"ClosedLostReason\": null,\n    \"NextSteps\": \"Next steps on the opportunity. TEST is used to communicate to AWS the next action required, please update.\",\n    \"NextStepsHistory\": null,\n    \"ReviewComments\": null,\n    \"ReviewStatus\": \"Action Required\",\n    \"ReviewStatusReason\": null,\n    \"Stage\": \"Technical Validation\",\n    \"TargetCloseDate\": \"2029-10-05\"\n  },\n  \"Marketing\": {\n\t\t\"AwsFundingUsed\": null,\n\t\t\"CampaignName\": null,\n\t\t\"Channels\": null,\n\t\t\"Source\": \"None\",\n\t\t\"UseCases\": null\n  },\n  \"NationalSecurity\": \"No\",\n  \"OpportunityType\": \"Net New Business\",\n  \"PartnerOpportunityIdentifier\": null,\n  \"PrimaryNeedsFromAws\": [\n    \"Co-Sell - Architectural Validation\"\n  ],\n  \"Project\": {\n    \"AdditionalComments\": null,\n    \"ApnPrograms\": null,\n    \"CompetitorName\": \"On-Prem\",\n    \"CustomerBusinessProblem\": \"ProjectDescriptionBusinessNeedLengthGreaterThanFiftyCharacters\",\n    \"CustomerUseCase\": \"Security & Compliance\",\n    \"DeliveryModels\": [\n      \"SaaS or PaaS\"\n    ],\n    \"ExpectedCustomerSpend\": [\n      {\n        \"Amount\": \"12500\",\n        \"CurrencyCode\": \"USD\",\n        \"Frequency\": \"Monthly\",\n        \"TargetCompany\": \"AWS\"\n      }\n    ],\n    \"OtherCompetitorNames\": null,\n    \"OtherSolutionDescription\": \"TestSolution\",\n    \"RelatedOpportunityIdentifier\": null,\n    \"SalesActivities\": [\n      \"Conducted POC / Demo\"\n    ],\n    \"Title\": \"TestAssignEditable1\"\n  },\n  \"SoftwareRevenue\": {\n    \"DeliveryModel\": \"Pay-as-you-go\",\n    \"EffectiveDate\": \"2023-10-31\",\n    \"ExpirationDate\": \"2024-03-31\",\n    \"Value\": {\n      \"Amount\": \"10000.0\",\n      \"CurrencyCode\": \"USD\"\n    }\n  }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/UpdateOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 24 Jan 2025 21:00:04 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "59",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "04126ce4-48c8-48bc-a3a3-398fc1f07470",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Id\": \"O5037173\",\n    \"LastModifiedDate\": \"2025-01-24T21:00:03Z\"\n}"
						}
					]
				},
				{
					"name": "GetOpportunity Check Stage",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4ecb04c-f901-41b2-a9a9-d0cd50c2b469",
								"exec": [
									"try {",
									"    // Retrieve the opportunityId from Postman collection variables",
									"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
									"",
									"    // Check the response status",
									"    if (pm.response.code === 200) {",
									"        pm.test(`[Post-res ${pm.info.requestName}] Status code is 200`, function () {",
									"            pm.response.to.have.status(200);",
									"        });",
									"",
									"        // Parse and validate the response",
									"        const responseBody = pm.response.json();",
									"",
									"        pm.test(`[Post-res ${pm.info.requestName}] Validate Opportunity attributes`, function () {",
									"            pm.expect(responseBody).to.have.property('Id');",
									"            pm.expect(responseBody).to.have.property('LifeCycle');",
									"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewStatus', 'Action Required');",
									"            pm.expect(responseBody.LifeCycle).to.have.property('ReviewComments').that.is.not.empty;",
									"        });",
									"",
									"        // Store the complete response for subsequent requests",
									"        pm.collectionVariables.set(\"getOpportunityPayload\", JSON.stringify(responseBody));",
									"        console.log(`[Post-res ${pm.info.requestName}] Stored updated Opportunity payload for ID: ${responseBody.Id}`);",
									"    } else {",
									"        console.error(`[Post-res ${pm.info.requestName}] Failed to retrieve updated Opportunity with ID: ${opportunityId}. Status Code: ${pm.response.code}`);",
									"",
									"        pm.test(`[Post-res ${pm.info.requestName}] Retrieval failed`, function () {",
									"            pm.expect.fail(`Received status code ${pm.response.code}`);",
									"        });",
									"    }",
									"} catch (error) {",
									"    // Handle errors during response processing",
									"    console.error(`[Post-res ${pm.info.requestName}] Error processing response:`, error);",
									"    pm.test(`[Post-res ${pm.info.requestName}] Error in test execution`, function () {",
									"        pm.expect.fail(error.message);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "f926d538-8031-4f26-bcce-8a09fa162897",
								"exec": [
									"try {",
									"    // Retrieve the opportunityId from Postman collection variables",
									"    const opportunityId = pm.collectionVariables.get(\"opportunityId\");",
									"",
									"    if (opportunityId) {",
									"        console.log(`[Pre-req ${pm.info.requestName}] Fetching updated Opportunity with ID: ${opportunityId}`);",
									"    } else {",
									"        console.warn(`[Pre-req ${pm.info.requestName}] No opportunityId found. Ensure it has been set before executing this action.`);",
									"    }",
									"} catch (error) {",
									"    // Handle errors during pre-request execution",
									"    console.error(`[Pre-req ${pm.info.requestName}] Error preparing request:`, error);",
									"    pm.test(`[Pre-req ${pm.info.requestName}] Error in pre-request script`, function () {",
									"        pm.expect.fail(error.message);",
									"    });",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "599c274a-caf9-4782-a740-3f0f8a1c6399",
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false,
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json, text/javascript, */*; q=0.01"
							},
							{
								"key": "Content-Type",
								"value": "application/json; charset=UTF-8"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{acceptedEngagementOpportunityID}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{BASE_URL}}/GetOpportunity",
						"description": "[https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html](https://docs.aws.amazon.com/partner-central/latest/APIReference/API_GetOpportunity.html)"
					},
					"response": [
						{
							"id": "0231f984-e3fd-47de-a78f-2158cdaa7236",
							"name": "GetOpportunity Check Stage",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json, text/javascript, */*; q=0.01"
									},
									{
										"key": "Content-Type",
										"value": "application/json; charset=UTF-8"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n   \"Catalog\": \"{{catalog}}\",\n   \"Identifier\": \"{{acceptedEngagementOpportunityID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{BASE_URL}}/GetOpportunity"
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Date",
									"value": "Fri, 24 Jan 2025 21:00:09 GMT",
									"enabled": true
								},
								{
									"key": "Content-Type",
									"value": "application/json",
									"enabled": true
								},
								{
									"key": "Content-Length",
									"value": "2416",
									"enabled": true
								},
								{
									"key": "Connection",
									"value": "keep-alive",
									"enabled": true
								},
								{
									"key": "x-amzn-RequestId",
									"value": "cf2a9c27-9a5e-4b14-b888-6a08be227627",
									"enabled": true
								}
							],
							"cookie": [],
							"responseTime": null,
							"body": "{\n    \"Arn\": \"arn:aws:partnercentral:us-east-1:111111111111:catalog/Sandbox/opportunity/O5555555\",\n    \"Catalog\": \"Sandbox\",\n    \"CreatedDate\": \"2025-01-24T20:48:50Z\",\n    \"Customer\": {\n        \"Account\": {\n            \"Address\": {\n                \"City\": \"New York\",\n                \"CountryCode\": \"US\",\n                \"PostalCode\": \"10001\",\n                \"StateOrRegion\": \"New York\",\n                \"StreetAddress\": \"123 Wall Street\"\n            },\n            \"AwsAccountId\": \"123456789012\",\n            \"CompanyName\": \"Acme Corp\",\n            \"Duns\": \"987654321\",\n            \"Industry\": \"Financial Services\",\n            \"OtherIndustry\": \"Investment Banking\",\n            \"WebsiteUrl\": \"https://www.test.com\"\n        },\n        \"Contacts\": [\n            {\n                \"BusinessTitle\": \"Chief Financial Officer\",\n                \"Email\": \"jane.doe@test.com\",\n                \"FirstName\": \"Jane\",\n                \"LastName\": \"Doe\",\n                \"Phone\": \"+12125551234\"\n            }\n        ]\n    },\n    \"Id\": \"O5555555\",\n    \"LastModifiedDate\": \"2025-01-24T21:00:03Z\",\n    \"LifeCycle\": {\n        \"ClosedLostReason\": null,\n        \"NextSteps\": \"Review the opportunity and update documentation before finalizing rejection.\",\n        \"NextStepsHistory\": null,\n        \"ReviewComments\": null,\n        \"ReviewStatus\": \"Approved\",\n        \"ReviewStatusReason\": null,\n        \"Stage\": \"Technical Validation\",\n        \"TargetCloseDate\": \"2029-10-05\"\n    },\n    \"Marketing\": {\n        \"AwsFundingUsed\": \"Yes\",\n        \"CampaignName\": \"MKTG-Q1NYC2\",\n        \"Channels\": [\n            \"Content Syndication\"\n        ],\n        \"Source\": \"Marketing Activity\",\n        \"UseCases\": [\n            \"Analytics\"\n        ]\n    },\n    \"NationalSecurity\": \"No\",\n    \"OpportunityTeam\": [\n        {\n            \"BusinessTitle\": \"OpportunityOwner\",\n            \"Email\": \"mgztest234@test.com\",\n            \"FirstName\": \"Just Test\",\n            \"LastName\": \"Alliance Lead\",\n            \"Phone\": null\n        },\n        {\n            \"BusinessTitle\": \"PartnerAccountManager\",\n            \"Email\": \"johndoe@test.com\",\n            \"FirstName\": \"John\",\n            \"LastName\": \"Doe\",\n            \"Phone\": \"+14155559876\"\n        }\n    ],\n    \"OpportunityType\": \"Net New Business\",\n    \"PartnerOpportunityIdentifier\": null,\n    \"PrimaryNeedsFromAws\": [\n        \"Co-Sell - Architectural Validation\"\n    ],\n    \"Project\": {\n        \"AdditionalComments\": null,\n        \"ApnPrograms\": null,\n        \"CompetitorName\": \"On-Prem\",\n        \"CustomerBusinessProblem\": \"A very important problem goes here ValidAWSCreate\",\n        \"CustomerUseCase\": \"Security & Compliance\",\n        \"DeliveryModels\": [\n            \"SaaS or PaaS\"\n        ],\n        \"ExpectedCustomerSpend\": [\n            {\n                \"Amount\": \"25000\",\n                \"CurrencyCode\": \"USD\",\n                \"EstimationUrl\": null,\n                \"Frequency\": \"Monthly\",\n                \"TargetCompany\": \"AWS\"\n            }\n        ],\n        \"OtherCompetitorNames\": null,\n        \"OtherSolutionDescription\": null,\n        \"RelatedOpportunityIdentifier\": null,\n        \"SalesActivities\": [\n            \"Conducted POC / Demo\"\n        ],\n        \"Title\": \"New Business Deal - 5372\"\n    },\n    \"RelatedEntityIdentifiers\": {\n        \"AwsMarketplaceOffers\": [],\n        \"AwsProducts\": [],\n        \"Solutions\": [\n            \"S-0059717\"\n        ]\n    },\n    \"SoftwareRevenue\": {\n        \"DeliveryModel\": \"Pay-as-you-go\",\n        \"EffectiveDate\": \"2023-10-31\",\n        \"ExpirationDate\": \"2024-03-31\",\n        \"Value\": {\n            \"Amount\": \"10000.0\",\n            \"CurrencyCode\": \"USD\"\n        }\n    }\n}"
						}
					]
				}
			],
			"id": "67756d89-22b8-4864-ad70-8354286df241",
			"description": "<img src=\"https://content.pstmn.io/8d817c0e-b89d-45bd-ba9a-8f10a606c965/QVdTIE9yaWdpbmF0ZWQgT3Bwb3J0dW5pdHkucG5n\" alt=\"AWS%20Originated%20Opportunity\" height=\"585\" width=\"1125\">"
		}
	],
	"auth": {
		"type": "awsv4",
		"awsv4": {
			"secretKey": "{{vault:aws.secretKey.inviting}}",
			"accessKey": "{{vault:aws.accessKey.inviting}}",
			"service": "{{aws.partnercentral.service}}",
			"region": "{{aws.region}}",
			"sessionToken": "{{vault:aws.sessionToken.inviting}}"
		}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b15a2e18-c213-4213-b1cd-7eee2a58aebd",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "9b4f06fa-fa01-4bbc-9934-a77bc8f3163e",
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "catalog",
			"value": "Sandbox"
		},
		{
			"key": "rejectingEngagementInvitationID",
			"value": ""
		},
		{
			"key": "acceptingEngagementInvitationID",
			"value": ""
		},
		{
			"key": "acceptedEngagementOpportunityID",
			"value": ""
		},
		{
			"key": "opportunityId",
			"value": ""
		},
		{
			"key": "opportunityID",
			"value": ""
		},
		{
			"key": "solutionID",
			"value": ""
		},
		{
			"key": "lastModifiedDate",
			"value": ""
		},
		{
			"key": "productId",
			"value": ""
		},
		{
			"key": "solutionId",
			"value": ""
		},
		{
			"key": "getOpportunityPayload",
			"value": ""
		},
		{
			"key": "companyName",
			"value": "",
			"type": "default"
		},
		{
			"key": "engagementId",
			"value": ""
		},
		{
			"key": "taskId",
			"value": ""
		}
	]
}